<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="bbNG.xsl"?>

<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:bb="http://www.blackboard.com/tld-public-api"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
        version="2.0">

  <tlib-version>1.0</tlib-version>
  <short-name>bbNG</short-name>
  <uri>/bbNG</uri>
  <description>
    Next-Gen UI Taglib.

    The Blackboard User Interface tag library encapsulates Blackboard user interface
    elements to allow developers easy access to the Blackboard look and feel.
  </description>

  <!-- JSP/Javascript Block Tags -->

  <tag bb:public="true">
    <name>jspBlock</name>
    <tag-class>blackboard.servlet.tags.ngui.JspBlockTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders a generic block of JSP code.  In general, any one-off jsp code should be
      surrounded by this tag so that it can be easily identified in the future, and so that
      rendering can still be controlled by a parent tag.
      ]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>jsBlock</name>
    <tag-class>blackboard.servlet.tags.ngui.JavascriptBlockTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the contents of the body at the bottom of the page.

      Do not stick any external script blocks in a &lt;bbNG:jsBlock&gt;.  Use the &lt;bbNG:jsFile&gt; tag
      instead.

      This tag may only be used within a NG page tag.
      <p>
      Example usage: <br>
      <b>&lt;bbNG:jsBlock&gt;</b> <br>
      &nbsp;&nbsp; &lt;script type="text/javascript"&gt; .... &lt;/script&gt; <br>
      <b>&lt;/bbNG:jsBlock&gt;</b>
      </p>
      ]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>jsOnLoadBlock</name>
    <tag-class>blackboard.servlet.tags.ngui.JavascriptOnLoadBlockTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the contents of the body within the onLoad block of the page.

      This tag may only be used within a NG page tag.
      <p>
      Example usage: <br>
      <b>&lt;bbNG:jsOnLoadBlock&gt;</b> <br>
      &nbsp;&nbsp; alert( "Look at me mom, no hands!" ); <br>
      <b>&lt;/bbNG:jsOnLoadBlock&gt;</b>
      </p>
      ]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>jsBundleMessage</name>
    <tag-class>blackboard.servlet.tags.ngui.JavascriptBundleMessageTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Exposes a message from a resource bundle to be used in JavaScript.
      This tag may only be used within a NG page tag.

      <p>
      Example usage: <br>
      <code><b>&lt;bbNG:jsBundleMessage bundle="common" key="common.ok" /&gt;</b></code> <br>
      <code><b>&lt;bbNG:jsBundleMessage bundle="some_other_bundle" key="common.ok" uniqueKey="otherOKString" /&gt;</b></code> <br>
      <code><b>&lt;bbNG:jsBundleMessage uniqueKey="my.bundle.message" value="Some String value {0}" /&gt;</b></code> <br>
      </p>

      JavaScript code can then use the message by calling:
      <p>
      <code>
       &lt;script&gt;
       <br>
         ...
         <br>
         page.bundle.getString( "common.ok", arg1, arg2, ...., argN );
         <br>
         page.bundle.getString( "otherOKString", arg1, arg2, ...., argN );
         <br>
         page.bundle.getString( "my.bundle.message", arg1 );
         <br>
         ...
         <br>
       &lt;/script&gt;
      </code>
      </p>
      ]]>
    </description>
    <attribute>
      <name>bundle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Name of the resource bundle to load the message from.</description>
    </attribute>
    <attribute>
      <name>key</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Key in the message bundle for the message that should be loaded.</description>
    </attribute>
    <attribute>
      <name>uniqueKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique key to use as reference the message string in the bundle in case
        of bundle key name collisions within a page. The required (bundle) key
        will be used if an unique key is not provided. If a unique key is provided,
        then the bundle string can be only referenced by the unique key and not the key.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Raw string value to expose as the message value.  If this attribute is specified, the uniqueKey attribute
        must be specified and the bundle and key attributes will be ignored
      </description>
    </attribute>
    <attribute>
      <name>b2vendor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      If specified, the vendor id of a B2 to get the default property bundle from.  Only used if bundle and value are not specified
      and b2handle is specified
      </description>
    </attribute>
    <attribute>
      <name>b2handle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      If specified, the handle of a B2 to get the default property bundle from.  Only used if bundle and value are not specified
      and b2vendor is specified
      </description>
    </attribute>
    <attribute>
      <name>resourceBundle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      If specified it must be a BbResourceBundle from which to get the key.  Only used if bundle, value, b2vendor, and b2handle
      are not specified
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>cssBlock</name>
    <tag-class>blackboard.servlet.tags.ngui.CssBlockTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
       Renders the contents of the body (stylesheet &lt;style&gt; tags) into the document head.

       This tag may only be used within a NG page tag.
       <p>
       Example usage: <br>
       <b>&lt;bbNG:cssBlock&gt;</b> <br>
       &nbsp;&nbsp; &lt;style type="text/css"&gt; .... &lt;/style&gt; <br>
       <b>&lt;/bbNG:cssBlock&gt;</b>
       </p>
      ]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>jsFile</name>
    <tag-class>blackboard.servlet.tags.ngui.JavascriptFileTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
       Includes a javascript file in the document.  Must be used inside an NG page tag.  If
       any legacy messages are associated with this file (from JsResource), they will
       automatically be included.  If included more than once, only one script will be output.
       If resourceBundle and keys are specified then those messages from a resource bundle will
       be exposed to be used in JavaScript.

       <p>
         Example usage: <br>
         <code><b>&lt;bbNG:jsFile href="message.js" /&gt;</b></code>
         <code><b>&lt;bbNG:jsFile href="message.js" resourceBundle="common" keys="my.bundle.message.key" /&gt;</b></code>
         <code><b>&lt;bbNG:jsFile href="message.js" resourceBundle="common" keys="my.bundle.message.key, my.bundle.message.key.another" /&gt;</b></code>
       </p>

       JavaScript code can then use the messages included (if keys/resourceBundle are specified) by calling:
       <p>
         <code>
          &lt;script&gt;
          <br>
            ...
            <br>
            page.bundle.getString( "my.bundle.message.key", arg1, arg2, ...., argN );
            <br>
            <br>
            page.bundle.getString( "my.bundle.message.key.another", arg1);
            <br>
            ...
            <br>
          &lt;/script&gt;
         </code>
       </p>
      ]]>
    </description>
    <attribute>
      <name>href</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      <![CDATA[
      Path to the js file.  If it does not begin with a / then the current context will be prepended.
      In other words, instead of using "/webapps/discussionboard/js/message.js you can
      just use "js/message.js" if inside the /webapps/discussionboard context
      ]]>
      </description>
    </attribute>
    <attribute>
      <name>group</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       <![CDATA[
        JavaScript combined group to include this in.  Files in the same group will be merged together and
        served as one file. By default, no grouping/merging will be done.
        <p>
        All co-dependent JS files should be in the same group to avoid ordering conflicts.
        <p>
        Note: this grouping will only be done if the bbconfig.group.javascript.files bb-config property is set to true.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>resourceBundle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>If specified it must be a BbResourceBundle from which to get the key.</description>
    </attribute>
    <attribute>
      <name>keys</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Comma separated list of keys to load from the message bundle.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>cssFile</name>
    <tag-class>blackboard.servlet.tags.ngui.CssFileTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
        Includes a CSS file in the document. Must be used inside an NG page tag.
        If the same file is included more than once, only one reference will be output to the page.

        <p> <b>Plugin handling</b> </p>

        The tag performs special handling for plugins determined when the given <code>href</code> has no path (/ or \) and
        a plugin is in the current context or <code>b2vendor</code> and <code>b2handle</code> attributes are given.
        Matching CSS files in the following locations are added:

        <ol>
          <li>Plugin's canonical CSS location
            <ul>
            <li>The canonical CSS directory for a plugin is <b><code>webapp/css</code></b> and the file of the same name in that
                location will be included.
            <li>For example, if <code>href="myb2.css"</code> and <code>"[MYB2_ROOT]/webapp/css/myb2.css"</code> exists in the filesystem,
                then the plugin's webapp path to the file is added:
                <div style="border:1px dotted #000000;padding:5px;"><code>"/webapps/myb2/css/myb2.css"</code></div>
            </ul>
          </li>
          <li>Plugin's theme-specific location
            <ul>
            <li>The plugin's customized theme CSS of the same name is also included, if found. The theme being loaded will be the theme
                associated with the current brand.
            <li>For example, if <code>href="myb2.css"</code> and the theme is "Bb Learn 2012", if
                <code>"[MYB2_ROOT]/webapp/css/as_2012/myb2.css"</code> exists in the filesystem, then the plugin's webapp path to the
                file is added:
                <div style="border:1px dotted #000000;padding:5px;"><code>"/webapps/myb2/css/as_2012/myb2.css"</code></div>
              <ul>
              <li>Note that the path for custom themes (vs system default themes) is in a different location, and the tag will handle it
                  appropriately.
              </ul>
            <li>Note that theme-specific CSS will be automatically skipped if included on a page where <code>skipCoreCss="true"</code>.
            </ul>
          </li>
          <li>Plugin's course-theme-specific location
            <ul>
            <li>The plugin's customized course-theme CSS of the same name is also included, if found and is applicable. The course-theme
                being loaded will be the course-theme currently in use for the course in context.
            <li>For example, if <code>href="myb2.css"</code> and the course-theme is "Colorful", if
                <code>"[MYB2_ROOT]/webapp/css/coursethemes/colorful/myb2.css"</code> exists in the filesystem, then the plugin's webapp
                path to the file is added:
                <div style="border:1px dotted #000000;padding:5px;"><code>"/webapps/myb2/css/coursethemes/colorful/myb2.css"</code></div>
            </ul>
          </li>
        </ol>

        The general and/or theme-specific CSS files will be added to the rendered page (as well as RTL versions, if applicable).
        <p>
        Again, the <code>href</code> cannot have any path (/ or \) if it references a plugin CSS file. Please note that if your page is
        in a plugin and you are directly referencing CSS from other plugins by specifying the <code>b2vendor</code> and <code>b2handle</code> attributes, then do not forget to also declare the plugin dependency in your <code>bb-manifest.xml</code> file. If a plugin of the
        given <code>b2vendor</code> and <code>b2handle</code> attributes cannot be found, then the current plugin will be used to try and
        find the referenced file.
      ]]>
    </description>
    <attribute>
      <name>href</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Path to the css file.</description>
    </attribute>
    <attribute>
      <name>b2vendor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The value of the vendor.id for another B2 from which you want to load a css file - only applicable if there is no path in the href and b2handle is specified</description>
    </attribute>
    <attribute>
      <name>b2handle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The value of the handle for another B2 from which you want to load a css file - only applicable if there is no path in the href and b2vendor is specified</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>copyright</name>
    <tag-class>blackboard.servlet.tags.ngui.CopyrightTag</tag-class>
    <body-content>empty</body-content>
    <description>Standard HTML snippet for Blackboard copyright notice</description>
  </tag>


  <!-- Page Shell Tags -->

  <tag bb:public="true">
    <name>genericPage</name>
    <tag-class>blackboard.servlet.tags.ngui.GenericPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
       Renders the page shell for a generic academic suite page with the body wrapped with
       global navigation. The page default renders in non-ajax mode.
       It will set the current mode of page operation to ajax-mode,based on the presence of
       ajax-mode request attribute, which in turn will be used by all other child tags and
       itself to optimize the processing and rendering in ajax-mode.
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page title.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>wrapper</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether or not the wrapping page components (breadcrumb bar/title bar/
        content div) should be shown.  Default true.
      </description>
    </attribute>
    <attribute>
      <name>bodyClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML class attribute for body tag.  Default is none.
      </description>
    </attribute>
    <attribute>
      <name>containerClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1 SP10.
        Default: none.
        Additional HTML class attribute(s) for the container div that appears immediately after the action bar. It is appended to the existing attribute ("container")
      </description>
    </attribute>
    <attribute>
      <name>outputBodyTags</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Whether to output &lt;body&gt; and &lt;/body&gt; tags around the contents.  Default true.

        Use for when you want to output a frameset or something that doesn't need a body tag.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>outputCopyright</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the copyright footer should be added to the page.  Default false.
      </description>
    </attribute>
    <attribute>
      <name>showBreadcrumbBar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the breadcrumb should be displayed. Default true.
      </description>
    </attribute>
    <attribute>
      <name>lightbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the page opens as a lightbox. Default false.
      </description>
    </attribute>
    <attribute>
      <name>skipCoreCss</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP10
        Default: false.
        Set to true for pages where you need to make sure none of the course, theme, or branding css (i.e. skip all core css files).  Note that if you set this to true and try to
        use any other taglibs that rely on core css files then you must manually include them in your page.
      </description>
    </attribute>
    <attribute>
      <name>globalNavigation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP16
        Default: true.
        Set to false for pages such as popups that should not include global navigation.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>includedPage</name>
    <tag-class>blackboard.servlet.tags.ngui.IncludedPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
       Allows this "page" to use the scaffolding framework while allowing its contents
       to be jsp-included to another page.  This will output the evaluated jsp along
       with any js/css/onload js snippets that have been registered using the scaffolding
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
  </tag>

  <tag>
    <name>portalPage</name>
    <tag-class>blackboard.servlet.tags.ngui.PortalPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
       Renders the page shell for a portal page (community system)
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page title.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>flush</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the page is able to be incrementally flushed (default: false).

       When this is set to "true", the behavior of the scaffolding changes, and some of the
       automatic magic will not work the same way.
       - additional javascript blocks, html snippets, css files, onload javascript is put at the bottom
         of the html file rather than at the top
       - Some container divs are not output, so the JSP has to include them
       - Inline receipts aren't automatically added (have to use the inlineReceipt tag)
       - Breadcrumbs / Titlebar aren't automatically added
      </description>
    </attribute>
    <attribute>
      <name>bodyClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML class attribute for body tag.  Default is none.
      </description>
    </attribute>
    <attribute>
      <name>skipCoreCss</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP10
        Default: false.
        Set to true for pages where you need to make sure none of the course, theme, or branding css (i.e. skip all core css files).  Note that if you set this to true and try to
        use any other taglibs that rely on core css files then you must manually include them in your page.
      </description>
    </attribute>
    <attribute>
      <name>globalNavigation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP16
        Default: true.
        Set to false for pages such as popups that should not include global navigation.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>adminConsolePage</name>
    <tag-class>blackboard.servlet.tags.ngui.AdminConsolePageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
       Renders the page shell for an admin page.The page default renders in non-ajax mode.
       It will set the current mode of page operation to ajax-mode,based on the presence
        of ajax-mode request attribute, which in turn will be used by all other child tags and itself
        to optimize the processing and rendering in ajax-mode.
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page title.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>flush</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the page is able to be incrementally flushed (default: false).

       When this is set to "true", the behavior of the scaffolding changes, and some of the
       automatic magic will not work the same way.
       - additional javascript blocks, html snippets, css files, onload javascript is put at the bottom
         of the html file rather than at the top
       - Some container divs are not ouput, so the JSP has to include them
       - Inline receipts aren't automatically added (have to use the inlineReceipt tag)
       - Breadcrumbs / Titlebar aren't automatically added
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>modulePage</name>
    <tag-class>blackboard.servlet.tags.ngui.module.ModulePageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
       Renders the page shell for a module admin / module personalization page
      ]]>
    </description>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Type of the page.  Must either be "admin" or "personalize", corresponding
      to a moduleAdminPage or a modulePersonalizationPage.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title to display in the titlebar</description>
    </attribute>
    <attribute>
      <name>instructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page-level instructions.</description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Location of the icon to display in the titlebar of the page</description>
    </attribute>
    <attribute>
      <name>receiptPage</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page is a receipt page.  Default false.</description>
    </attribute>
    <attribute>
      <name>recallUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Link target for the OK button (only takes effect when "receiptPage" is true</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>formName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Pass the formName if the type is "personalize".
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>moduleAdminPage</name>
    <tag-class>blackboard.servlet.tags.ModuleAdminPageTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Creates the header and footer for a module personalization page
        </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title to display in the titleBar</description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Location of the icon to display in the titleBar of this page
          </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>learningSystemPage</name>
    <tag-class>blackboard.servlet.tags.ngui.LearningSystemPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the page shell for a Learning System page (includes course menu, etc.)
     The page default renders in non-ajax mode. It will set the current mode of page
      operation to ajax-mode,based on the presence of ajax-mode request attribute,
      which in turn will be used by all other child tags and itself to optimize the processing
      and rendering in ajax-mode.
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page title.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>hideCourseMenu</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Indicates if you want to actually display the course menu (default:false).
      This would only be used on pages where you sometimes want the menu and sometimes not, such as
      taking an assessment - if it is an 'open-in-new-window' assessment then this is true but otherwise
      this is false</description>
    </attribute>
    <attribute>
      <name>readModeAction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to use for the read mode in the toggle bar (defaults to window.location if not specified).
      If set to javascript:xxx then xxx is evaluated as javascript instead of setting the window.location directly.</description>
    </attribute>
    <attribute>
      <name>editModeAction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to use for the edit mode in the toggle bar (defaults to window.location if not specified).
      If set to javascript:xxx then xxx is evaluated as javascript instead of setting the window.location directly.</description>
    </attribute>
    <attribute>
      <name>hideEditToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Indicates if you want to actually display the toggle control (default:false).
      This is currently being used for the Send Email tool for an integrated course.</description>
    </attribute>
    <attribute>
      <name>disableEditToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether to disable the edit toggle (default:false).
      </description>
    </attribute>
    <attribute>
      <name>bodyClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML class attribute for body tag.  Default is none.
      </description>
    </attribute>
    <attribute>
      <name>containerClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1 SP10.
        Default: none.
        Additional HTML class attribute(s) for the container div that appears immediately after the action bar. It is appended to the existing attribute ("container")
      </description>
    </attribute>
    <attribute>
      <name>checkGuest</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If set to Y it allows access to guest and course guest users irrespective of the entitlement to access the page.  Default is N.
      </description>
    </attribute>
    <attribute>
      <name>outputCopyright</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the copyright footer should be added to the page. Default false.
      </description>
    </attribute>
    <attribute>
      <name>standalone</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the page opens as a standalone page. Default false.
      </description>
    </attribute>
    <attribute>
      <name>lightbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the page opens as a lightbox. Default false.
      </description>
    </attribute>
    <attribute>
      <name>skipCoreCss</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP10
        Default: false.
        Set to true for pages where you need to make sure none of the course, theme, or branding css (i.e. skip all core css files).  Note that if you set this to true and try to
        use any other taglibs that rely on core css files then you must manually include them in your page.
      </description>
    </attribute>
    <attribute>
      <name>globalNavigation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP16
        Default: true.
        Set to false for pages such as popups that should not include global navigation.
      </description>
    </attribute>
  </tag>

  <tag bb:public="false">
    <name>contentSystemPage</name>
    <tag-class>blackboard.servlet.tags.ngui.ContentSystemPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the page shell for a Content System page, extending learningSystemPage.
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page title.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>hideCourseMenu</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Indicates if you want to actually display the course menu (default:false).
        This would only be used on pages where you sometimes want the menu and sometimes not, such as
        taking an assessment - if it is an 'open-in-new-window' assessment then this is true but otherwise
        this is false</description>
    </attribute>
    <attribute>
      <name>hideContentMenu</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Indicates if you want to actually display the content menu (default:true). Forced to true if hideCourseMenu is false.</description>
    </attribute>
    <attribute>
      <name>readModeAction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to use for the read mode in the toggle bar (defaults to window.location if not specified).
        If set to javascript:xxx then xxx is evaluated as javascript instead of setting the window.location directly.</description>
    </attribute>
    <attribute>
      <name>editModeAction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to use for the edit mode in the toggle bar (defaults to window.location if not specified).
        If set to javascript:xxx then xxx is evaluated as javascript instead of setting the window.location directly.</description>
    </attribute>
    <attribute>
      <name>hideEditToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Indicates if you want to actually display the toggle control (default:false).
        This is currently being used for the Send Email tool for an integrated course.</description>
    </attribute>
    <attribute>
      <name>disableEditToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether to disable the edit toggle (default:false).
      </description>
    </attribute>
    <attribute>
      <name>bodyClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML class attribute for body tag.  Default is none.
      </description>
    </attribute>
    <attribute>
      <name>containerClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1 SP10.
        Default: none.
        Additional HTML class attribute(s) for the container div that appears immediately after the action bar. It is appended to the existing attribute ("container")
      </description>
    </attribute>
    <attribute>
      <name>checkGuest</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If set to Y it allows access to guest and course guest users irrespective of the entitlement to access the page.  Default is N.
      </description>
    </attribute>
    <attribute>
      <name>outputCopyright</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the copyright footer should be added to the page. Default false.
      </description>
    </attribute>
    <attribute>
      <name>standalone</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the page opens as a standalone page. Default false.
      </description>
    </attribute>
    <attribute>
      <name>lightbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the page opens as a lightbox. Default false.
      </description>
    </attribute>
    <attribute>
      <name>skipCoreCss</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP10
        Default: false.
        Set to true for pages where you need to make sure none of the course, theme, or branding css (i.e. skip all core css files).  Note that if you set this to true and try to
        use any other taglibs that rely on core css files then you must manually include them in your page.
      </description>
    </attribute>
    <attribute>
      <name>globalNavigation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP16
        Default: true.
        Set to false for pages such as popups that should not include global navigation.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>fileManagerPage</name>
    <tag-class>blackboard.servlet.tags.ngui.FileManagerPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      Renders the palette menu to embed view of FileManager.
    </description>
  </tag>

  <tag>
    <name>hierarchySystemPage</name>
    <tag-class>blackboard.servlet.tags.ngui.HierarchySystemPageTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the page shell for a multi-institution hierarchy page (includes entity navigation sidebar, etc.)
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
     <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Space separated list of css classes to apply to page tag</description>
    </attribute>
    <attribute>
      <name>bodyClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML class attribute for body tag.  Default is none.
      </description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>nodeId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Node presents in the page, it is used by navigation sidebar</description>
    </attribute>
    <attribute>
      <name>outputCopyright</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the copyright footer should be added to the page. Default false.
      </description>
    </attribute>
    <attribute>
      <name>skipCoreCss</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Since: 9.1SP10
        Default: false.
        Set to true for pages where you need to make sure none of the course, theme, or branding css (i.e. skip all core css files).  Note that if you set this to true and try to
        use any other taglibs that rely on core css files then you must manually include them in your page.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>outcomesSystemPage</name>
    <tag-class>blackboard.servlet.tags.ngui.OutcomesSystemPageTag</tag-class>
    <tei-class>blackboard.servlet.tags.ngui.BasePageTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the page shell for a Outcomes System page (includes outcomes system menu, etc.)
      he page default renders in non-ajax mode. It will set the current mode of page
       operation to ajax-mode,based on the presence of ajax-mode request attribute,
       which in turn will be used by all other child tags and itself to optimize the processing
       and rendering in ajax-mode.
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the nav item of the page.</description>
    </attribute>
     <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Space separated list of css classes to apply to page tag</description>
    </attribute>
    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Body onLoad JavaScript handler.</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page title.</description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>License key to check for access to this page.</description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Array of Entitlements that are allowed to view this page.</description>
    </attribute>
    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Entitlement required to view this page.</description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this page requires the user to be logged in (Y/N).</description>
    </attribute>
    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The context override to use for this page (e.g. ADMIN_PANEL).</description>
    </attribute>
    <attribute>
      <name>ctxId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        PageContext attribute name to stick the Context object in.  If this is
        not specified, then the attribute used will be "bbContext".
      </description>
    </attribute>
    <attribute>
      <name>showBreadcrumbBar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean toggle to show/hide the breadcrumb on the page. The default is true.
        In general, pages should always have the breadcrumb bar unless PM and UX
        explicitly specified that rendering of the breadcrumb bar should be suppressed.
      </description>
    </attribute>
    <attribute>
      <name>outputCopyright</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the copyright footer should be added to the page. Default false.
      </description>
    </attribute>
  </tag>

  <!--  Receipt / Error tags -->
  <tag bb:public="true">
    <name>receipt</name>
    <tag-class>blackboard.servlet.tags.ngui.ReceiptTag</tag-class>
    <body-content>JSP</body-content>
    <description>Creates a receipt page using titleBar and button components</description>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Type of receipt. Valid values: (SUCCESS, FAIL, DISABLED). If type is not set to a
        supported value or is null, then default to successful receipt
      </description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A String containing the iconUrl. Should look like:
        "/images/ci/icons/receiptsuccess_u.gif"
      </description>
    </attribute>
    <attribute>
      <name>pluginId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The Id for the plugin (known by the plugin developer and used as the directory
        root of the plugin, e.g "/Blackboard/plugins/*pluginId*/images/pluginimg.gif")
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Page title for the receipt page. If not set, tag attempts to retrieve from the
        navItem+context
      </description>
    </attribute>
    <attribute>
      <name>recallUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        OK button, if null will attempt to locate recallUrl from nav item or use
        javascript back. ONLY SHOWN IF submitUrl and cancelUrl are both null
      </description>
    </attribute>
    <attribute>
      <name>cancelUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional attribute to allow the receipt to have two buttons (although either may
        be used alone) LINK rather than FORM_SUBMIT action. NOTE: previous documentation
        referenced another attribute called submitUrl. This seems to have been replaced by
        recallUrl?
      </description>
    </attribute>
    <attribute>
      <name>buttonName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Name of the button.</description>
    </attribute>
    <attribute>
      <name>buttonAlt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Alternate text to display in a no-images browser</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>error</name>
    <tag-class>blackboard.servlet.tags.ngui.ErrorTag</tag-class>
    <body-content>empty</body-content>
    <description>Handles exception UI</description>
    <attribute>
      <name>exception</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The exception that was thrown</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>errors</name>
    <tag-class>blackboard.servlet.tags.ErrorsTag</tag-class>
    <body-content>empty</body-content>
    <description>
      This is a replacement for the Struts html:error tag, which does not include the
      internationalization features
      <![CDATA[<p>]]>
      Note that, due to a dependency on Struts, and the fact that Struts 1.0 cannot be
      loaded from the systemlib classloader, this class is NOT built into the
      bb-taglib-api.jar. Instead, if you need to use this tag, you must include bb-common.jar
      in your webapp.
    </description>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of the page context attribute containing the ActionErrors object to be displayed
      </description>
    </attribute>
    <attribute>
      <name>property</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of the property for which error messages should be returned, or null to
        return all errors
      </description>
    </attribute>
  </tag>

  <!-- Page Header Tags -->
  <tag bb:public="true">
    <name>pageHeader</name>
    <tag-class>blackboard.servlet.tags.ngui.PageHeaderTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the page header (page title and instructions)
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Navigation Item handle for the header.</description>
    </attribute>
    <attribute>
      <name>instructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Page-level instructions.</description>
    </attribute>
    <attribute>
      <name>helpKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Bundle key prefix for page-level instructions and extended instructions.  The key prefix will be combined with
        several standard suffixes:
        <ul>
         <li>[helpKey].help: This key represents the page-level inline instructions.</li>
         <li>[helpKey].course.help: Course-specific page-level inline instructions; overrides [helpKey].help</li>
         <li>[helpKey].org.help: Organization-specific page-level inline instructions; overrides [helpKey].help</li>
         <li>[helpKey].help.extended: This key represents the extended help shown when the user clicks the More Help link. If not specified, no More Help link will be shown.</li>
         <li>[helpKey].course.help.extended: Course-specific extended help; overrides [helpKey].help.extended</li>
         <li>[helpKey].org.help.extended: Organization-specific extended help; overrides [helpKey].help.extended</li>
         <li>[helpKey].help.page.title: Custom title for the extended help popup window. If not specified, a default title will be used</li>
        </ul>
        These keys may be located in a plugin message bundle or in the core system's help.properties bundle.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>helpResolverClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Resolver class that will handle dynamic text substitution for extended help.</description>
    </attribute>
    <attribute>
      <name>banner</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Page banner to be placed above title. This attribute overrides any system
        default value, if any, like course banner.
      </description>
    </attribute>
    <attribute>
      <name>lightbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the page opens as a lightbox. Default false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>pageTitleBar</name>
    <tag-class>blackboard.servlet.tags.ngui.PageTitleBarTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the page titlebar. This tag is only for use within the pageHeader tag.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Text for the page title (can also use the body of the tag
        for the title text).
        Optional when the <code>navItem</code> attribute is provided to
        either the page or page header tags-- the page title will be realized
        from the nav item's label.
        If nav item is not provided, a title must be provided when using this tag
        ( either via the title attribute or text within the body of this tag ).

        This attribute can be defined simultaneously with the body of this tag for
        accessibility. If using the body of this tag, consider using this
        attribute to define the title attribute of the head tag in this page.
        Otherwise, the body of this tag will be rendered in the head of the page.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url for the icon.  If not specified, a default icon will be used.</description>
    </attribute>
    <attribute>
      <name>iconAlt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Alt text for the icon specified with iconUrl.  If not specified, will default to the empty string.</description>
    </attribute>
    <attribute>
      <name>showTitleBar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Renders empty title bar with anchor for access key only, if set to false. This
        attribute can be used to hide page title bar while still suppressing auto
        generation of a default one by enclosing tags such as pageHeader or page tags.
      </description>
    </attribute>
    <attribute>
      <name>showIcon</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether an icon should be shown on the title bar.  Default: True
      </description>
    </attribute>
    <attribute>
      <name>iconOverlayUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url for an icon overlay, which will be displayed overtop the bottom corner of the primary icon.  Only used when
        showIcon is true.
      </description>
    </attribute>
    <attribute>
      <name>iconOverlayAlt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Alt text for the icon overlay specified with iconOverlayUrl.
      </description>
    </attribute>
    <attribute>
      <name>titleColor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Color style value to apply to the title.
      </description>
    </attribute>
  </tag>
  <tag bb:public="true">
    <name>pageTitleBarContextMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.PageTitleBarContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      Renders the page titlebar context menu.
      ]]>
    </description>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Handle of the root navigation item to grab the context menu items from.
        All children nav items of the specified item will be used to populate the context menu.
      </description>
    </attribute>
    <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to: Click to see options</description>
    </attribute>
    <attribute>
      <name>orderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Key from the <code>base/config/internal/contextMenuOrder.properties</code>
        file to load the context menu item order from.
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>breadcrumbBar</name>
    <tag-class>blackboard.servlet.tags.ngui.BreadcrumbBarTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders the Breadcrumb Bar on the page.
      ]]>
    </description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The database field used to uniquely identify the root nav item for the breadcrumb
        bar. The bar gets the appropriate nav item from the handler, then traverses the
        navigation tree to iteratively get the parents of the item.
      </description>
    </attribute>
    <attribute>
      <name>environment</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether we are viewing this navigation in the course, control panel, portal, etc.
        Acceptable values are:
        <![CDATA[<ul>]]>
        <![CDATA[<li>]]>
        PORTAL
        <![CDATA[<li>]]>
        COURSE
        <![CDATA[<li>]]>
        CTRL_PANEL
        <![CDATA[<li>]]>
        SYS_ADMIN
      </description>
    </attribute>
    <attribute>
      <name>isContent</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i>]]> This value is no longer used as of 9.0.
        Whether or not a breadrcumb should render the content hierarchy in the
        breadcrumb is now automatically determined based on whether the breadcrumb
        is rendered on a page containing a content context. Any value set for
        this property will be ignored.  If you are rendering a page in a content
        context and you do not want the hierarchy to render, use the suppressContentHierarchy
        property.
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The default target for breadcrumb items in this bar, defaults to none.
      </description>
    </attribute>
    <attribute>
      <name>breadcrumbs</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.List</type>
      <description>You can also pass in a List of Breadcrumb objects. </description>
    </attribute>
    <attribute>
      <name>suppressCourse</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Suppresses the current course from the view. Default: false. </description>
    </attribute>
    <attribute>
      <name>includeCourseMenuIcon</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          To display the courseMenuIcon in the breadcrumb. Default: false.
          Should to include the Javascript to activate onClick for id "courseMapButton"
      </description>
    </attribute>
    <attribute>
      <name>assumeHelpPresent</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          Defaults to 'false' in which case the page loading logic will iterate over the page to figure out if there is toggleable help.
          If you know that your page has toggleable help then set this to 'true' to avoid this page-load-time javascript overhead.
      </description>
    </attribute>
    <attribute>
      <name>inFlow</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          Defaults to 'false' in which case the breadcrumb is rendered in its usual location for the current page type.
          If true the breadcrumb bar will render in place in the page flow. Usually used when a breadcrumb like display
          is needed for example xxx > yyy > zzz.
          Current implementation limits to one inFlow breadcrumb (but it can coexist with the regular breadcrumb).
          InFlow breadcrumbs will render the 1st breadcrumb as a regular breadcrumb.
      </description>
    </attribute>
    <attribute>
      <name>skipLastContentCrumb</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1
          Defaults to 'false' in which case the breadcrumb will include crumbs up to and including the content item in current scope.
          If you are rendering a custom last-crumb for your content you can set this to true to avoid double-crumbs for the current page.
      </description>
    </attribute>
    <attribute>
      <name>skipCrossCourseMenu</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1SP8
          Defaults to 'false' in which case the breadcrumb will include a cross-course navigation menu when inside a course context.
          Set to 'true' if you do not want this menu shown (i.e. if you're rendering a child frameset with external content such as
          a URL set to open in the same window or a B2 that has not been updated to use the NG taglibs)
      </description>
    </attribute>
    <attribute>
      <name>suppressContentHierarchy</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        @Since 9.1SP10
        Only relevant when rendering within a content context.  If set to 'true'
        then any parents (folder hierarchy) of the current content item in context
        will not be rendered in the breadcrumb. Defaults to 'false'.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>breadcrumb</name>
    <tag-class>blackboard.servlet.tags.ngui.BreadcrumbTag</tag-class>
    <body-content>JSP</body-content>
    <description>Navigation item for the breadcrumb bar.</description>
    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The optional attribute setting the link for the element.</description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The target attribute for the links in this breadcrumb, defaults to none.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title for the crumb.  If this attribute is not specified, the body of the tag
        will be used as the title.
      </description>
    </attribute>
    <attribute>
      <name>escape</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.Boolean</type>
      <description>
        Enables output escaping of the breadcrumb title and href. Defaults to true.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>breadcrumbContextMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.BreadcrumbContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      Renders the breadcrumb context menu. Each crumb on the breadcrumb can have its own context menu.
      ]]>
    </description>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Handle of the root navigation item to grab the context menu items from.
        All children nav items of the specified item will be used to populate the context menu.
      </description>
    </attribute>
    <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to: Click to see options</description>
    </attribute>
    <attribute>
      <name>orderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Key from the <code>base/config/internal/contextMenuOrder.properties</code>
        file to load the context menu item order from.
        ]]>
      </description>
    </attribute>
  </tag>


  <tag bb:public="true">
    <name>viewToggle</name>
    <tag-class>blackboard.servlet.tags.ngui.ViewToggleTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      The View Toggle component allows a user to switch the way they are viewing
      the content in the applied area. There are two types of view toggles:
      <ul>
        <li>
          Global View Toggle - shows in the breadcrumb area, switches view for the entire page
        </li>
        <li>
          Tool-specific Toggle - shows in the page header area, switches view for the specific tool itself
        </li>
      </ul>

      <p>Example usage:</p>

      <code>
        &lt;bbNG:genericPage&gt;<br>
            <br>
            &nbsp;&nbsp;
            &lt;bbNG:pageHeader&gt;<br>

            &nbsp;&nbsp;&nbsp;&nbsp;
            &lt;bbNG:pageTitleBar title="Discussion Board"/&gt;<br>

            &nbsp;&nbsp;&nbsp;&nbsp;
            &lt;bbNG:breadcrumbBar &gt;<br>

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <b><i>&lt;!-- global view toggle (inside breadcrumbBar tag) --&gt;</i></b><br>

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <b>&lt;bbNG:viewToggle&gt;</b><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &lt;bbNG:viewToggleItem id="pageToggle1" title="Page Toggle 1" href="javascript:doThis();" isActive="${isPageToggle1Active}" /&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &lt;bbNG:viewToggleItem id="pageToggle2" title="Page Toggle 2" href="javascript:goHere()" isActive="${!isPageToggle1Active}"/&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <b>&lt;/bbNG:viewToggle&gt;</b><br>

            &nbsp;&nbsp;&nbsp;&nbsp;
            &lt;/bbNG:breadcrumbBar &gt;<br>
            <br>

            &nbsp;&nbsp;&nbsp;&nbsp;
            <b><i>&lt;!-- tool-specific toggle (inside pageHeader tag) --&gt;</i></b><br>

            &nbsp;&nbsp;&nbsp;&nbsp;
            <b>&lt;bbNG:viewToggle&gt;</b><br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &lt;bbNG:viewToggleItem id="toolToggle1" title="Tool Toggle 1" href="javascript:doSomething();" isActive="${isToolToggle1Active}" /&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            &lt;bbNG:viewToggleItem id="toolToggle2" title="Tool Toggle 2" href="javascript:doSomethingElse();" isActive="${!isToolToggle1Active}" /&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;
            <b>&lt;/bbNG:viewToggle&gt;</b><br>
            <br>
            &nbsp;&nbsp;
            &lt;/bbNG:pageHeader&gt;<br>
            <br>
            <br>
            &nbsp;&nbsp;
            &lt;!-- start body --&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp;
            ...<br>
            &nbsp;&nbsp;
            &lt;!-- end body --&gt;<br>
            <br>
        &lt;/bbNG:genericPage&gt;
      </code>

      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        @Since 9.1 SP12
        An optional label for this collection of toggle links. If not specified, this defaults to the value of resource
        key 'viewtoggle.accessibility.heading' from bundle ng_tags.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>viewToggleItem</name>
    <tag-class>blackboard.servlet.tags.ngui.ViewToggleItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>A link in the view toggle button bar</description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title of the link.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The css id of the link.
      </description>
    </attribute>
    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The location that the link will go to.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The onClick javascript handler for the link.
      </description>
    </attribute>
    <attribute>
      <name>isActive</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the item is in the "active" state. Default is false.
      </description>
    </attribute>
    <attribute>
      <name>isHelpToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the item is the one with the "toggle page help" icon.  Default is false.

        There must be maximum one view toggle item with this set to true.  It will always be
        the last view toggle item shown.
      </description>
    </attribute>
    <attribute>
      <name>hasEndBorder</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to add a border at the end of the item.
      </description>
    </attribute>
    <attribute>
      <name>textFlow</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Direction of text flow.  Value is either "natural" or "inverse" to account for RTL.  For example,
        if locale is left-to-right, "natural" would translate to "left" and "inverse" to "right".
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>editModeToggle</name>
    <tag-class>blackboard.servlet.tags.ngui.EditModeToggleTag</tag-class>
    <body-content>JSP</body-content>
    <description>A widget that allows toggling between read and edit modes</description>
    <attribute>
      <name>editHref</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The location that the link will go to in edit mode.
      </description>
    </attribute>
    <attribute>
      <name>readHref</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The location that the link will go to in read mode.
      </description>
    </attribute>
    <attribute>
      <name>altEntitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An alternate entitlement check that will be checked for rendering this tag.
      </description>
    </attribute>
    <attribute>
      <name>showToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An alternate condition check that will be checked for rendering this tag.it can be true/false/null
        The default value is null, it means this value is not set, and can be ignore.
        True means always show this toggle no matter other condition and/or entitlement check result
        False means do not show this toggle no matter other condition and/or entitlement check result
      </description>
    </attribute>
  </tag>

  <tag bb:public="false">
    <name>onOffToggle</name>
    <tag-class>blackboard.servlet.tags.ngui.OnOffToggleTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      <p>
      Renders an on or off toggle.
      </p><p>
      The on/off toggle has a visible toggle link with an id of "toggle_link_$id" and an offscreen
      checkbox with the id that is provided in the id attribute. The actual true/false value of the
      toggle is stored in a hidden input field with an id of "hidden_$id" and name being the same as
      the id attribute.
      </p><p>
      Ensure that you create a <code>&lt;label for="$id"&gt;...&lt;/label&gt;</code> so that the checkbox
      has a label for accessibility purposes.
      </p><p>
      Example usage: <br><br>
      <span>Display an on/off toggle initially in the On-state</span><br>
      <code>&lt;bbNG:onOffToggle id="setting1" isOn="true" onTitle="Toggle setting1 on." offTitle="Toggle setting1 off" /&gt;</code> <br><br>
      <span>Display an on/off toggle initially in the Off-state</span><br>
      <code>&lt;bbNG:onOffToggle id="setting2" isOn="false" onTitle="Toggle setting2 on." offTitle="Toggle setting2 off" /&gt;</code> <br><br>
      <span>Display-only version of the on/off toggle in the On-state.  This does not render any input element.</span><br>
      <code>&lt;bbNG:onOffToggle id="setting3" isOn="true" displayOnly="true" onTitle="Toggle setting3 is on in display only." /&gt;</code> <br><br>
      <span>Display-only version of the on/off toggle in the Off-state.  This does not render any input element.</span><br>
      <code>&lt;bbNG:onOffToggle id="setting4" isOn="false" displayOnly="true" offTitle="Toggle setting4 is off in display only." /&gt;</code> <br>
      </p>
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element.  This corresponds to the id attribute of
        the offscreen checkbox, and the name of the hidden input field.
        This must be unique for each toggle in a given page.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description><![CDATA[
        Boolean setting to show the display-only view of this element.
        If this element is display-only, only the text value of On/Off will be displayed,
        the toggle will not be outputted. If this element is not display-only, the toggle
        will be displayed and is allowed to be flipped On/Off.  The default is false.]]>
      </description>
    </attribute>
    <attribute>
      <name>isOn</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description><![CDATA[Whether this toggle is on (true) or off (false).]]></description>
    </attribute>
    <attribute>
      <name>onTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The text that will be displayed when the user hovers over the toggle and is ON.</description>
    </attribute>
    <attribute>
      <name>offTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The text that will be displayed when the user hovers over the toggle and is OFF.</description>
    </attribute>
    <attribute>
      <name>onToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description><![CDATA[
        The name of the javascript callback function to call after the toggle state changes.

        <p>
        To get the on/off state of the toggle, there is a utility function that takes the toggle's
        id and returns a boolean.  <br><br>

        <code>
          widget.OnOffToggle.getToggleState( 'setting1' );
        </code>
        </p>
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>contextMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.ContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      This tag creates a context menu. The context menu must have at least 1 item in it.
      Context menu items may be provided in several different ways and one may specify
      the order in which the items should appear in the UI.
      <p>
      <b>Ordering context menu items</b>
      <p>
      There are 2 ways to give ordering to context menu items:
      <ol>
        <li>
          Give the order key from the context menu properties file
          to the <code>orderKey</code> attribute.
        </li>
        <li>Give the order string to the <code>order</code> attribute.</li>
      </ol>
      <p>
      There are currently 2 ways context menu items are added to the page.
      Here is how to get the order string for each type of item:
      <ol>
        <li>
          <i>Dynamically generated nav items for context menu items</i> -
          order is referenced by the internal handle of the nav item
        </li>
        <li>
          <i>Manually specified context menu items in jsp via <code>contextMenuItem</code> tags</i> -
          provide the <code>id</code> attribute for <code>contextMenuItem</code> tag OR
          reference the default id string assigned to each context menu item (see TLD for
          <code>contextMenuItem</code> tag for more information)
        </li>
      </ol>
      <p>
      <b>Additional notes</b>
      <p>
      <ul>
        <li>
          Ids, if provided, for context menu items must be unique within each context menu.
        </li>
        <li>
          If <code>orderKey</code> does not exist in the properties file, an error
          will be logged to the default log file.
        </li>
        <li>
          The context menu must have at least 1 item in it if not dynamically generated.
        </li>
      </ul>
      <p>
      <b>Example usage of context menu item ordering:</b>
      <p>
      <code>
      &lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;<br>
      &lt;bbNG:contextMenu dynamic="true"
                               menuGeneratorURL="/webapps/blackboard/execute/modifyUserNavItemBasedContextMenuGenerator"
                               navItem="list_users"
                               contextParameters="xx"
                               <b>order="user_properties,password_modify,${ContextMenuTag['SEPARATOR']},list_courses_by_user,manual_item1,
                                       ${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}1"</b>&gt;<br>
      &nbsp;&nbsp;&lt;bbNG:contextMenuItem title="Manual item1" url="xx" <b>id="manual_item1"</b>/&gt;<br>
      &nbsp;&nbsp;&lt;bbNG:contextMenuItem title="Manual item2" url="xx"/&gt;<br>
      &lt;/bbNG:contextMenu&gt;<br>
      </code>
      <p>
      The code will generate:
      <p>
      <div style="border-style: solid; width: 25%;border-width: thin;padding: 5px">
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          User Properties<br/>
          Change Password<br/>
        </div>
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          Course Enrollments<br/>
          Manual item1<br/>
          Manual item2<br/>
        </div>
        <div style="padding: 5px">
          [<i>all other manual context menu items not referenced in order string</i>]<br/>
          [<i>all other dynamically loaded context menu items not referenced in order string</i>]<br/>
        </div>
      </div>
      ]]>
    </description>
    <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to: Click to see options</description>
    </attribute>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>orderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Key from the <code>base/config/internal/contextMenuOrder.properties</code>
        file to load the context menu item order from.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>order</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Manually specified order of context menu items. Use constants in
        <code>ContextMenuTag</code> class for the separator and default item id strings.
        <p>
        <b>Example:</b>
        <p>
        &lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;
        <br>
        &lt;bbNG:listContextMenu order="sample_item1,${ContextMenuTag['SEPARATOR']},${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}"...&gt;
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>beforeShowFunc</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Name of the a JavaScript function to be called before showing menu.
        This allows manipulating the menuitems before the menu is rendered.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>forceMenuRefresh</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         <![CDATA[
            True: Force the contextual menu reload when user clicks the contextual menu button.
            False: Only load once when user clicks the contextual menu for the first time.
         ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>contextMenuItem</name>
    <tag-class>blackboard.servlet.tags.ngui.ContextMenuItemTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      This tag creates an item in a context menu.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the item.</description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL that the item links to.</description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Id for the item. Default id string is
        <code>ContextMenuTag.DEFAULT_ITEM_ID_PREFIX + n</code>, where "n" is 1,2,3,...
        (based on the order this tag is specified in a context menu tag).
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Tool Tip text for the item.</description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The onClick javascript handler for the link.
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The target frame/window that the link will open in.  Default is no target (the current window)
      </description>
    </attribute>
    <attribute>
      <name>overwriteNavItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Navigation item to be overwritten by this context menu item, when a menu is
        dynamically generated based on navigation items. Navigation item whose internal handle
        matches to this attribute will be excluded in dynamic menu generation and
        this manual menu item will replace it. This attribute can be used to overwrite
        label, url or other attributes of an auto-generated nav item based menu item.
      </description>
    </attribute>
    <attribute>
      <name>showMenuItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicate whether to show this Menu Item. Show by default.
      </description>
    </attribute>
    <attribute>
      <name>isLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicate whether this Menu Item is nonclickable. Clickable by default.
      </description>
    </attribute>
  </tag>

  <!-- Action Menu Tags -->

  <tag bb:public="true">
    <name>actionControlBar</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionControlBarTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[Scaffolding tag for actionMenu, actionButton and actionPanelButton items.
      There must be at least one action-type item in the action control bar.
      Action menu items are aligned to the natural left and action panel button
      items are aligned to the natural right. Action buttons are generated to
      the natural left after action panel buttons.
      <p>
      Action control bar delegates its rendering to delegate class implementing ActionControlBarRendererDelegate. As of
      9.1.6, known delegates are page tags and tabViewTab tag. Then delegates render the bar at locations appropriate
      to them usually top of their content pane using slightly different styles designed to blend better with their overall
      look and styles.
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id attribute of rendered HTML element.
        If not specified, defaults to "actionbar".
      </description>
    </attribute>
    <attribute>
      <name>showWhenEmpty</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to draw the action bar when there are no items in it.  This is useful for when items are dynamically added
        to the action bar (such as with drag and drop accessible repositioning).

        Default: false
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      Action menu is the container for a corresponding menu item list.
      This tag is only for use within an action control bar tag.
      An action menu must have at least one action menu item.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Action menu title. The menu title should be localized text.</description>
    </attribute>
    <attribute>
      <name>menuItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        List of menu items (blackboard.servlet.data.ngui.ActionMenuItem) with which to
        populate the action menu.
      </description>
    </attribute>
    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating the type of the action menu. If true, the
        menu is a primary button, otherwise, it is a secondary button.
        Primary menus will show up in the order they are specified in
        "natural left order" after action menus. Secondary menus will show up
        in "natural right order", but to the left of any action panel buttons that are
        specified. The default is true, meaning that the menu is a primary menu.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>pageTitleBarActionMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.PageTitleBarActionMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      Tag for rendering an action menu in the page title bar. This tag must be placed
      inside of the pageTitleBar tag as it delegates its contents to that tag for
      rendering.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title to display in the action menu.</description>
    </attribute>
    <attribute>
      <name>heading</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Offscreen heading describing the action menu.</description>
    </attribute>
    <attribute>
      <name>tooltip</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Tooltip to display in the action menu.</description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url of the icon to be displayed in the action menu.</description>
    </attribute>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Collection of ContextMenuItem objects to render.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionMenuItem</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionMenuItemTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Action menu items are items within an action menu.
      This tag is only for use within an action menu tag.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Action menu item title. The menu item title should be localized text.
      </description>
    </attribute>
    <attribute>
      <name>href</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url for the menu item. The URL where the item points.</description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML link attribute to control which window the URL link is opened in.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionButton</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionButtonTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Action buttons in the action control bar.
      This tag is only for use within an action control bar tag.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Action button title. The title should be localized text. If an icon is specified, the title will be used as ALT</description>
    </attribute>
     <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Action button id. unique value to identify this element</description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        URL of the icon to be displayed. If specified, the button will be the icon only, title being used for the alt.
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The URL where the button points. </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        HTML link attribute to control which window the URL link is opened in.
      </description>
    </attribute>
    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating the type of the action button. If true, the
        button is a primary button, otherwise, it is a secondary button.
        Primary buttons will show up in the order they are specified in
        "natural left order" after action menus. Secondary buttons will show up
        in "natural right order", but to the left of any action panel buttons that are
        specified. The default is false, meaning that the button is a secondary button.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Javascript to be executed when the anchor is clicked.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionButtonCoursePicker</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionButtonCoursePickerTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Coruse Picker in the action control bar.
      This tag is only for use within an action control bar tag.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Action button title. The title should be localized text. If an icon is specified, the title will be used as ALT</description>
    </attribute>
     <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Action button id. unique value to identify this element</description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        URL of the icon to be displayed. If specified, the button will be the icon only, title being used for the alt.
      </description>
    </attribute>
    <attribute>
      <name>formName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The String associated with the form name attribute in the HTML,for example
        <![CDATA[<form name="theForm">]]>
        Used to reference form input elements via Javascript
      </description>
    </attribute>
    <attribute>
      <name>tfName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The form element name for the textfield should be defined in the JSP</description>
    </attribute>
    <attribute>
      <name>tfValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The value for the textfield (optional, if not specified will be pulled off the
        request)
      </description>
    </attribute>
    <attribute>
      <name>userId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        _x_y version of the userId that is specified when the selected courseId should
        only be one for which the specified user has course admin rights. If no userId is
        specified, all courses are allowed and will show up when browsing
      </description>
    </attribute>
    <attribute>
      <name>courseType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Can be either "course" or "org". The default is "course". This attribute switches
        the label appropriately and changes searching between course and organization
        service level
      </description>
    </attribute>
    <attribute>
      <name>selectMultiple</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Allows the user to select multiple courses</description>
    </attribute>
    <attribute>
      <name>submitUrl</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The URL for submit action.</description>
    </attribute>
    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating the type of the action button. If true, the
        button is a primary button, otherwise, it is a secondary button.
        Primary buttons will show up in the order they are specified in
        "natural left order" after action menus. Secondary buttons will show up
        in "natural right order", but to the left of any action panel buttons that are
        specified. The default is false, meaning that the button is a secondary button.
      </description>
    </attribute>
    <attribute>
      <name>isDomainInUse</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Boolean that controls use of domains in course search. Default value is false.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionMultiColumnFlyout</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionMultiColumnFlyoutTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Outputs a multi-column flyout menu on the Action Menu Control bar.
      Must be enclosed by a SimpleActionControlBarComponentTag.
    </description>
    <attribute>
      <name>actionButtonLabel</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized action button label
      </description>
    </attribute>
    <attribute>
      <name>menuId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique id of the multi column flyout menu
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionMultiColumn</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionMultiColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Adds a column to the ActionMultiColumn Flyout widget.
    </description>
    <attribute>
      <name>heading</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized column heading value
      </description>
    </attribute>
    <attribute>
      <name>accessMenuItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        When specified, the column will be hidden by default and the access-menu-item will be added
        to the previous column within the columnflyout.
      </description>
    </attribute>
    <attribute>
      <name>autoSplitMaxColumns</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Max number of columns to create (Only applicable when accessMenuItem is defined).
      </description>
    </attribute>
    <attribute>
      <name>autoSplitMinPerColumn</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Minimum items per column to create (Only applicable when accessMenuItem is defined).
      </description>
    </attribute>
    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Column links represented by a list of ActionMenuItems
      </description>
    </attribute>
    <attribute>
      <name>itemsFromMap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Column links represented by a map of ActionMenuItems
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionMultiColumnSection</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionMultiColumnSectionTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Column data in the MultiColumn Flyout can be organized into sections.
      This tag allow Column links to be divided into a section.  A section
      in a column is separated by a vertical line.
      This tag must be enclosed by the ActionMultiColumnTag.
    </description>
    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Section column links represented by a list of ActionMenuItems
      </description>
    </attribute>
    <attribute>
      <name>itemsFromMap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Section column links represented by a map of ActionMenuItems
      </description>
    </attribute>
    <attribute>
      <name>heading</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional heading to use to separate this section instead of a line
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>actionPanelButton</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionPanelButtonTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Action button in the action control bar that displays a panel with additional
      visual elements when accessed. This tag is only for use within an action control
      bar tag. The body of this tag cannot be empty and must contain a panel tag or HTML
      to be displayed in the action panel.
      <p>
      Use the <code>alwaysOpen</code> attribute if the action panel should always show
      and no button should be rendered to toggle the panel.
      ]]>
    </description>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The type of the action panel button to help determine the title of the button.
        The type will take priority in determining the title of this button if both
        attributes are provided. Allowed types are ALIGNMENTS, DISCOVER, FILTER, OTHER, and
        SEARCH. If type is OTHER, then the title attribute must be provided.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Action panel button title. The title should be localized text.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Optional id to identify the button as (the panel div id will be <code>panel$id</code>).
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>alwaysOpen</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Setting for whether the action panel should always show, thus
        no button should be rendered to toggle the panel.
        Default is false.
      </description>
    </attribute>
    <attribute>
      <name>defaultOpen</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Setting for whether the action panel should open on default.
        Default is false.
      </description>
    </attribute>
    <attribute>
      <name>panelDivClassOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional override of the class attribute value of the panel div element.
        By default, class values are provided.
      </description>
    </attribute>
    <attribute>
      <name>persistId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        User data ID used to persist the open state of the panel. If empty or undefined the open state will be defaultOpen.
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>discoverContentPanel</name>
    <tag-class>blackboard.servlet.tags.ngui.actioncontrol.ActionDiscoverContentPanelTag</tag-class>
    <body-content>empty</body-content>
    <description>
      The discover content panel tag allows content artifact selection via either an
      Artifact type select box or directly enables the action panel button to be linked
      to open a Artifact picker pop up. This tag is only for use within an action
      panel button tag.
    </description>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Type of Artifacts to allow user to select from. Valid values are
        "discussion_thread", "discussion_forum", "gradebook_item" and "all".
        The default value is "all", where an Artifact type select box will be
        displayed within the action panel when the action panel button is accessed.
        Upon selecting an artifact, the user will be sent to the add page for that
        particular type with the VTBE text pre-filled with the text of the
        selected artifact.
      </description>
    </attribute>
    <attribute>
      <name>addPageQueryString</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query string parameters needed for the add page of the learning object
        specified in the type attribute.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>simpleActionControlBarComponent</name>
    <tag-class>blackboard.servlet.tags.ngui.SimpleActionControlBarComponentTag</tag-class>
    <body-content>JSP</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Simple wrapper to render its body content in a way similar to an actionPanelButton
      on actionControlBar does. Unlike actionPanelButton that only renders a button
      on the bar to control the content placed outside of the bar, the entire content
      of this tag is rendered as is on the bar with a just thin wrapper around it.
      Therefore it can be used to insert simple one off controls or input html,
      such as navigation links or select element.
      Tag should be used discretely to avoid rendering unreasonably big items on
      actionControlBar.
    </description>
    <attribute>
      <name>renderFirst</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to render this component at the front on the actionControlBar. If multiple
        simpleActionControlBarComponents exist with this flag set to true, they will render in
        the order they were defined in the body of actionControlBar.
      </description>
    </attribute>
  </tag>

  <!-- TabView tabs tags -->

  <tag bb:public="true">
    <name>tabView</name>
    <tag-class>blackboard.servlet.tags.ngui.TabViewTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      Container for TabViewTab's
    </description>
    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The style to use for the tab view container.</description>
    </attribute>
    <attribute>
      <name>onTabChanged</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Javascript handler for tab change, parameter passed are index and (if present) tabId . example: onTabChanged='initTabContent( tabId );'</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>tabViewTab</name>
    <tag-class>blackboard.servlet.tags.ngui.TabViewTabTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[A TabViewTab inside the TabView container. These tabs are client-side only. Clicking on them 'flips'
      to another tab in the DOM. The tabs will be rendered in the order they are defined. If no active
      tab is defined, the first tab in the set will be the active tab.
      <p>
      TabViewTab implements the interface to be a delegate of action control bar rendering. Therefore, if actionControlBar
      is placed in tabViewTab body, it will be rendered right below tab links when the tab is selected.]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the tab.</description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>DOM id for the tab</description>
    </attribute>
    <attribute>
      <name>active</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      true if this tab is the active tab. If no active tab is defined, the first tab in the set will
      be the active tab.
      </description>
    </attribute>
  </tag>

  <!-- Accordion tags -->

  <tag bb:public="true">
    <name>accordion</name>
    <tag-class>blackboard.servlet.tags.ngui.AccordionTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      Accordion container for accordionToggles and accordionContents
    </description>
    <attribute>
      <name>expandMode</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>How many toggles can be expanded at once: single(default) or multiple.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>accordionToggle</name>
    <tag-class>blackboard.servlet.tags.ngui.AccordionToggleTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[An accordionToggle inside an accordion container. These accordionToggles are client-side only. Clicking on them 'toggles'
      the visibility of their associated accordionContent in the DOM. The accordionToggles will be rendered in the order they are defined.
      <p>
      HTML in the body of this tag is used for toggle text/images etc.
      This tag MUST contain one accordionContent tag. ]]>
    </description>
    <attribute>
      <name>expanded</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this toggle's content should be initially expanded(visible). Default is false.</description>
    </attribute>
    <attribute>
      <name>dynamicLoadUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to dynamically load this toggle's content when expanded the first time.</description>
    </attribute>
    <attribute>
      <name>customClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A custom css class to be applied to this toggle's div (default: none)</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>accordionContent</name>
    <tag-class>blackboard.servlet.tags.ngui.AccordionContentTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[An accordionContent inside an accordion toggle. These accordionContents are client-side only.
      <p>
      HTML in the body of this tag is used for the content.
      This tag MUST be enclosed by an accordionContent tag. ]]>
    </description>
  </tag>

  <!-- Page tabs tags -->

  <tag bb:public="true">
    <name>pageTabs</name>
    <tag-class>blackboard.servlet.tags.ngui.PageTabsTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Container for secondary tabs at the top of a portal page.
    </description>
    <attribute>
      <name>renderInPlace</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If set to true, tabs are rendered where they are placed instead of at pre-determined location by container page.
        See pageTab for more details on tab locations on delegate page types. No effect if container page is not a
        renderer delegate and tabs are always rendered where they are placed. Delegate page tags are generic page,
        learning system page and portal page. Default is false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>pageTab</name>
    <tag-class>blackboard.servlet.tags.ngui.PageTabTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
    <![CDATA[
    Page tab container that renders the following:
    <ul>
    <li> If the page is a portal page, secondary tabs at the top</li>
    <li> If the page is a generic page or a learning system page with the course menu hidden, tabs at the top</li>
    </ul>
    ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the tab.</description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the tab links to</description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>CSS id for the tab</description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Javascript that will be run when the tab link is clicked.</description>
    </attribute>
    <attribute>
      <name>active</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this tab is the active one (default false).</description>
    </attribute>
    <attribute>
      <name>personal</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this tab is a personal tab (default false).</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>pageHeaderTabs</name>
    <tag-class>blackboard.servlet.tags.ngui.PageHeaderTabsTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[This is a Container for a tabs in the page header.]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>pageHeaderTab</name>
    <tag-class>blackboard.servlet.tags.ngui.PageHeaderTabTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      A page tab in the page header of the page.  Any HTML in the body of this tag
      will be appended after the tab link (this is so that context menus, etc can be added)
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the tab.</description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the tab links to</description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Javascript that will be run when the tab link is clicked.</description>
    </attribute>
    <attribute>
      <name>active</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this tab is the active one (default false).</description>
    </attribute>
  </tag>
  <!-- Module layout tags -->

  <tag bb:public="true">
    <name>moduleLayout</name>
    <tag-class>blackboard.servlet.tags.ngui.module.ModuleLayoutTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Container tag that encloses a page consisting of columns of "modules".
      Can support drag and drop by specifying the "reorderable", "reorderingUrl",
      and (optionally) "contextParameters" arguments.

      The layout currently only works with 2 or 3 columns (CSS restriction).
    </description>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module layout is reorderable (default false).</description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The url to which changes in the order of the modules will be
      persisted to (using Ajax).</description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>displayControllerUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The url to which changes module display (e.g. max/min/close) will be
       (using Ajax).</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Query string style argument for passing additional parameters to
      the reordering/displaycontrol server-side code in order to give some contextual
      information.</description>
    </attribute>
    <attribute>
      <name>numColumns</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The number of columns in the layout</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>moduleColumn</name>
    <tag-class>blackboard.servlet.tags.ngui.module.ModuleColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Represents a column in a modular layout.
    </description>
  </tag>

  <tag bb:public="true">
    <name>module</name>
    <tag-class>blackboard.servlet.tags.ngui.module.ModuleTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Displays a "module" in a modular layout.  The module has a title, and some options as to
      whether the module has a settings page, can be minimized, or can be removed.

      The body of this tag will be placed into the body of the module.
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Id that uniquely identifies this module on the server-side (used for repositioning).</description>
    </attribute>
    <attribute>
      <name>extId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Id that identifies the external reference type of this module. Whatever value you pass here will be placed in an html comment inside the div for this module</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The title of the module</description>
    </attribute>
    <attribute>
      <name>suppressTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether the title (and modify buttons) should be suppressed. Default: false</description>
    </attribute>
    <attribute>
      <name>settingsUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the "settings" link will go to.  Required if editable is set to true.</description>
    </attribute>
    <attribute>
      <name>editable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module has a "settings" page. Default: false.</description>
    </attribute>
    <attribute>
      <name>collapsible</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module can be minimized.  Default: true.</description>
    </attribute>
    <attribute>
      <name>collapsed</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module is initially minimized.  Default: false.</description>
    </attribute>
    <attribute>
      <name>removable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module can be removed.  Default: true.</description>
    </attribute>
    <attribute>
      <name>excludeFromReorder</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module should be excluded from reordering when enclosing ModuleLayout is reorderable. Default: false
      </description>
    </attribute>
    <attribute>
      <name>detachable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this module can be detached (opened in a new window).  Default: false.</description>
    </attribute>
    <attribute>
      <name>detachUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the detach popup contents will be set to.  Required if detachable is set to true.</description>
    </attribute>
  </tag>

  <!-- Search Bar Tags -->
  <tag bb:public="true">
    <name>searchBar</name>
    <tag-class>blackboard.servlet.tags.SearchBarTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      This tag provides a simple search bar with a dropdown of attributes to search on and a
      text field for doing a contains search.  Include SearchOptionsTag in the Tag body
      to set the options in the drop down.
    </description>
    <attribute>
      <name>searchLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The search bar label to display.  If not specified, defaults to action.search
        bundle key in common.properties, which in en_US is "Search".
      </description>
    </attribute>
    <attribute>
      <name>selectName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the name of the search by select. Default is "searchKey".
      </description>
    </attribute>
    <attribute>
      <name>selectLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the label of the search by select. Default is "attribute".
      </description>
    </attribute>
    <attribute>
      <name>selectValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the value of the search by select.
      </description>
    </attribute>
    <attribute>
      <name>textfieldName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the name of the textfield input.  Default is "searchValue".
      </description>
    </attribute>
    <attribute>
      <name>textfieldValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the value of the textfield input.
      </description>
    </attribute>
    <attribute>
      <name>operatorName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the name of the operator select.  Default is "searchOp".
      </description>
    </attribute>
        <attribute>
      <name>operatorLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the label of the operator select.  Default is "filter".
      </description>
    </attribute>
    <attribute>
      <name>operatorValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the value of the operator select.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The action to be hit when the "GO" button is clicked.  caution: it always submit the surrounding form no matter specified or not.
      </description>
    </attribute>
    <attribute>
      <name>filterBoxStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If anything other than "searchbar" is passed, the filter box will not be wrapped with a div at all.
      </description>
    </attribute>
    <attribute>
      <name>renderBodyContentInLine</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        By default, any body content defined within the search bar tag (that is
        non-search tag related) will be rendered below the output of the tag.
        This rendering can be problematic and stylistically may differ from the
        requirements.  Setting this value to true, will instead render this body
        content in line with (same vertical position) as the output of the tag.
      </description>
    </attribute>
 </tag>

 <tag>
    <name>attrListSearchBar</name>
    <tag-class>blackboard.servlet.tags.AttrListSearchBarTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      This tag provides a simple search bar with a dropdown of attributes to search on and a
      text field for doing a contains search.
    </description>
    <attribute>
      <name>searchLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The search bar label to display.  If not specified, defaults to action.search
        bundle key in common.properties, which in en_US is "Search".
      </description>
    </attribute>
    <attribute>
      <name>model</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        AttributeListModel
      </description>
    </attribute>
     <attribute>
      <name>allowedRefColumns</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        List of attribute names of String reference columns that are allowed to
        appear in the search key drop down.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The action to be hit when the "GO" button is clicked.  caution: it always submit the surrounding form no matter specified or not.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
     <name>searchOption</name>
    <tag-class>blackboard.servlet.tags.SearchOptionTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      This tag is always used within an enclosing searchBar tag and it defines a selection
      in the drop down of the search bar.
    </description>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Label of the option
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        the value of the option
      </description>
    </attribute>
  </tag>


  <!-- Data Collection Tags -->

  <tag bb:public="true">
    <name>form</name>
    <tag-class>blackboard.servlet.tags.ngui.FormTag</tag-class>
    <body-content>JSP</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      <![CDATA[
        Wrapper for form elements.
        The tag should also accept dynamic attributes that will be directly passed to the form html element that is generated.
      ]]>
    </description>
    <attribute>
      <name>isSecure</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Indicates that cross-site request forgery countermeasures should be enabled for the current form. This will add
        a one-time-use attribute to the user's session and include the same attribute in the HTML form.  The form must
        be submitted using a POST.  When the form is being processed, the one-time-use attribute can be validated using
        <code>NonceUtil.validate</code>.  Defaults to true if <code>nonceId</code> is set, false otherwise.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>nonceId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          Optional. A unique identifier for the form used for cross-site request forgery countermeasures.
          Implies <code>isSecure=true</code>.
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>dataCollection</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.DataCollectionTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Scaffolding tag for a data collection page.
      A data collection page must contain at least one step and step submit.
      Generally, only steps and step submit tags are used inside a data collection
      tag. Other body content (eg. hidden form input fields) is rendered below
      the steps and step submit.
    </description>
    <attribute>
      <name>markUnsavedChanges</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to visually indicate data elements which have changed from their default value. Default false.
      </description>
    </attribute>
    <attribute>
      <name>showSubmitButtons</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether or not the step submit/cancel buttons should be shown. Default true.
        If it is false it will not render the top/bottom cancel/submit buttons on the data collection page.
      </description>
    </attribute>
    <attribute>
      <name>hasRequiredFields</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the data collection should show the information about required fields.  Generally, this will
        automatically be set to the correct value by the various tags used inside the data collection, but
        sometimes it must be forced.  For those occasions, use this attribute.
      </description>
    </attribute>
    <attribute>
      <name>overrideFocusSelector</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: null (will set focus to the first actionable item inside div.stepcontent on the page)
        If specified, this selector will be used as the first selector when looking for an item to set the focus to.  
        Note that it is up to you to make sure that your selector matches an element with a tabindex so that the browser can focus on it properly and the user can tab away from it.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>stepGroup</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.StepGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A logical group of steps on a data collection page.  A dataCollection with more
      than one step group will cause tabs to appear at the top of the dataCollection
      which will allow the user two switch between the different areas of the
      page.

      If steps tags are located outside of a step group, they will all be added to the
      end of the first step group.  If there is only one step group, no tabs will be
      shown.  If no group is set as active, the first group will be active.  If more than
      one group is set as active, the one that comes first will be the active one.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized title for the step group.
      </description>
    </attribute>
    <attribute>
      <name>active</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this group is the active one. Default false.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>step</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.StepTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Steps are components within a data collection page that contains
      step instructions and data collection fields (data elements) used to input data
      about an entity in a system.
      <p>
      <B>Manipulating the visibility of steps via javascript:</B>
      <p>
      If you wish to show or hide steps via javascript, simply provide the <code>id</code>
      and call the following convenience method: <code>page.steps.hideShowAndRenumber(action, stepIdArr)</code>.
      The method can hide or show an array of steps given the string ids.
      See <code>page.js</code> for full method documentation.
      <p>
      Example:
      <p>
      <code>
        &lt;script&gt;
        <br>
          ...
          <br>
          // hide the steps "infoStep","taskStatusStep", and "linkedContentStep" on the page <BR>
          page.steps.hideShowAndRenumber(page.steps.HIDE, ["infoStep","taskStatusStep","linkedContentStep"] );
          <br>
          ...
          <br>
          // show the step "infoStep" on the page <BR>
          page.steps.hideShowAndRenumber(page.steps.SHOW, ["infoStep"] );
          <br>
         ...
         <br>
       &lt;/script&gt;
      </code>
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Id used for the top containing element produced by this tag.
        The default is "step[step_number]", for example, "step1".
        If provided, it must be unique across all elements on the page.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The localized text title of the step.</description>
    </attribute>
    <attribute>
      <name>instructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The localized text displayed as the step instructions.</description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The type of step that should be rendered. Currently, a step can be of type
        "data_collection" or "information". Information steps are visually presented
        with a shaded background. This value must be the string representation
        of one of the StepTag.Type enum values.
        The default value: data_collection (Type.data_collection).
      </description>
    </attribute>
    <attribute>
      <name>oppositeSideHtml</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A block of html to render on the right hand side of the title line for this step.  Note that it will
        be placed at the end of the step as far as tab-order goes, even though it will be positioned in the title.
      </description>
    </attribute>
    <attribute>
      <name>hideNumber</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If hideNumber="true" then the step number will not be displayed
      </description>
    </attribute>
     <attribute>
      <name>optionalClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional class for the step div.<br>
        For example: &lt;bbNG:step title="title" optionalClass="tableOverflowControl"&gt; <br>
        will render "&lt;div id="step1" class="tableOverflowControl"&gt;
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>noFieldSet</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If noFieldSet="true" then the step 'field set' block will not be rendered
      </description>
    </attribute>
    <attribute>
      <name>enableExpandCollapse</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Makes the step collapsable
        Default : False
      </description>
    </attribute>
    <attribute>
      <name>defaultStateExpanded</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        if enableExpandCollapse = true then this defines if the step should be expanded or collapsed by default on first rendering on the page
        Default : True
      </description>
    </attribute>
    <attribute>
      <name>subStep</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        if substep = true, it must be part of the another step.
        Default : false
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>stepInstructions</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.StepInstructionsTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Instructions that need to appear between fields in a data collection step may
      be generated via this step instructions tag.
      Normally, step instructions should appear right below a step (by specifying the
      <code>instructions</code> attribute on the step tag), but this tag may be used
      for unusual cases. This tag may only be used within a step tag.
      ]]>
    </description>
    <attribute>
      <name>text</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text to be displayed as step instructions. The text should be localized text.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>stepSubtitle</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.StepSubtitleTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Allows for generation of a subtitle which appears between fields in a data collection
      step.  This tag may only be used immediately below a step tag.
      ]]>
    </description>
    <attribute>
      <name>text</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text to be displayed as step instructions. The text should be localized text.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>stepSubmit</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.StepSubmitTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      The step submit allows a user to submit data to a system or to cancel
      that action. When used without any attributes or body, it will generate
      a "Cancel" button as a secondary button and a "Submit" button as a primary button.
      Optionally, one can specify step submit buttons to be generated.
    </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized title of the step. If not provided, it will default to
        the label of the primary step submit button.
      </description>
    </attribute>
    <attribute>
      <name>instructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text displayed as the step instructions.
        The default is no instructions will be displayed.
      </description>
    </attribute>
    <attribute>
      <name>cancelUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The URL to recall the page if the user cancels.
        The default is the parent nav item's URL (if set and available)
        or the javascript back function.
        Only one of cancelUrl or cancelOnClick should be specified
      </description>
    </attribute>
    <attribute>
      <name>cancelOnClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The onClick value to recall the page if the user cancels.
        The default is the parent nav item's URL (if set and available)
        or the javascript back function.
        Only one of cancelUrl or cancelOnClick should be specified
      </description>
    </attribute>
    <attribute>
      <name>showCancelButton</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean indicating whether to show a "Cancel" button.
        The default is true when no step submit buttons are specified,
        or, when step submit buttons are specified AND the cancelUrl is
        specified. Otherwise it will default to false.
      </description>
    </attribute>
    <attribute>
      <name>hideNumber</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If hideNumber="true" then the step number will not be displayed
      </description>
    </attribute>
    <attribute>
      <name>location</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The location to render the submit buttons:
        top = only render the top buttons
        bottom = only render the bottom buttons
        both = render both top and bottom buttons.  If not specified then this (both) is the default.
        Note that regardless of these settings there may still be "glue" such as the 'required fields' indicator rendered
        at both locations but the buttons themselves will only show where requested.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>stepSubmitButton</name>
    <tag-class>blackboard.servlet.tags.ngui.GenericSubmitButtonTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Step submit buttons can be specified within the step submit tag to override
      the default buttons that appear with the step submit tag and display a select
      number of buttons. When step submit buttons are specified, the first button
      will be assumed to be primary (unless another button declares itself as primary
      via the primary attribute) and displayed on the natural right of the page. Only
      one button will be rendered as the primary button. If more than one button is set
      as the primary button, the first one declared will be set as the primary button.
      All remaining buttons are considered to be secondary, displayed to the natural left
      of the primary button, in the order listed.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The id suffix for the buttons.  Two buttons will be rendered on the page.
      The top button will have an id of top_xx and the bottom one will be bottom_xx
      where xx is the given value for this id attribute</description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text on the button.
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The URL used to link the button.  Only one of url or onClick may be specified.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An onClick handler for the button. Only one of url or onClick may be specified.
      </description>
    </attribute>
    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean declaring a button as the primary submit button.
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>helpKey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        For commonly used buttons the helpKey determines which instructions to
        display in the step submit. The text for helpKey "foo" is defined in
        the tags bundle under the value "button.foo.helpkey".

        If this value does not exist in the tags bundle, it will try loading
        from the current B2's bundle. Thus B2 developers can add their own
        generic helpkey values for reoccuring buttons using the convention:
        "button.buttonName.helpkey".
        
        Note: If the bbNG:stepSubmit has instructions then the button helpKey is ignored.
      </description>
    </attribute>
    <attribute>
      <name>instruction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This defines text to be displayed for this button in the step submit.
        This is useful for unique, one-of-a-kind buttons whereas more generic,
        commonly occuring ones (such as "Ok", "Cancel", "Submit") should take
        advantage of the helpKey attribute.

        Note: If the bbNG:stepSubmit has instructions then the button instructions are ignored.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>genericSubmit</name>
    <tag-class>blackboard.servlet.tags.ngui.GenericSubmitTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      The generic submit allows a user to submit data to a system or to cancel
      that action. When used without any attributes or body, it will generate
      a "Cancel" button as a secondary button and a "Submit" button as a primary button.
      Optionally, one can specify picker submit buttons to be generated.
      <p>
      <b>Note: </b> Generic submit tags should not be used within a data collection page.
      For those pages, use the step submit tag instead.
      ]]>
    </description>
    <attribute>
      <name>cancelUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The URL to recall the page if the user cancels.
        The default is the parent nav item's URL (if set and available)
        or the javascript back function.
        Only one of cancelUrl or cancelOnClick should be specified
      </description>
    </attribute>
    <attribute>
      <name>cancelOnClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The onClick value to recall the page if the user cancels.
        The default is the parent nav item's URL (if set and available)
        or the javascript back function.
        Only one of cancelUrl or cancelOnClick should be specified
      </description>
    </attribute>
    <attribute>
      <name>showCancelButton</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean indicating whether to show a "Cancel" button.
        The default is true when no step submit buttons are specified,
        or, when step submit buttons are specified AND the cancelUrl is
        specified. Otherwise it will default to false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>genericSubmitButton</name>
    <tag-class>blackboard.servlet.tags.ngui.GenericSubmitButtonTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Generic submit buttons can be specified within the generic submit tag to override
      the default buttons that appear with the submit tag and display a select
      number of buttons. When submit buttons are specified, the first button
      will be assumed to be primary (unless another button declares itself as primary
      via the primary attribute) and displayed on the natural right of the page. Only
      one button will be rendered as the primary button. If more than one button is set
      as the primary button, the first one declared will be set as the primary button.
      All remaining buttons are considered to be secondary, displayed to the natural left
      of the primary button, in the order listed.
    </description>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text on the button.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The id for the button.</description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The URL used to link the button.  Only one of url or onClick may be specified.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An onClick handler for the button. Only one of url or onClick may be specified.
      </description>
    </attribute>
    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean declaring a button as the primary submit button.
        The default is false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>textElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.TextElementTag</tag-class>
    <body-content>empty</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Text elements generate a form input type of text.
      This tag accepts dynamic attributes in addition to the ones listed, for example,
      attributes like event attributes (onblur, onclick and onchange) may be specified.
    </description>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean whether this element is required.
        If required, there must be input in the text box (validated via javascript).
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text.
        The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element.
        If this element is display only, only the text value with a hidden element will be outputted,
        the input box will not be outputted. The default is false.
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        <![CDATA[
        Adds additional validation logic depending on the type
        of the input. This attribute is not case sensitive.
        Default is "string", but may be "integer" or "float", etc.
        See <code>TextElementTag.Type</code> for the entire list
        of proper values. Consider adding a new type if you need
        validation that is generic enough for re-use.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The maximum number of characters a user can enter.
        The default is an unlimited numbers.
      </description>
    </attribute>
    <attribute>
      <name>minLength</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The minimum number of characters a user must enter.
        The default is no minimum when the element is not required, else,
        if the element is required, the default minimum is 1 character.
        The minimum length is enforced via JavaScript.
      </description>
    </attribute>
    <attribute>
      <name>validation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        @Since 9.1SP4
        Javascript array of validation params. Allows specifying any validation param
        beyond the standard: minLength, maxLength, and type. See inputText in validateForm.js
        for valid params.
        <p>
            <b>Example usage:</b>
            <br>
            BEFORE - validation parameters declared in javascript block:
            <p>
            <code>
            &lt;bbNG:jsBlock&gt;<br>
            &nbsp;&nbsp; &lt;script type=&quot;text/javascript&quot;&gt;<br>
            &nbsp;&nbsp;&nbsp;&nbsp; formCheckList.addElement(new inputText({ref_label:&quot;${bbNG:EncodeLabel(strRoleIdLabel)}&quot;, name:&quot;roleId&quot;, minlength:1, maxlength:50, trim:&quot;true&quot;, invalid_chars:/[\\\%&amp;#&lt;&gt;=+,&quot;']/g, dummyParam:"dummyParamValue"}));<br>
            &nbsp;&nbsp; &lt;/script&gt;<br>
            &lt;/bbNG:jsBlock&gt;
            </code>
            </p>

            AFTER - validation parameters declared via tag attributes:
            <p>
            <code>
            &lt;c:set var=&quot;validationValue&quot;&gt;{'invalid_chars':'/[\\\\\\%&#<>=+,"\']/g','dummyParam':'dummyParamValue'}&lt;/c:set&gt; <br>
            &lt;bbNG:textElement id=&quot;roleId&quot; name=&quot;roleId&quot; title=&quot;${strRoleIdLabel}&quot; ... minLength=&quot;1&quot; maxLength=&quot;50&quot; validation=&quot;${validationValue}&quot;/&gt;
            </code>
            </p>
        </p>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial width of this element.
        This corresponds to the size attribute of the HTML
        input tag. The default size is 20 characters.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial value of this element. This corresponds to the
        value attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element.
        This corresponds to the name attribute of the HTML input tag.
        The name will be used for the id as well if id is not specified.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element. This corresponds to the id attribute of the HTML
        input tag. If not specified, the id will be the same as the specified name.
        Id must be unique from all other form elements on the page.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title corresponds to the title attribute of the HTML input tag (tool tip text).
        For accessibility, the title text should be localized text describing the purpose
        of the input text box. The title is also used in the javascript validation message
        when validating text length requirements. NOTE: If this TextElement tag has a parent
        DataElement tag with an associated labelFor attribute, this title attribute will be
        ignored and not rendered (to prevent duplicate accessibility labeling). The
        DataElement's label attribute will take its place for both accessibility and javascript
        validation purposes. Still, setting this element is allowed and encouraged. It provides
        backup labeling that will simply be ignored if not needed.
      </description>
    </attribute>
    <attribute>
      <name>isVertical</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this text box should render on its own line,
        used when rendering a group of form elements in a vertical format.
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>isDisabled</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this text box is initially
        disabled.  The default is false, meaning the text box is not initially
        disabled.  A disabled element must be enabled via Javascript before it
        can be used on a page.
      </description>
    </attribute>
    <attribute>
      <name>isPassword</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this text box is a password field
        The default is false, meaning the text box is a normal text field.  If it is true, this field represents as a password field.
      </description>
    </attribute>
    <attribute>
      <name>showAsSpinner</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether to render this textbox as a spinner.
        The implementation of the spinner uses the JQuery UI - http://jqueryui.com/spinner.
      </description>
    </attribute>
    <attribute>
      <name>spinnerMax</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Integer indicating the maximum value for the Spinner.  This attribute only applies
        if the 'showAsSpinner' is set to true.  The default is 10000.
      </description>
    </attribute>
    <attribute>
      <name>spinnerMin</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Integer indicating the minimum value for the Spinner.  This attribute only applies
        if the 'showAsSpinner' is set to true.  The default is 1.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>hiddenElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.HiddenElementTag</tag-class>
    <body-content>empty</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Generates a hidden form input element.
    </description>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial value of this element. This corresponds to the value attribute of the HTML input tag.  Will be
        HTML encoded automatically.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element. This corresponds to the name attribute of the HTML input tag. The name will
        be used for the id as well if id is not specified.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element. This corresponds to the id attribute of the HTML input tag. If not specified,
        the id will be the same as the specified name. Id must be unique from all other form elements on the page.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>checkboxElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.CheckboxElementTag</tag-class>
    <body-content>empty</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Check box elements generate a form input type of checkbox. If used inside a data collection
      page step, it must be wrapped with the data element tag.
      This tag accepts dynamic attributes in addition to the ones listed, for example,
      attributes like checked and event attributes (onblur, onclick and onchange)
      may be specified.
    </description>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text.
        The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element.
        If true, the optionLabel text will be required and rendered and
        the checkbox will not be outputted. The default is false.
      </description>
    </attribute>
   <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial value of this element.
        This corresponds to the value attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element.
        This corresponds to the name attribute of the HTML input tag.
        The name will be used for the id as well if id is not specified.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element.
        This corresponds to the id attribute of the HTML input tag.
        If not specified, the id will be the same as the specified name.
        Id must be unique from all other form elements on the page.
      </description>
    </attribute>
     <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title corresponds to the title attribute of the HTML input tag (tool tip text).
        For accessibility, the title text should be localized text describing
        the purpose of the check box. This may be the same text as the label
        for the data element tag. The default is no title.
      </description>
    </attribute>
    <attribute>
      <name>optionLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text to be displayed next to the check box, describing it.
        The default is no text next to the check box.
      </description>
    </attribute>
    <attribute>
      <name>isSelected</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this checkbox is initially checked.
        The default is false, meaning the checkbox is not initially selected.
      </description>
    </attribute>
    <attribute>
      <name>isDisabled</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this checkbox is initially disabled.
        The default is false, meaning the checkbox is not initially disabled.  A
        disabled element must be enabled via Javascript before it can be used on
        a page.
      </description>
    </attribute>
    <attribute>
      <name>isVertical</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this checkbox should render on its own line,
        used when rendering a group of checkboxes in a vertical format.
        The default is false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>radioElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.RadioElementTag</tag-class>
    <body-content>JSP</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Radio elements generate a form input type of radio. If used inside a data collection
      page step, it must be wrapped with the data element tag.
      This tag accepts dynamic attributes in addition to the ones listed, for example,
      attributes like event attributes (onblur, onclick and onchange) may be specified.
    </description>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text. The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element.
        If true, the optionLabel text will be required and rendered and
        the radio button will not be outputted. The default is false.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial value of this element.
        This corresponds to the value attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element.
        This corresponds to the name attribute of the HTML input tag.
        The name will be used for the id as well if id is not specified.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element.
        This corresponds to the id attribute of the HTML input tag.
        If not specified, the id will be the same as the specified name.
        Id must be unique from all other form elements on the page.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title corresponds to the title attribute of the HTML input tag (tool tip text).
        For accessibility, the title text should be localized text describing
        the purpose of the radio button. This may be the same text as the label
        for the data element tag. The default is no title.
      </description>
    </attribute>
    <attribute>
      <name>optionLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text to be displayed next to the radio button, describing it.
        The default is no text next to the check box.
      </description>
    </attribute>
    <attribute>
      <name>isSelected</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this radio button is initially selected.
        The default is false, meaning the radio button is not initially selected.
      </description>
    </attribute>
    <attribute>
      <name>isDisabled</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this radio is initially disabled.
        The default is false, meaning the radio is not initially disabled.  A
        disabled element must be enabled via Javascript before it can be used on
        a page.
      </description>
    </attribute>
    <attribute>
      <name>isVertical</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this radio button should render on its own line,
        used when rendering a group of radios in a vertical format.
        The default is false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>dataElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.DataElementTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Data elements are fields in steps of data collection pages that mainly contain form elements.
      Data elements may only be used within steps. The data element tag should wrap all form elements
      declared either with manual HTML form input tags or the various predefined element tags
      (eg. <code>textElement</code>, <code>selectElement</code>, <code>radioElement</code>,
      <code>checkboxElement</code>, etc ).
      <p>
      Help text for manual HTML form elements defined within this tag may be provided
      via the <code>elementInstructions</code> tag.
      It can optionally contain a delegateContextMenu tag which will render a
      context menu next to the label of the item.
      ]]>
    </description>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The label for this element. Should be localized text describing the form element(s)
        contained by this dataElement. The label will be rendered in the UI and also used for
        accessibility.
      </description>
    </attribute>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether contents of this element are required.
        The default is false.
        If required, validation should be coded for the contents of the data element
        to meet what is acceptable user entry. Many of the NG element tags have built-in
        validation. See their TLD doc for details.
      </description>
    </attribute>
    <attribute>
      <name>labelFor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The id for which to assign to the "for" attribute of the HTML label tag wrapped
        around the label text of this data element. The HTML label tag associates
        information with a form control, letting the user know what purpose the
        form control has, for accessibility.
        <p>
        Assign a form element id to this attribute to associate the label text of
        this data element to a specific form control element.
        <p>
        For example:
        <br>
        &lt;label for="<B>my_button</B>"&gt;Fun Button&lt;/label&gt;
        <br>
        &lt;input type="image" id="my_button" src="blue_button.gif"&gt;
        <p>
        If specified, a value must also be provided for the 'label' attribute.
        NOTE: Setting this attribute to designate a textElement will result in the
        textElement's title attribute not being rendered, since this tag's label
        attribute will be used in its place for both accessibility and js validation
        purposes.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Id used for the top containing element produced by this tag.
      </description>
    </attribute>
    <attribute>
      <name>isSubElement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this data element tag either is a sub element (is contained within a parent dataElement tag)
        or has sub elements (contains other dataElement tags). In order to use this properly, both the parent
        and child dataElement tags have to specify this attribute and set it to true.
      </description>
    </attribute>
    <attribute>
      <name>subElementType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Sets the specific type for the sub element. Acceptable values are
        of the <code>DataElementTag.SubElementType</code> enum items.
        <p>
        Default is <code>NESTED_LIST</code>.
        <p>
        This attribute needs to be specified on the child dataElement;
        setting it on the containing (parent) dataElement will not have
        the desired effect.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>isVertical</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the body of this data element should be below the label.  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>renderLegendAndFieldset</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Render a legend and fieldset around this data element.
        If true, a value must also be provided for one of the 'label' or 'legend' attributes.
        Default is false.
      </description>
    </attribute>
    <attribute>
      <name>legend</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Specifies the text to use when rendering the hidden &lt;legend&gt; element (see 'renderLegendAndFieldset').
        Default is to use the "label" attribute's value.
      </description>
    </attribute>
    <attribute>
      <name>listItemClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional css class name to apply to the <li> for this row
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>elementInstructions</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.ElementInstructionsTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Element instructions is help text that aid users in filling out data fields
      on a data collection page. This tag may only be used within the <code>dataElement</code>
      tag when creating a container of manually constructed data element fields.
      Otherwise, use the standard data element tags that exist and their helpText attributes.
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Id used for the containing element produced by this tag.  This value can
        be provided if desired so that the generated element can be referenced
        via Javascript or other means.
      </description>
    </attribute>
    <attribute>
      <name>text</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text to be displayed as inline help text. The text should be localized text.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>selectElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.SelectElementTag</tag-class>
    <body-content>JSP</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Select elements generate a form select dropdown or scroll list box.
      If used inside a data collection page step, it must be wrapped with the
      data element tag.
      The select element must contain at least one select option element.
      This tag accepts dynamic attributes in addition to the ones listed, for example,
      attributes like event attributes (onblur, onclick and onchange) may be specified.
    </description>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this element is required.
        If required, a value must be selected (validated via javascript).
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text. The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element.
        If this element is display only, the text label(s) of the selected option(s)
        will be outputted, the select dropdown or box will not be outputted.
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element. This corresponds to the name attribute
        of the HTML input tag. The name will be used for the id as well if
        id is not specified.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element. This corresponds to the id attribute
        of the HTML input tag. If not specified, the id will be the same
        as the specified name.
        Id must be unique from all other form elements on the page.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title corresponds to the title attribute of the HTML select tag (tool tip text).
        For accessibility, the title text should be localized text describing
        the purpose of the input text box.
      </description>
    </attribute>
    <attribute>
      <name>multiple</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute to allow multiple selections. The default is false,
        which means that the only one option may be selected at the same time.
      </description>
    </attribute>
    <attribute>
      <name>isDisabled</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether this select element is initially
        disabled.  The default is false, meaning the select is not initially
        disabled.  A disabled element must be enabled via Javascript before it
        can be used on a page.
      </description>
    </attribute>
    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The number of rows in the list that should be visible at the same time
        if the select element is presented as a scrolled list box.This corresponds
        to the size attribute of the HTML select tag. The default is 1.
      </description>
    </attribute>
    <attribute>
      <name>useChznJs</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         UNSUPPORTED:  Chosen is not currently AX-friendly and should not be used until it is made to be.

         Whether to use the Chosen (Chzn) Plugin - http://harvesthq.github.io/chosen/-  to render the select box.
         Dropdowns using Chosen are wrapped by a div with a css class of 'chzn-container'.  The css class can be used to access
         the DOM element in Javascript or add styling via CSS.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>selectOptionElement</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.SelectOptionElementTag</tag-class>
    <body-content>empty</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      Select options are the items in a select element.
      This tag must be used within a select element tag.
      This tag accepts dynamic attributes in addition to the ones listed,
      for example, attributes like event attributes (onblur, onclick and
      onchange) may be specified.
    </description>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial value of this element.
        This corresponds to the value attribute of the HTML option tag.
      </description>
    </attribute>
    <attribute>
      <name>isSelected</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether the option is initially selected.
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>optionLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The user displayed text of the option.
        The option label text should be localized text.
        Default is empty text.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>multiSelect</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.MultiSelectTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Multi-select generates 2 selection boxes for choosing multiple items from the
      source to the destination boxes. If used inside a data collection page step, it
      must be wrapped with the data element tag.
      This uses the <code>blackboard.servlet.data.MultiSelectBean</code> as the types in the
      collections passed to the source and destination select boxes. Upon form
      submission, there will be comma-delimited string values of all options that were in the
      source and destination select boxes for manipulation.
      <P>
      <B>Manipulating the multi-select widget via javascript:</B>
      <P>
      If you wish to manipulate the contents of the multi-select boxes with javascript,
      there are convenience methods to do so in <code>widget.js</code>. The array of multi-select
      javascript prototype objects on a page are available via this global variable:
      <code>widget.MultiSelect.multiselectBoxes</code>. There are methods that allow adding
      and resetting elements in the source and destination select boxes. The full list of
      object methods are defined in <code>widget.MultiSelect.prototype</code>
      in <code>widget.js</code>.
      ]]>
    </description>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this element.
        The help text should be localized text. The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element. If this element is display only,
        only the text of the currently selected items (items in the "destination" collection) will
        be outputted. The default is false.
      </description>
    </attribute>
    <attribute>
      <name>formName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of the form (HTML name attribute of the form tag) where the multi-select widget
        is being used.
      </description>
    </attribute>
    <attribute>
      <name>sourceName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of the source select box element. This corresponds to the name attribute of the
        HTML select tag. The name is also used as the id attribute. The default sourceName is
        "[widgetName]_source_select", where widgetName is the given widgetName attribute,
        or "multiselect" by default.
      </description>
    </attribute>
    <attribute>
      <name>destName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of the destination select box element. This corresponds to the name attribute of the
        HTML select tag. The name is also used as the id attribute. The default destName is
        "[widgetName]_dest_select", where widgetName is the given widgetName attribute,
        or "multiselect" by default.
      </description>
    </attribute>
    <attribute>
      <name>widgetName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of the widget that will be prepended to the names of the source and destination
        name attributes to ensure a more unique input name attribute.
        The default widget name is "multiselect".
      </description>
    </attribute>
    <attribute>
      <name>sourceTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The source title is the title that appears over the source select box. The source title
        should be a localized text describing what is contained in the source list, for example,
        "Roles to Select".  Default value is "Items to Select".
      </description>
    </attribute>
    <attribute>
      <name>destTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The destination title is the title that appears over the destination select box.
        The destination title should be a localized text describing what is contained in the
        destination list, for example, "Selected Roles".  Default value is "Selected Items".
      </description>
    </attribute>
    <attribute>
      <name>sourceCollection</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection passed to the source select box. This is a list of MultiSelectBean objects
        passed to be displayed on the source select box. The label and value attributes should be
        set for each member of the list. The isSelected attribute can be set in case some options
        need to be initially selected.
      </description>
    </attribute>
    <attribute>
      <name>destCollection</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection passed to the destination select box. This is a list of MultiSelectBean objects
        passed to be displayed on the destination select box. The label and value attributes should be
        set for each member of the list. The isSelected attribute can be set in case some options
        need to be initially selected.
      </description>
    </attribute>
    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Size refers to the number of rows displayed in the select boxes. The size attribute is used for
        both boxes. The default size is 8.
      </description>
    </attribute>
    <attribute>
      <name>minSelected</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The minimum number of items that must be selected, transferred from the source to the
        destination boxes. The default is 0, meaning there is no minimum. The minimum number of
        selected items check is enforced via JavaScript.
      </description>
    </attribute>
    <attribute>
      <name>maxSelected</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The maximum number of items that may be selected, transferred from the source to the
        destination boxes. The default is 0, meaning there is no maximum. The maximum number of
        selected items check is enforced via JavaScript.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if both the source and destination collections are empty.
        The default message is "No items for [soureTitle] and [destTitle] are found."
      </description>
    </attribute>
    <attribute>
      <name>showEmpty</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
     The showEmpty when true will display multiselect even if the left and right boxes are empty.
     default value is false
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>multiSelectAction</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.MultiSelectActionTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Performs the various actions on the selection options in the multiselect widget
      <![CDATA[<p>]]>
      If there are 3 or less actions, then they will be sidplayed as buttons. In case
      there are more than three options then it will be displayed as a dropdown
    </description>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This is the text that will appear on the button or dropdown for that action
      </description>
    </attribute>
    <attribute>
      <name>javaScriptFunc</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This is the name of the javascript function which the user has to write to perform
        a certain action. The name of the function needs to be passed in as a attribute of
        the tag. This javascript function is called with one parameter, which is the name
        of the select Box which was passed in outer multiSelect tag
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The html "value" attribute for the option tag</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>colorPicker</name>
    <tag-class>blackboard.servlet.tags.ngui.picker.ColorPickerTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Color picker is used for choosing color that generates a color swatch
      and a color chooser button that will pop up a table of colors to choose from.
      If used inside a data collection page step, it must be wrapped with the data element tag.
    </description>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean whether this element is required.
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text. The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title for the color picker.  Can be picked up by the screen reader (JAWS)
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element.
        If this element is display only, only current selected color will be outputted,
        the user will not be able to select another color. The default is false.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element.
        This corresponds to the name attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>initialColor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial color that is displayed for the color picker. The default is black (#000000).
        To define the initial color as transparent, use "transparent".
      </description>
    </attribute>
    <attribute>
      <name>previewContainerId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An optional preview container element ID string may be specified to
        have the color picker widget change the color of the contents inside
        the container when a color is chosen.
        An example usage: for an on-screen and on-change font and color preview panel.
      </description>
    </attribute>
    <attribute>
      <name>previewBackgroundContainerId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An optional preview background container element ID string may be specified to
        have the color picker widget change the background color of the contents inside
        the container when a color is chosen.
        An example usage: for an on-screen and on-change font and color preview panel.
      </description>
    </attribute>
    <attribute>
      <name>allowTransparent</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An optional setting which renders an additional option on the picker
        that allows the person to specify transparent for the color.
        The default is false.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>colorPalettePicker</name>
    <tag-class>blackboard.servlet.tags.ngui.picker.ColorPalettePickerTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Color palette picker is used for a choosing color palettes. It generates a sample color palette box
      for the currently selected palette. There is a popup table of palettes to choose from.
      If used inside a data collection page step, it must be wrapped with the data element tag.
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element.
        This corresponds to the hidden form element whose value is the current palette extRef
      </description>
    </attribute>
    <attribute>
     <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This corresponds to the current palette extRef.
        The default is '' (empty string) for current brand system palette.
      </description>
    </attribute>
    <attribute>
      <name>showDownloadButton</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to show a "Download Copy" button next to the currently selected palette.
        Default false.
      </description>
    </attribute>
    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Javascript to run when the color palette is changed.
      </description>
    </attribute>
    <attribute>
      <name>themeId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The theme to use when initially loading the picker previews.
      </description>
    </attribute>
    <attribute>
      <name>themeChangeElementId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Specifies an optional form element whose value is a theme id. When
        the theme id changes, the styles of the palette previews will be updated.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>textbox</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.TextboxTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Textbox generates a plain or wysiwyg textbox. If used inside a data collection page step,
      it must be wrapped with the data element tag.
    </description>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text.
        The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The name value for the textbox.
        The actual name attribute for the HTML textarea will be suffixed with "text".
        <p>
        NOTE: The id attribute will be set to the same value as the name attribute.
        <p>
        For example, given <code>name="otherInfo"</code>, the following HTML will be generated:
        <br>
        <code>
        &lt;textarea name="otherInfotext" id="otherInfotext" ...&gt;
        </code>
        ]]>
      </description>
    </attribute>
    <attribute>
    <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    <description>The label for this textbox. The label should be localized text. If not specified and this is inside a dataelement tag then the label from the dataelement tag will be used as the label for this element.</description>
    </attribute>
    <attribute>
      <name>isMathML</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether WebEQ and MathML be available on this textbox, if enabled on the system.
        Default: True
      </description>
    </attribute>
    <attribute>
      <name>vtbeOnOffToolKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP10; Not used in new VTBE.]]>
        UserData key for tool-specific vtbe on/off.
        If not provided, the default key will be used.
      </description>
    </attribute>
    <attribute>
      <name>isSpellcheck</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether spellcheck be available on this textbox, if enabled on the system.
        Default: True
      </description>
    </attribute>
    <attribute>
      <name>isSpellcheckOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether only the spellcheck button should appear in the VTBE (which will appear as
        the 'legacy' VTBE, not wysiwyg). Default: False
      </description>
    </attribute>
    <attribute>
      <name>isUrlLink</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether the Insert File|Image|etc popup window should also allow linking to any
        given URL. Default: False
      </description>
    </attribute>
    <attribute>
      <name>isFormattedText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether the legacy textbox should include radio buttons for smarttext, plaintext,
        and html. Default: True
      </description>
    </attribute>
    <attribute>
      <name>mode</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description><![CDATA[<i>deprecated</i>]]></description>
    </attribute>
    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The number of rows specified, with a default of 12 rows, and a minimum of 1 row.

        When the WYSIWYG textbox editor is turned on, the number of rows will affect the height of the
        editor.
      </description>
    </attribute>
    <attribute>
      <name>cols</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        As of 9.1, this setting no longer has any effect: the textbox will take up the entire available width
        regardless of "Visual" mode or not.
      </description>
    </attribute>
    <attribute>
      <name>minLength</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The minimum length validated for (e.g., "Description must be at least 100
        characters long")
      </description>
    </attribute>
    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The maximum length validated for (e.g., "Description cannot be more than 4000
        characters long")
      </description>
    </attribute>
    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text string to be displayed in the textbox (generally used on Modify
        operations) If a FormattedText object is passed, the format flag should NOT be
        used. If a String is passed, the format flag should also be used, or the format
        will default to SmartText. Default: null
      </description>
    </attribute>
    <attribute>
      <name>ftext</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.base.FormattedText</type>
      <description>
        New code should use this attribute instead of passing a FormattedText object to the
        text attribute. The old way will still work (for backward compatibility), but using
        the ftext attribute is cleaner and avoids some problems jstl was having.
        The text string to be displayed in the textbox. As above, if this is set, the format
        flag should NOT be used. Default: null
      </description>
    </attribute>
    <attribute>
      <name>xContent</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description><![CDATA[<i>deprecated</i>]]></description>
    </attribute>
    <attribute>
      <name>format</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Supported values: TextboxTag.HTML, TextboxTag.PLAIN_TEXT, or
        TextboxTag.SMART_TEXT. Default: SMART_TEXT
      </description>
    </attribute>
    <attribute>
      <name>fileLocation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.servlet.data.FileLocation</type>
      <description>
        FileLocation object (object implements FileLocation interface) Default: null
      </description>
    </attribute>
    <attribute>
      <name>isLocalOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      <![CDATA[<i>deprecated</i> Since 9.1 SP8; Use supportUpload.]]>
        Whether users may select existing files from the CS store or must upload files from their local machine.  isLocalOnly and isCSOnly can not both be true.
        Default: false.
      </description>
    </attribute>
    <attribute>
      <name>isCSOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Use supportUpload.]]>
        Whether users may upload files or must select existing files from the CS store.  isLocalOnly and isCSOnly can not both be true.
        Default: false.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean setting to show the display only view of this element.
        If this element is display only, only the text value with a hidden element will be outputted,
        the textarea will not be outputted. Default: false.
      </description>
    </attribute>
    <attribute>
      <name>principalId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A String representing the Content System permissions for files linked to this
        textbox
      </description>
    </attribute>
    <attribute>
      <name>isRow2Collapsed</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether the second row of the VTBE is collapsed on page load, showing a control
        arrow instead of the row 2 buttons. Default: False
      </description>
    </attribute>
    <attribute>
      <name>isRow3Collapsed</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether the third row of the VTBE is collapsed on page load, showing a control
        arrow instead of the row 3 buttons. Default: False
      </description>
    </attribute>
    <attribute>
      <name>isStandalonePage</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the resulting code from the wysiwyg object is a full standalone HTML page,
        including and tags (usage: inside the content system). Default: False
      </description>
    </attribute>
    <attribute>
      <name>isContentLinking</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Use supportUpload.]]>
        Whether the ability to browse the content system is desired for this textbox.
        Default: False
      </description>
    </attribute>
    <attribute>
      <name>alwaysShowMashups</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether the mashups button should be shown in Wysiwyg mode regardless of whether
        the third-row is disabled.

        Default: False
      </description>
    </attribute>
    <attribute>
      <name>currentFileId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Id of the file the user is editing
      </description>
    </attribute>
     <attribute>
      <name>customConfig</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The custom Configuration attribute provides an mechanism for advance customization of the content editor.
        The attribute accepts a string representation of a JSONObject.  This contains content editor functionality
        with tool button ordering, and optional advance tinyMce customization.  A list of functions/tools are located
        in an enum list <code>TinyMceFunction</code> found in the <code>TinyMceConfig</code> class.  The list of available
        tinyMce configurable settings are located at: http://www.tinymce.com/wiki.php/Configuration3x
        <p/>Example usage:
        <p/>
        Single toolbar row containing two tool buttons for attaching files, and spell checking<br/>
        <code>customConfig="{\"row1\":\"file,spell\"}"</code>
        <p/>Two rows containing file attachments and spell checking on row 1, and bold, emotion on row 2.
        Additionally, wordcount functionality is enabled (displaying the number of words in the lower right status bar.<br/>
        <code>customConfig="{\"row1\":\"file,spell\",\"row2\":\"bold,emotion,wordcount\"}"</code>
        <p/>A second enhancement allows direct configuration of tinyMce using name/value pairs.  A simple example is
        positioning the toolbar (by default it is located at the top).  The following example provides two tool rows
        (as in the above example), and specifies the toolbar location on the bottom, and places the status bar on the top.
        The <code>theme_advanced_statusbar_location:top</code> pair illustrates how additional pairings can be added.<br/>
        <code>customConfig="{\"row1\":\"file,spell\",\"row2\":\"bold,emotion,wordcount\",
                            \"config\":[\"theme_advanced_toolbar_location:bottom\",\"theme_advanced_statusbar_location:top\"]}"</code>
        <p/>
        Note that using this attribute overrides the <code>isSpellcheckOnly</code> attribute.

      </description>
    </attribute>
    <attribute>
      <name>showArtifactVTBEFooter</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether to display the VTBE Artifact footer.  The footer allows the user
        to specify whether to save files as artifacts.
      </description>
    </attribute>
    <attribute>
      <name>saveAsArtifactType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        This stores the artifact type if the content is stored as artifact.
      </description>
    </attribute>
    <attribute>
      <name>copyFileId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This stores the artifact type if the content is stored as artifact.
      </description>
    </attribute>
    <attribute>
      <name>displayCharacterCounter</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.

          The Character count will be displayed for all the spellcheck only vtbe and word count for others]]>
        <![CDATA[

        Displays a running total of the number of characters available for this textbox,
        based on the maxLength attribute. NOTE: This attribute only applies when
        (a) the isSpellcheckOnly attribute is "true"; and (b) a maxLength has been set.

        <p>
        If you wish to manipulate the contents of the character counter with javascript,
        there are convenience methods to do so in <code>widget.js</code>. The array of multi-select
        javascript prototype objects on a page are available via this global variable:
        <code>widget.TextBoxCounter.counters</code>. Especially useful is a function
        (<code>update</code>) that prompts the counter to update itself, based on the
        current contents of its textbox. The full list of object methods are defined in
        <code>widget.TextBoxCounter.prototype</code> in <code>widget.js</code>.

        ]]>
      </description>
    </attribute>
    <attribute>
      <name>allowSaveAsArtifactForNoCSLicense</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        Whether showing the Save as RO at the bottom of the textbox.
        Default: False
      </description>
    </attribute>
    <attribute>
      <name>allowToggle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       <![CDATA[<i>deprecated</i> Since 9.1 SP8; Not used in new VTBE.]]>
        <![CDATA[
        Whether to allow the editor to be toggled on/off.  If this is false, the editor will
        display in the current mode according to the user's preferences (i.e if the editor was off
        previously, it will show off and vice versa).
        <p>
        Generally this should be left to the default value (true).  However it can be useful in some places
        to disable where the full page refresh caused by the toggle action would cause problems.
        <p>
        Default: true.
        ]]>
      </description>
    </attribute>
    <attribute>
    <name>addNegativeTableMargin</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to put a negative margin on top of the textbox or not. Default value is true.
      </description>
    </attribute>
    <attribute>
      <name>variables</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The set of variables to be displayed in the drop down.  This is expected to be an EnumSet
        containing items of type blackboard.platform.deployment.util.MessageVariable.
      </description>
    </attribute>
    <attribute>
      <name>defaultValue</name>
      <required>false></required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The default value that will be inserted into the text area if the Restore Default Value
        context menu item of the insert variables context menu is clicked.  Will only display if
        the variables attribute is used.
      </description>
    </attribute>
    <attribute>
      <name>copyToPrivateDoc</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set to true causes the attachment being copied into private store and the course comtent
        links to the copy. Default to "false".
      </description>
    </attribute>
    <attribute>
      <name>parentId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Id of the Parent Entity. This should be set if embedded files are stored in the Course files folder
        (and not the Private Document Store) . It is used for creating Adaptive Release tokens.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>parentIdTypeKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         Type Key of the DataType of the Id of the Parent Object. This should be set if parentId is being set.
      </description>
    </attribute>
    <attribute>
      <name>autoInitialize</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         create the VTBE automatically if it's true. If it's false, user has to call the script to render VTBE
      </description>
    </attribute>
    <attribute>
      <name>formatOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         Show the formated VTBE when 'true', otherwise show the full VTBE.
         formatOnly and isSpellcheckOnly both can not be true.
      </description>
    </attribute>
    <attribute>
      <name>supportUpload</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         <p>
           Specify how the file(s) will be linked in the VTBE.
           It should have one or comma separated values
                  CS -> Whether users must select existing files from the CS store
                  L  -> Whether users must upload files from their local machine.
                  UL -> Whether the Insert File|Image|etc popup window should also allow linking to any given URL.
                  CL -> Whether the ability to browse the content system is desired for this textbox.
           Invalid Combination.
                CS,L.
         </p>
       </description>
    </attribute>
    <attribute>
      <name>pickerMode</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Specific for CS browsing capabilities. Identifies what filtering (if any)
        should be applied to the rendering of CS elements.
        One of three possibilities.
        FOLDER : CS picker should show CS folders only.
        FILE : CS picker should show CS files only.
        FILE_AND_FOLDER : CS pickers shows both files and folders.
        Default FILE_AND_FOLDER.
        If copyToPrivateDoc is true then this attribute will always be set to FILE.
      </description>
    </attribute>
    <attribute>
      <name>supportEmbed</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          Allow embedding media/file content.
          Default: true.
      </description>
    </attribute>
    <attribute>
      <name>useLightbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          The text area will be displayed with spell check and a button, when clicked it will bring up a lightbox with the full vtbe.
          Default: false.
      </description>
    </attribute>
    <attribute>
      <name>loadDynamically</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      <![CDATA[
          The condition that we should set it to true:<p>If the page is loaded already, and then we need to initialize VTBE, we should set the value to true.
          A common scenario is a VTBE is generated by ajax call after page loaded. </p>
          Default: false.
          It's used by lightbox primarily. But it can be used for any dynamic load via ajax.
          ]]>
      </description>
    </attribute>
    <attribute>
      <name>autoSpellCheck</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      <![CDATA[
          When set to true, the spell check will automatically happen when the textbox is rendered.
          Default: false.
          ]]>
      </description>
    </attribute>
    <attribute>
      <name>basePath</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      <![CDATA[
          Set the base URI for the html page.
          ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>mathEditor</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.MathEditorTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
        MathEditor generates and embeds the math editor. If used inside a data collection page step,
        it must be wrapped with the data element tag.
      ]]>
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          The id value prefix of the math editor container. The actual id value attribute for the editor
          will be suffixed with "MathEditor".
          <p>
          For example, given <code>name="otherInfo"</code>, the following HTML will be generated:
          <br>
          <code>
          &lt;div id="otherInfoMathEditor" ...&gt;
          </code>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>toolbar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          Custom toolbar configuration for Math Editor. Defaults to evaluation toolbar.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>checkSyntax</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          Enables validating syntax when initializing the Math Editor. Default is true indicating the validity of syntax.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>formula</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          The Math Formula or MathML to be set inside the editor.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          Width of the editor. Defaults to 500px.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          Height of the editor. Defaults to 200px.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>syncReservedVariablesCallback</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          The name of the javascript callback function to invoke in regular intervals to sync reserved variables with Math Editor 
          for proper highlighting and MathML generation. Callback function should return an Array of string of reserved variables 
          which Math Editor will treat as keywords. The callback function should not have any parameters.
          <p>
          Example usage of this tag attribute: <br>
          <code>
            &lt;bbNG:mathEditor syncReservedVariablesCallback="someFunctionToBeInvokedToSyncReservedVariables"... /&gt;
          </code> <br>
          </p>
          <p>
          Example of callback JS: <br>
          function someFunctionToBeInvokedToSyncReservedVariables() 
          {
            var reservedVariables = new Array();
            reservedVariables.push( 'ab' );
            ...
            return reservedVariables;
          } <br>
          </p>
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>evalMathFormula</name>
    <tag-class>blackboard.servlet.tags.ngui.EvalMathFormulaTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
        Initializes the Javascript required to evaluate Math Formula.
      ]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>textboxToolbarButton</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.TextboxToolbarButtonTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Appends a new toolbar button to the VTBE editor. This currently supports showing a popup for the button's action.
    </description>
    <attribute>
      <name>tooltip</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Button tooltip</description>
    </attribute>
    <attribute>
      <name>imagePath</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Path to the display image for the button</description>
    </attribute>
    <attribute>
      <name>popupUrl</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to open when the button is activated.</description>
    </attribute>
    <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Css class to apply to the button. Defaults to "button"</description>
    </attribute>
    <attribute>
      <name>alwaysDisabled</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.Boolean</type>
      <description>Boolean indicating that the button is disabled. Defaults to false.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>formattedText</name>
    <tag-class>blackboard.servlet.tags.FormattedTextTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Widget that takes a FormattedText object and a FileLocation (optionally) and renders
      text that has been appropriately parsed for UI display.
    </description>
    <attribute>
      <name>formattedText</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.base.FormattedText</type>
      <description>
        The formattedText object that will be parsed for appropriate rendering
      </description>
    </attribute>
    <attribute>
      <name>fileLocation</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The FileLocation object that is used to parse the @X@ tags to render links to uploaded objects.</description>
    </attribute>
    <attribute>
      <name>buildEllipsis</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Valid only if maxSize is set. This sets a boolean value to indicate if the text needs to be appended with ellipsis or not. Default value is true.</description>
    </attribute>
    <attribute>
      <name>wrapHtml</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Boolean value to indicate if the text needs to be wrapped with vtbe generated div wrapper or not. Default value is true.</description>
    </attribute>
    <attribute>
      <name>maxSize</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Maximum number of characters to display.  Truncates and adds an ellipsis if the maximum size is exceeded.</description>
    </attribute>
    <attribute>
      <name>parentId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The Course Tool ID to generate Adaptive Release (AR) tokens for HTML links to files in 'Course Files'.
        <p>
        The AR token is appended to the URLs of files in this FormattedText object and is used
        to determine whether to serve a File to users.
        </p>
        <p>
        An example parentId is '_1_1'.
        </p>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>parentIdTypeKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The Course Tool dataType to generate Adaptive Release (AR) tokens for HTML links to files in 'Course Files'.
        The AR token is appended to the URLs of files in this FormattedText object and is used
        to determine whether to serve a File to users.
        <p>
        This must be set if parentId is being set.
        </p>
        <p>
        Valid Datatypes are defined in base/config/internal/bb-entitytyperegistry.properties.  In this file, a dataType is the word
        after 'blackboard.entity' and before 'impl'.
        eg.
        blackboard.entity.[dataType].impl
        </p>
        <p>
        Example datatypes include 'content', 'blog', 'blogentry', 'forum', 'attempt'.
        </p>
        <p>
        B2's with custom database table(s) and VTBE having links to Course Files can define their own
        datatypes using the blackboard.persist.datatypeext.DataTypeExtension.
        </p>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>datePicker</name>
    <tag-class>blackboard.servlet.tags.ngui.picker.DatePickerTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      The date picker tag is used for choosing a single date and or time.
      Either the date portion or the time portion may be disabled. If used inside
      a data collection page step, it must be wrapped with the data element tag.
      <p>
      The actual form field that contain data that can be used by the action code
      is: <code>[baseFieldName]_datetime</code>. The field is a string of
      the date and or time chosen in an internal date time format to the date picker.
      <p>
      <b>Use the method in <code>blackboard.servlet.util.DatePickerUtil</code> to parse
      the date time string from the picker into a <code>java.util.Calendar</code> object.</b>
      ]]>
    </description>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text.
        The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean whether this element is required and its input(s) cannot be empty.
        The default is false.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        User-facing label that will be used as as part of the label on form fields
        to uniquely identify form elements on the page for assistive technologies.

        This should be used if there are multiple pickers on the same page.
      </description>
    </attribute>
    <attribute>
      <name>baseFieldName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Base name of the picker fields in the form.
        The default value is "bbDateTimePicker".
        Actual picker field will be [baseFieldName]_datetime.
        If there are more than one date or date range pickers per page,
        then mandatory unique naming is required for the baseFieldName.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>dateTimeValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The Calendar object with which to initialize the date and or time fields of the picker.
        To produce an initially empty date and or time fields, <code>null</code> may be passed.
        If the picker is required and <code>null</code> is passed, the date time value will
        be set to default. The default is the current date and time.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>showDate</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether to show the date field. Default value is true.
      </description>
    </attribute>
    <attribute>
      <name>showTime</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether to show the time field Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>filterFutureYears</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether to restrict the selection of the date and or time to
        less than or equal to current date and or time. Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>suppressInstructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to suppress the default instruction text that appears beside the date fields.
        Default is false.
      </description>
    </attribute>
    <attribute>
      <name>displayOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If displayOnly=true then the input fields will be disabled.  The default is false.
      </description>
    </attribute>
    <attribute>
      <name>midnightWarning</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If specified and the user chooses 'midnight' from the list then this message will be
        displayed in an alert dialog box. If present, the value of showMidnightWarning will be
        disregarded. Usually the default message should be used instead by setting showMidnightWarning to true.
      </description>
    </attribute>
    <attribute>
      <name>showMidnightWarning</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If specified and the user chooses 'midnight' from the list then the default message warning
        the user midnight is start of day will be displayed.
      </description>
    </attribute>
    <attribute>
      <name>defaultTimeOfDay</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional Calendar object specifying the time of day to use if the user provides a
        date value but leaves the time field blank.  Will only be used if 'showTime' is true
        and a date value has been specified by the user.  When used, the hour/minute/second
        fields will be extracted from this object, and added to the date specified by the user.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>defaultTimeToEndOfDay</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional boolean value specifying the time as end of day to use if the user provides a
        date value but leaves the time field blank.  Will only be used if 'showTime' is true,
        'defaultTimeOfDay' is not set and a date value has been specified by the user.
        When used, the hour/minute fields will be set to 11.59 PM, and added to the date
        specified by the user. If 'defaultTimeOfDay' has a value then 'defaultTimeOfDay' value
        get preference. The default is false.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>externalValidateJsCallback</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          The name of the javascript callback function to call when validating the date/time.
          The function must return a boolean; 'true' if the validation is successful, or 'false'
          if the validation fails.  The callback function should have three parameters. They are:
          (1) date type : Valid date types are 'start', 'end' or empty string. date type could be
              an empty string in the case: a single DatePicker is used.
          (2) picker type :  Valid picker types are 'datePicker' and 'timePicker'.
          (3) the date object as a string.
          <p>
          Example usage found in edit_announcement.jsp: <br>
          function announcementValidate ( dateType, pickerType, dateObjStr ) <br>
          </p>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>checkBoxFieldId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Check Box Field Id is the name of the checkbox attached with the date picker tag.
        As checkbox creation is not part of date picker tag.
        <p>
        Default value is "[baseFieldName]_checkbox"
        Default value depends on [baseFieldName].
        </p>
        If there are more than one date picker on the page, then mandatory different [baseFieldName] required.
        If no id is provided and also no checkbox is provided, tag consider non blank values in the date
        and time textboxs as valid values and send them to server.
        Blank values considered to be legal but will not be passed to the server.
        <p>
        If Checkbox is found based on the Field Id, values are mandatory if checkbox is checked and optional
        if not checked.
        </p>
        ]]>
      </description>
    </attribute>
  </tag>



  <tag bb:public="true">
    <name>dateRangePicker</name>
    <tag-class>blackboard.servlet.tags.ngui.picker.DateRangePickerTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      The dateRange picker tag is used for choosing a date and or time range.
      Either the date portion or the time portion may be disabled. If used inside
      a data collection page step, it must be wrapped with the data element tag.
      <p>
      The actual form fields that contain data that can be used by the action code
      are:
      <ul>
      <li><code>[baseFieldName]_start_checkbox</code></li>
      <li><code>[baseFieldName]_start_datetime</code></li>
      <li><code>[baseFieldName]_end_checkbox</code></li>
      <li><code>[baseFieldName]_end_datetime</code></li>
      </ul>
      The date time field is a string of the date and or time chosen in an internal
      date time format to the date picker.
      <p>
      <b>Use the methods in <code>blackboard.servlet.util.DatePickerUtil</code> to parse
      the date time string from the picker into a <code>java.util.Calendar</code> object,
      and to determine whether a checkbox is checked.</b>
      ]]>
    </description>
    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The help text for this element explaining or clarifying this field.
        The help text should be localized text.
        The default is no help text.
      </description>
    </attribute>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Boolean whether this element is required and its input(s) cannot be empty.
        When required, no checkboxes will be rendered for start and end date time even
        if <code>showStartCheckbox=true</code> and or <code>showEndCheckbox=true</code>.
        The default is false.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        User-facing label that will be used as as part of the label on form fields
        to uniquely identify form elements on the page for assistive technologies.

        This should be used if there are multiple pickers on the same page.
      </description>
    </attribute>
    <attribute>
      <name>baseFieldName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Base name of the picker fields in the form.
        The default value is "bbDateTimePicker".
        If there are more than one date or date range pickers per page,
        then mandatory unique naming is required for the baseFieldName.
      </description>
    </attribute>
    <attribute>
      <name>startDateTime</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The Calendar object with which to initialize the start date and or time fields of the picker.
        If value is specified, the start date checkbox will be checked by default.
        To produce an initially empty date and or time fields, <code>null</code> may be passed.
        If the picker is required and <code>null</code> is passed, the start date time value will
        be set to default. The default is the current date and time.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>endDateTime</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The Calendar object with which to initialize the end date and or time fields of the picker.
        If value is specified, the end date checkbox will be checked by default.
        To produce an initially empty date and or time fields, <code>null</code> may be passed.
        If the picker is required and <code>null</code> is passed, the end date time value will
        be set to default. The default is the current date and time.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>showDate</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether to show the date field for both
        the start and end dates. Default value is true.
      </description>
    </attribute>
    <attribute>
      <name>showTime</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether to show the time field for both
        the start and end dates. Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>showStartCheckbox </name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether a checkbox should be rendered associated with the
        start date/time field(s). Default value is true.
        If false, the start date time input is required cannot be empty.
      </description>
    </attribute>
    <attribute>
      <name>showEndCheckbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether a checkbox should be rendered associated with the
        end date/time field(s). Default value is true.
        If false, the end date time input is required cannot be empty.
      </description>
    </attribute>
    <attribute>
      <name>startCaption</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional localized text string associated with the start check box.
        Default text that is displayed: "Display Until".
      </description>
    </attribute>
    <attribute>
      <name>endCaption</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional localized text string associated with the end check box.
        Default text that is displayed: "Display After".
      </description>
    </attribute>
    <attribute>
      <name>uncheckCheckboxes </name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether both the start and end date/time checkboxes
        should default to the off (unchecked) state even if the start and or end dates
        have been passed in. Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>uncheckStartCheckbox </name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether the start date/time checkbox
        should default to the off (unchecked) state even if the start date
        has been passed in. Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>uncheckEndCheckbox </name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether the end date/time checkbox
        should default to the off (unchecked) state even if the end date
        has been passed in. Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>filterFutureYears</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to decide whether to restrict the selection of the date and or time to
        less than or equal to the current date and or time. Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>suppressInstructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to suppress the all of default instruction text that appears beside the date fields.
        Default is false.
      </description>
    </attribute>
    <attribute>
      <name>suppressEndInstructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional setting to suppress the only the default instruction text that appears beside the end date field.
        Default is false.
      </description>
    </attribute>
    <attribute>
      <name>externalValidateJsCallback</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
          The name of the javascript callback function to call when validating the date/time.
          The function must return a boolean; 'true' if the validation is successful, or 'false'
          if the validation fails.  The callback function should have three parameters. They are:
          (1) date type : Valid date types are 'start', 'end' or empty string. date type could be
                an empty string in the case: a single DatePicker is used.
          (2) picker type :  Valid picker types are 'datePicker' and 'timePicker'.
          (3) the date object as a string.
          <p>
            Example usage found in edit_announcement.jsp: <br>
            function announcementValidate ( dateType, pickerType, dateObjStr ) <br>
          </p>
        ]]>
      </description>
    </attribute>
  </tag>
  <tag bb:public="true">
    <name>formatMixedContentDate</name>
    <tag-class>blackboard.servlet.tags.FormatMixedContentDateTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Parses a string containing dates, and formats the dates per bb standards
    </description>
    <attribute>
      <name>text</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The mixed content string to format
      </description>
    </attribute>
  </tag>
  <tag bb:public="true">
    <name>formatDate</name>
    <tag-class>blackboard.servlet.tags.FormatDateTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Format a date based on Bb standards
    </description>
    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The name of the page scope variable to hold the result. If not specified, the
        formatted date is directly written in the out stream.
      </description>
    </attribute>
    <attribute>
      <name>date</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.Date</type>
      <description>
        The date to format.  At least this or calendar is required
      </description>
    </attribute>
    <attribute>
      <name>calendar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.Calendar</type>
      <description>
        The calendar to format/  At least this of date is required
      </description>
    </attribute>
    <attribute>
      <name>showTime</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Should the time be included in the rendering?</description>
    </attribute>
    <attribute>
      <name>showDate</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Should the date be included in the rendering?</description>
    </attribute>
    <attribute>
      <name>dateStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The style used to display the date
      </description>
    </attribute>
    <attribute>
      <name>timeStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The style used to display the time
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>filePicker</name>
    <tag-class>
       blackboard.servlet.tags.ngui.picker.FilePickerTag
    </tag-class>
    <tei-class>blackboard.servlet.tags.ngui.picker.BaseListBasedPickerTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      <P>
      This tag creates a file picker.  Files can be chosen either locally or from the content system (depending on
      the setting chosen).
      </P>
      <P>
      If the "allowMultipleFiles" option is true, one or more filePickerListElement or pickerListElement tags
      must be specified as child tags to determine which columns show up in the "already attached files" table.
      </P>
      <B>Manipulating the filePicker widget via javascript:</B>
      <P>
      If you wish to manipulate the filePicker widget with javascript,
      there are convenience methods to do so in <code>widget.js</code>. FilePicker
      javascript prototype objects on a page can be accessed via the method
      <code>widget.FilePicker.getFilePicker(baseElementName)</code> where baseElementName
      is the value passed into the tag for the attribute of the same name. The full list of
      methods accessible on the returned object are defined in <code>widget.FilePicker.prototype</code>
      in the file <code>widget.js</code>.
      </P>
      ]]>
    </description>
    <attribute>
      <name>mode</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        What mode the picker is in:
        <ul>
        <li><code>READ_ONLY</code> - list attached files</li>
        <li><code>LOCAL_FILE_ONLY</code> - only pick local files</li>
        <li><code>CS_FILE_ONLY</code> - only pick CS files</li>
        <li><code>CS_FILE_OR_URL</code> - picker either CS files for URLs</li>
        <li><code>LOCAL_OR_CS_FILE</code> - pick either local or CS files ( default )</li>
        <li><code>LOCAL_OR_CS_OR_URL</code> - pieck, local, CS files, or URLs</li>
        <li><code>INLINE_SINGLE_LOCAL_FILE_ONLY</code> - choose a single local file (shown inline, doesn't create extra data elements)</li>
        <li><code>INLINE_SINGLE_CS_FILE_ONLY</code> - choose a single CS file (shown with input data element and CS file browse button.)</li>
        </ul>
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>baseElementName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The base name for the picker elements.
        The local picker element will be this name appended with "_LocalFile"
        The CS picker element will be this name appended with "_CSFile"
      </description>
    </attribute>
    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether a file is required to be picked.
      </description>
    </attribute>
    <attribute>
      <name>allowMultipleFiles</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.Boolean</type>
      <description>
        True if this picker is used with an "Add Another File" button false if this picker
        can only be used to choose one file (default: false)
      </description>
    </attribute>
    <attribute>
      <name>attachedFiles</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.List</type>
      <description>A list of attached files/links. File objects must conform to the FilePickerFile interface.</description>
    </attribute>
    <attribute>
      <name>var</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
      <description>Variable to expose the current attached file to in the picker list elements.</description>
    </attribute>
    <attribute>
      <name>overrideLocalBehavior</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.Boolean</type>
      <description>Enables CS override of local behavior.</description>
    </attribute>
    <attribute>
      <name>showLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether an option to specify the link name of the file should be provided.  Default true.</description>
    </attribute>
    <attribute>
      <name>showSpecialAction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether a 'special actions' field of the picker should be provided.  Default false.</description>
    </attribute>
    <attribute>
      <name>showAddMetadata</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether the "Submit and add metadata" functionality should be enabled in the content system picker.  Default false.</description>
    </attribute>
    <attribute>
      <name>principal</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Represents an optional attribute which provides Permission principal for CS integration.
      </description>
    </attribute>
    <attribute>
      <name>pickerMode</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Specific for CS browsing capabilities. Identifies what filtering (if any)
        should be applied to the rendering of CS elements.
        One of three possibilities.
        FOLDER : CS picker should show CS folders only.
        FILE   : CS picker should show CS files only.
        FILE_AND_FOLDER : CS pickers shows both files and folders.

        Default FILE.
      </description>
    </attribute>
    <attribute>
      <name>pickerMimeType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Specific for CS browsing capabilities. Manages filtering of CS elements
        based on Mime media types. The media types represents content types and associated sub types.
        i.e. image is a content type with bmp/jpeg/png as sub types.
        Full specification listed at http://www.ietf.org/rfc/rfc2046.txt?number=2046.

        Support includes the following
        IMAGE : Images files including types bmp, jpeg, png...
        AUDIO   : Only files including types midi, wma, wav...
        VIDEO : Only files including types wmv, qt, mpg...
        Default Unspecified, no filtering applied by default.
      </description>
    </attribute>
    <attribute>
      <name>attachLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized label for the "Attach File" element.  Defaults to "Attach File"
      </description>
    </attribute>
    <attribute>
      <name>selectedLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized label for the "Selected File" element.  Defaults to "Selected File"
      </description>
    </attribute>
    <attribute>
      <name>currentLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized label for the "Currently attached files" element.  Defaults to "Currently attached files"
      </description>
    </attribute>
    <attribute>
      <name>doNotAttachLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized label for the "Do not attach" element.  Defaults to "Do not attach"
      </description>
    </attribute>
    <attribute>
      <name>bypassStepCheck</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set to true if you really are in a step tag that is declared in another jsp where
        the current jsp is included via jsp:include (so this taglib will not see the steptag
        as a parent tag).  If true then we will not fail the page rendering when a parent
        StepTag is not found.
        Defaults to "false"
      </description>
    </attribute>
    <attribute>
      <name>editableField</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set to true if you really want text field should be editable field.
        Defaults to "true"
      </description>
    </attribute>
    <attribute>
      <name>onAttachFile</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Javascript callback function triggered when a new file is attached.
        Note: This event will only be triggered when allowMultipleFiles is true.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty when mode
        is set to "READ_ONLY". The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>copyToPrivateDoc</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set to true causes the attachment being copied into private store and the course comtent
        links to the copy. Default to "false".
      </description>
    </attribute>
    <attribute>
      <name>startingFolderPath</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set to specify the starting folder path for the file picker.  This value will be ignored
        if the specified folder cannot be found or is not viewable by the user performing the
        operation.
      </description>
    </attribute>
    <attribute>
      <name>searchingPath</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set to specify the folder path for search.  This value will be ignored
        if the specified folder cannot be found or is not viewable by the user performing the
        operation.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>filePickerListElement</name>
    <tag-class>
    blackboard.servlet.tags.ngui.picker.FilePickerListElementTag
    </tag-class>
    <body-content>empty</body-content>
    <description>
     Renders one of the default file picker list columns
    </description>
    <attribute>
     <name>type</name>
     <required>true</required>
     <rtexprvalue>true</rtexprvalue>
     <description>
      The type of column to display.  Must be the string representation of one of the
      enum constants in FilePickerListElementTag.Type.
      NOTE: If the parent tag is in read only mode FilePickerTag.READ_ONLY and this
      tag uses Type.REMOVE or Type.FILE_ACTION_ALWAYS - the rendering for the
      corresponding filePickerListElement will be ignored.
     </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Width of the column.
      </description>
    </attribute>
    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Alignment of the column.  Should be one of:
         - natural
         - center
         - inverse

        If not specified, will default to "natural"
      </description>
    </attribute>
    <attribute>
      <name>headerStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional parameter indicating the CSS style to apply to the table header cells.

        Default: No style
      </description>
    </attribute>
    <attribute>
      <name>cellStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional parameter indicating the CSS style to apply to the table data cells.

        Default: No style.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Required for CUSTOM columns.  Represents the column title.</description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Required for CUSTOM columns.  Represents the column ID.</description>
    </attribute>
    <attribute>
      <name>cellGeneratorFunction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Required for CUSTOM columns.

        The fully qualified name of a javascript function that will be used to dynamically generate
        the HTML for this cell (when a row is added in the browser).
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>multiUserPicker</name>
    <tag-class>blackboard.servlet.tags.ngui.picker.MultiUserPickerTag</tag-class>
    <body-content>JSP</body-content>
    <description>This tag provides a browse button to search and select Users. Only allows for button, no additional list generation allowing rendering customizations.</description>
    <attribute>
      <name>javascriptName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The Javascript callback function defined by the opener. Function takes an array of objects as parameter.</description>
    </attribute>
    <attribute>
      <name>selectMultiple</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A boolean indicating whether the search page should allow for multiple Users to be selected.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>An optional label when display type is LINK or BUTTON. Default = "Browse"</description>
    </attribute>
    <attribute>
      <name>elementId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>An optional element id for the rendered Html element</description>
    </attribute>
    <attribute>
      <name>displayType</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Choice of rendering element: BUTTON, LINK, HREF, INLINE_ACTION, NONE.
        BUTTON => input type="button"
        LINK => the &lt;a&gt; tag
        INLINE_ACTION => the &lt;a&gt; tag with inlineAction style
        HREF => plain text URL for use by page
        NONE => URL is set in request scope under key BasePickerTag.REQUEST_ATTRIBUTE_KEY
      </description>
    </attribute>
    <attribute>
      <name>checkSysRoleEntitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An optional attribute indicating whether to check system role
        entitlement.  If true, then only those users with system roles
        that contain the appropriate entitlement will be able to view
        results.  If false, then any user will be able to view all results
        that match the search criteria.  The default value is true.
      </description>
    </attribute>
    <attribute>
      <name>hideGuest</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An optional attribute indicating whether to filter
        the 'guest' account from the results".  The default value is false.
      </description>
    </attribute>
    <attribute>
      <name>entitlementFilter</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Only include users who have this entitlement.
      </description>
    </attribute>
    <attribute>
      <name>enrollType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Enrollment Type: Enrolled, UnEnrolled, All.
        Enrolled => Search returns enrolled users in Course/Organization context.
        UnEnrolled => Search returns un-enrolled users in Course/Organization context.
        All => Search returns all users.

        Default: All
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>pickerListElement</name>
    <tag-class>
        blackboard.servlet.tags.ngui.picker.PickerListElementTag
    </tag-class>
    <body-content>JSP</body-content>
    <description>
        This tag both defines and renders a column in a picker list.
        The body of the element will be evaluated for each item in the list.
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique id for the column
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized title for the column.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Width of the column.
      </description>
    </attribute>
    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Alignment of the column.  Should be one of:
         - natural
         - center
         - inverse

        If not specified, will default to "natural"
      </description>
    </attribute>
    <attribute>
      <name>cellGeneratorFunction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified name of a javascript function that will be used to dynamically generate
        the HTML for this cell (when a row is added in the browser).

        The arguments passed to this function vary depending on the type of picker.

        If this attribute is not specified, the "widget.PickerList.noopGenerator" function from widget.js
        will be used (it returns an empty cell)
      </description>
    </attribute>
    <attribute>
      <name>headerStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional parameter indicating the CSS style to apply to the table header cells.

        Default: 'smallCell'
      </description>
    </attribute>
    <attribute>
      <name>cellStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional parameter indicating the CSS style to apply to the table data cells.

        Default: No style.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>mashupPicker</name>
    <tag-class>
        blackboard.servlet.tags.ngui.picker.MashupPickerTag
    </tag-class>
    <body-content>empty</body-content>
    <description>
        This tag renders a Flyout menu with a list of links to create available mashup items.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique id for the picker menu.
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Type of mashup items to display.  Default: All Mashups.

        The valid values are:
        * image
        * video
        * audio
        * file
        * all
      </description>
    </attribute>
    <attribute>
      <name>courseId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Id of the current course.
      </description>
    </attribute>
    <attribute>
      <name>contentId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Id of the content folder that the mashup item will be created in.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>nodePicker</name>
    <tag-class>
      blackboard.servlet.tags.ngui.picker.NodePickerTag
    </tag-class>
    <tei-class>blackboard.servlet.tags.ngui.picker.BaseListBasedPickerTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      Renders a multi-institution node picker.
      <p>
      One or more of <code>nodePickerListElement</code> or <code>pickerListElement</code> tags
      must be specified as child tags to determine which columns show up in the "already selected
      nodes" table. At the least, the <code>nodePickerListElement</code> of type "Name" must
      be specified.
      <p>
      A node picker must be inside a data collection step if allowMultipleNodes is true.
      ]]>
    </description>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>An optional label for the button that opens the popup. Defaults to "Find Node."</description>
    </attribute>
    <attribute>
      <name>baseElementName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The base name for the picker elements. This attribute should be specified if
        there are more than one node picker on the page. Default value is "miNodePicker".
      </description>
    </attribute>
    <attribute>
      <name>javascriptName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The Javascript callback function defined by the opener. Function takes an array of objects as parameter.
        Note that if the callback is specified the default behavior does not apply.
      </description>
    </attribute>
    <attribute>
      <name>alias</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The specified value must "Node" or "BusinessUnit". The word Node will be replaced by the word
      corresponding to the value specified here when the picker is opened in callback mode (with a legal value for
      the attribute javascriptName). This attribute should not be used if javascriptName is not set.
      </description>
    </attribute>
    <attribute>
      <name>allowMultipleNodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.Boolean</type>
      <description>
        Set to true if the picker should allow selection of more than one node.
        Set to false if this picker can only be used to choose a single node.
        If allowMultipleNodes is set to false and if there are no nodes in the hierarchy
        Find Enity button will be shown as disabled.
        Default value is true.
      </description>
    </attribute>
    <attribute>
      <name>isRequired</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.Boolean</type>
      <description>
        Indicates if the node selection is a required field on the page.
        Default value is false.
      </description>
    </attribute>
    <attribute>
      <name>popupInstructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Bundle name and key pair for loading instructions to be displayed as the page
        instructions in the node picker pop up window, in the format "bundleName:key".
        For example, the key "course.edit.node.popup.instructions" in the <code>
        multiinst.properties</code> resource bundle will be entered as
        "multiinst:course.edit.node.popup.instructions".
        No instructions will be displayed by default.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>attachedNodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.List</type>
      <description>
        <![CDATA[
        A list of currently attached nodes, if any.
        Node objects need to be of type <code>NodePickerView</code>.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.List</type>
      <description>
        <![CDATA[
        String list of entitlements that are applied to search results in the node picker.
        The current user in context must have all of the entitlements in the
        specified list in order to be able to see and pick relevant nodes from the
        picker. The default is <code>system.multiinst.hierarchy.manager.VIEW</code>.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>var</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        Name of scripting variable to expose the currently attached node to in the picker list elements.
        This variable will be set in the page-context scope.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>nodePickerListElement</name>
    <tag-class>
      blackboard.servlet.tags.ngui.picker.NodePickerListElementTag
    </tag-class>
    <body-content>empty</body-content>
    <description>
     Renders one of the default multi-institution picker list columns.
    </description>
    <attribute>
     <name>type</name>
     <required>true</required>
     <rtexprvalue>true</rtexprvalue>
     <description>
       <![CDATA[
       The type of column to display. Must be the string representation of one of the
       enum constants in <code>NodePickerListElementTag.Type</code>.
       ]]>
     </description>
    </attribute>
    <attribute>
     <name>entitlement</name>
     <required>false</required>
     <rtexprvalue>true</rtexprvalue>
     <type>java.lang.String</type>
     <description>
       Optional. This attribute can only be used when 'type' attribute is given as 'PrimaryNode' or 'Remove'.
       User can specify the required entitlement to display this element.
     </description>
    </attribute>
    <attribute>
     <name>isPrimary</name>
     <required>false</required>
     <rtexprvalue>true</rtexprvalue>
     <type>java.lang.Boolean</type>
     <description>
       Optional. This value is valid if the 'type' attribute is given as 'PrimaryNode'.
       This will set the radio element checked, when value is 'true'. Default value is 'false'.
     </description>
    </attribute>
    <attribute>
     <name>disableRadioButton</name>
     <required>false</required>
     <rtexprvalue>true</rtexprvalue>
     <type>java.lang.Boolean</type>
     <description>
       Optional. This value is valid if the 'type' attribute is given as 'PrimaryNode'.
       This will disable the radio element, when value is 'true'. Default value is 'false'.
     </description>
    </attribute>
  </tag>

  <!-- Licensecomponent tag -->
  <tag bb:public="true">
    <name>ifLicensed</name>
    <tag-class>blackboard.servlet.tags.IfLicensedTag</tag-class>
    <body-content>JSP</body-content>
    <description>Include body if specified component is licensed.</description>
    <attribute>
      <name>component</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.platform.LicenseComponent</type>
      <description>The component</description>
    </attribute>
  </tag>

  <!-- Mini-list tags -->
  <tag bb:public="true">
    <name>miniList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.MiniListTag
    </tag-class>
    <tei-class>blackboard.servlet.tags.ngui.picker.BaseListBasedPickerTei</tei-class>
    <body-content>JSP</body-content>
    <description>
        This tag displays a "mini-list" data list.  Columns are defined
        as child elements using the miniListElement tag
    </description>
    <attribute>
      <name>var</name>
      <required>true</required>
      <rtexprvalue>false</rtexprvalue>
      <description>Variable to expose the current attached file to in the miniListElements.</description>
    </attribute>
    <attribute>
      <name>items</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>List of items to loop through as rows of the list.</description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
      Fully qualified class name of the type of objects in the items list.  If not
      specified, java.lang.Object will be used.
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The list description that will be used for the summary of the table that
        contains this mini-list. The description helps users browsing with accessibility
        tools quickly understand what kind of information is in the list table.
        The default summary for the table is: "This is a table showing the attributes of a collection of items."
      </description>
    </attribute>
    <attribute>
      <name>rowHeaderId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Id of the <code>miniListElement</code> child tag that should be used as the row header
        in this mini list table. The one chosen as the row header element should be the one containing
        the most representative information of the object represented in the row.
        For example, in a row with "Name", "Age", "Weight", and "Height", the id of the
        <code>miniListElement</code> tag containing the "Name" should be the id to set here.
        This attribute is for accessibility compliance, and must be set.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>jsListVarName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Required if list is reorderable.
      Name of a global javascript variable to expose the dynamic list object as.

      For example, if this variable is given the value "foo", you can add a row to the table
      in the client-side javascript by calling foo.addRow(......);  The values that are passed
      to the addRow function depend on the parameters that your cell generator functions from the
      miniListElement tags take.

      </description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this minilist is reorderable.  Default: false
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to persist the drag and drop.  If no immediate server-side changes
        are necessary, this can be left blank and you can handle the reordering for example on page submit.

        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>itemIdAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as an
        id for each table row. This attribute must be set for a
        reorderable list. If more than one method need to be called in
        sequence, "." should be used as a delimiter. The first method
        in the attribute will be called against each object in the
        collection. Then subsequent methods will be called against the
        return value of the previous method call. All the methods
        specified in the attribute must be accessible and the return
        type of the final method must be String. No argument passing
        and type casting will be done during methods invocation. For
        example, if your collection object is
        "blackboard.data.discussionboard.Conference" and the attribute
        is "getId.getExternalString",
        Conference.getId().getExternalString() will be invoked using
        java reflection.
      </description>
    </attribute>
    <attribute>
      <name>itemNameAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as the
        name of a reorderable item in accessible reordering controls.
        This attribute must be set for a reorderable list. See the
        description of reorderableItemIdAccessor attribute.
      </description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the reordering struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Flag indicating whether tag is to be displayed in read only mode. Accepted values: "true"
        or "false". Default: false.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty when readOnly
        attribute is set to "true". The default message is "No items found."
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>miniListElement</name>
    <tag-class>
        blackboard.servlet.tags.ngui.picker.PickerListElementTag
    </tag-class>
    <body-content>JSP</body-content>
    <description>
        This tag both defines and renders a column in a mini list.
        The body of the element will be evaluated for each item in the list.
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique id for the column
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Localized title for the column.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Width of the column.
      </description>
    </attribute>
    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Alignment of the column.  Should be one of:
        <ul>
          <li>natural</li>
          <li>center</li>
          <li>inverse</li>
        </ul>
        If not specified, will default to "natural".
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>cellGeneratorFunction</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified name of a javascript function that will be used to dynamically generate
        the HTML for this cell (when a row is added in the browser).

        The arguments passed to this function vary depending on the type of picker.

        If this attribute is not specified, the "widget.PickerList.noopGenerator" function from widget.js
        will be used (it returns an empty cell)
      </description>
    </attribute>
    <attribute>
      <name>headerStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional parameter indicating the CSS style to apply to the table header cells.

        Default: 'smallCell'
      </description>
    </attribute>
    <attribute>
      <name>cellStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional parameter indicating the CSS style to apply to the table data cells.

        Default: No style.
      </description>
    </attribute>
    <attribute>
      <name>headerStickyNote</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional localized message to be shown associated with the entire column, as a means
        to bring attention to the user, some peculiar information regarding the contents of
        the column.
      </description>
    </attribute>
  </tag>

  <!-- Content List Tags -->

  <tag bb:public="true">
    <name>contentList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.contentlist.ContentListTag
    </tag-class>
    <body-content>JSP</body-content>
    <description>
        This is a scaffolding tag for the body of a Content List page.
        The only children of this tag should be contentListItem tags.
    </description>
    <attribute>
      <name>designer</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this content list should be rendered in design more (e.g. with drag and drop)
        Default value: false.
      </description>
    </attribute>
    <attribute>
      <name>displayMode</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The mode that the list should be rendered in.  Must be the string representation of one
        of the ContentListTag.DisplayMode enum values.
        Default value: iconAndText (DisplayMode.iconAndText)
      </description>
    </attribute>
      <attribute>
      <name>displayIndividualContentItem</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
       Default value: false, If set to true, render cotentItems in the contentlist tag individually
      </description>
    </attribute>
    <attribute>
      <name>contentItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A List of blackboard.data.content.Content that are the content items that should be
        shown by the tag.  This can be used instead of manually specifying content list item tags.
      </description>
    </attribute>
    <attribute>
      <name>contentIdsWithRules</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A List of Ids for the content items that have availability rules associated with them
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to to persist the drag and drop.
        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if designer is true.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This value is used to specify that content list rendering should be done
        for a specific type of object.  This can be used to tailor behavior or
        styling.  See ContentListTag.Type for the list of available types.  If
        this value is not provided it defaults to ContentListTag.Type.Content.
      </description>
    </attribute>
    <attribute>
      <name>mayBeNested</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: true
        If you know that this canvas is not going to contain any nested draggable areas
        then you can set this parameter to false to speed up the drag/drop UI interaction
      </description>
    </attribute>
    <attribute>
      <name>collapseExpandFolderId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Provides the ID of the ContentFolder containing the content items being listed.  Setting this
        parameter implicitly enables display of collapse/expand icons for each content item.
      </description>
    </attribute>
    <attribute>
      <name>listId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this list. Must be unique within the page. If there is more than one contentList
        per page, then this field is mandatory. The default value is "content_listContainer".
      </description>
    </attribute>
    <attribute>
      <name>enablePaging</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: false. If set to true, the contents of this list will be paged.
      </description>
    </attribute>
    <attribute>
      <name>displayPagingControls</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: true, but if set to false then the paging controls will not be displayed
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        URL of current page -- used for submissions for paging actions.
      </description>
    </attribute>
    <attribute>
      <name>pagedRecordCount</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Provides the size of the current data set. When the content list is paged,
        this may differ from the value of the full recordCount.
      </description>
    </attribute>
    <attribute>
      <name>recordCount</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Provides the size of the full (unpaged) list.
      </description>
    </attribute>
    <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         Css class which will be applied to the html contained in list action bar.
      </description>
    </attribute>

  </tag>

  <tag bb:public="true">
    <name>contentListItem</name>
    <tag-class>
      blackboard.servlet.tags.ngui.contentlist.ContentListItemTag
    </tag-class>
    <body-content>JSP</body-content>
    <description>
      This tag represents an item in a content list.
      It can optionally contain a delegateContextMenu tag which will render a
      context menu next to the title of the item. The content of the item should be
      specified in the body of the tag, and can contain any HTML/other jsp tags.
      It can also optionally contain a contentListItemOppositeHtml tag to set
      the opposite-html element
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Title of the content list item.
      </description>
    </attribute>
    <attribute>
      <name>titleColor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Color of the title.
      </description>
    </attribute>
    <attribute>
      <name>titleSpanClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Wraps title with provided span class.
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        URL that the title should link to. If this attribute is not specified,
        then no link will be added.
      </description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional URL to the icon that should be shown for this item.  If no iconUrl is specified,
        no icon will be shown for the item.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An id that uniquely identifies the item (e.g. the database id of the item ).
        This will be used to identify the order of the items when reordering them.
      </description>
    </attribute>
    <attribute>
      <name>oppositeSideHtml</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A block of html to render on the right hand side of the title line for this item
      </description>
    </attribute>
    <attribute>
      <name>htmlAfterTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A block of html to render just after the title for this item
      </description>
    </attribute>
    <attribute>
      <name>detailsExtraStyle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Defaults to null (no extra style).  Can be used to add an initial style to the details div - typically
        it is expected to be used as detailsExtraStyle="display:none" to hide the details on page load.
      </description>
    </attribute>
    <attribute>
      <name>sampleContent</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Defaults to false (not sample content).  Set to true to render the content with the sample-content styling.
      </description>
    </attribute>
    <attribute>
      <name>newWindow</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Defaults to false (do not set target attribute to "_blank").  Set to true to open a link in a new window.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>contentListItemOppositeHtml</name>
    <tag-class>
      blackboard.servlet.tags.ngui.contentlist.ContentListItemOppositeHtmlTag
    </tag-class>
    <body-content>JSP</body-content>
    <description>
      This tag represents the 'opposite-html' for an item in a content list.  It will set
      the opposite-html block for the parent contentMenuItem with the body of this tag.
    </description>
  </tag>

  <tag>
    <name>learningUnitToc</name>
    <tag-class>
      blackboard.servlet.tags.ngui.learningUnit.LearningUnitTocTag
    </tag-class>
    <body-content>empty</body-content>
    <description>
      This tag displays the content of a learning unit (Lesson object) as a
      hierarchical folder view with expand/collapse functionality
    </description>
    <attribute>
      <name>helper</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An instance of LearningUnitNavigationHelper that holds the data for the
        learning unit to display.  The current page should be set prior to be
        passed to the tag.
      </description>
    </attribute>
    <attribute>
      <name>instructorView</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The learning unit TOC can operate in one of two modes: student view (the
        default) and instructor view. These two views employ different rules for
        what actually shows and how it shows.  To enable instructor view this
        property must be explicitly set to true.
      </description>
    </attribute>
    <attribute>
      <name>expandAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This value determines whether the tree nodes contained within the TOC
        are all expanded on render.  If true, then the full tree of items will
        be expanded, if false, then items will be expanded or collapsed
        according to information stored within the session (i.e., previously
        set state for these nodes).  The default value is false.
      </description>
    </attribute>
    <attribute>
      <name>location</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An instance of TocLocation.  Determines the initial location in which
        the TOC should render.  If a value is not provided then a default value
        of bottom will be used.
      </description>
    </attribute>
    <attribute>
      <name>size</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An instance of TocSize.  Determines the initial size of the TOC.  If a
        value is not provided then a default value of normal (not minimized or
        maximized) will be used.
      </description>
    </attribute>
    <attribute>
      <name>warning</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A warning message that should be displayed to the user in the event that
        they click on one of the provided navigation controls within the table
        of contents.  This will take the form of a confirmation message
        displayed to the user.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>learningUnitNavControls</name>
    <tag-class>
      blackboard.servlet.tags.ngui.learningUnit.LearningUnitNavControlsTag
    </tag-class>
    <body-content>empty</body-content>
    <description>
      This tag displays navigation controls for a learning unit (Lesson object).
      This consists of previous/next buttons as well as page information.
    </description>
    <attribute>
      <name>helper</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An instance of LearningUnitNavigationHelper that holds the data for the
        learning unit to display.  The current page should be set prior to be
        passed to the tag.
      </description>
    </attribute>
    <attribute>
      <name>warning</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A warning message that should be displayed to the user in the event that
        they click on one of the provided navigation controls.  This will take
        the form of a confirmation message displayed to the user.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>searchResultList</name>
    <tag-class>
      blackboard.servlet.tags.ngui.list.SearchResultListTag
    </tag-class>
    <body-content>scriptless</body-content>
    <description>
      Generic search results list. It will loop over its body for each item in the items passed in.  It will also
      create paging controls based on the total results, current page, and results per page arguments.

      Note that the number of items in the {@code items} parameter does not have to have
      any relation to the numbers used for constructing the paging information and vice
      versa.  All items in the {@code items} list are iterated over, even if there are more
      than should logically be on the current page given the paging arguments.

      You can pass in one or more filters in the filters argument to generate filtering drop-downs for
      the list. See the SearchResultFilter class for more information.
    </description>
    <attribute>
      <name>items</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       List of items in the current page. The tag's body will be invoked once for each item in this list.
      </description>
    </attribute>
    <attribute>
      <name>var</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Variable name (put in the PageContext) to expose the current item as.
      </description>
    </attribute>
    <attribute>
      <name>filters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       A list of SearchResultFilter objects that define any filters to filter the search results.
       See the SearchResultFilter class for more information.
      </description>
    </attribute>
    <attribute>
      <name>onFilterSubmit</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       JavaScript to run when the "GO" button is clicked next to the filters.  This will do nothing
       if nothing is specified in the filters attribute.
      </description>
    </attribute>
    <attribute>
      <name>basePagingUrl</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Base URL to use when constructing the paging links.  Two additional parameters: resultsPerPage,
       and pageIndex will be appended to this URL.  The pageIndex will be the index of the page to go
       to.
      </description>
    </attribute>
    <attribute>
      <name>totalResults</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Total number of results in the search results.  Used to construct paging widget.
      </description>
    </attribute>
    <attribute>
      <name>currentPage</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The current page (1-indexed.)  Used to construct paging widget.
      </description>
    </attribute>
    <attribute>
      <name>resultsPerPage</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Number of results shown per page.  Used to construct paging widget.
      </description>
    </attribute>
    <attribute>
      <name>allowEditPaging</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Flag to allow editing paging parameters. Default is false.
      </description>
    </attribute>
    <attribute>
      <name>allowShowAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Flag to allow the Show All button to appear.  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       An optional CSS class to apply to the button.
      </description>
    </attribute>
  </tag>

  <!-- Inventory List Tags -->

  <tag bb:public="true">
    <name>inventoryList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.InventoryListTag
    </tag-class>
    <tei-class>
        blackboard.servlet.tags.ngui.list.InventoryListTei
    </tei-class>
    <body-content>JSP</body-content>
    <description>
      This is a scaffolding tag for an inventory list page and must
      contain at least one list element. It creates an inventory
      list used for displaying a collection of objects and its
      attributes. Given a collection of objects, the paging
      navigation will be automatically displayed. The initial number
      of items per page is 25. This number is editable on the UI if
      given a list options tag. In addition, there must be exactly
      one list element tag in the body of this tag that has
      isRowHeader=true. The list element most representative of the
      rest of the attributes in the row should be designated as the
      row header (For example, with Name, Age, Weight, and Height,
      the Name should have isRowHeader=true).
      A custom event 'bb:activeFilterCallback' has been added for criteria
      integration. It is fired in the event that the list is refreshed via
      AJAX while selecting various critieria components. This allows the
      user to apply various UI customizations employed during the original rendering.
    </description>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection of objects passed to the list to be displayed.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified class name of the objects in the collection.
      </description>
    </attribute>
    <attribute>
      <name>objectVar</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to represent a single object in the collection.
        This is used in the list element tags to set the attribute of the
        object to display. Coding naming standards should be followed here,
        for example, do not have a space in your variable name.
      </description>
    </attribute>
    <attribute>
      <name>shoppingCart</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether this list should behave as a shopping cart. In shopping
        cart mode the check boxes are coupled with a page state 'the drawer'. When
        an element is checked it is added to the drawer, and if removed from the
        drawer it is also unchecked from the list. Drawer state survives page refresh
        and, once the list is displayed, its check boxes are updated to match the current
        state of the drawer.
      </description>
    </attribute>
    <attribute>
      <name>searchCriteria</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Search criteria used to populate the list and render the active filter UI component.
        When the active filter is modified, it will send an ajax request to the server with
        the modified search criteria.  The server renders and returns a new page using the
        modified search criteria via ajax.  The active filter and list ui components are then
        extracted and rendered in the designated div tag.  Active filter state is preserved.
        This same process is invoked for these additional page actions: paging (prev/next),
        refresh, and list sorting.Hence, if searchCriteria is specified it will always render
        the inventory list in ajax mode. All page refreshes via the active filter, sorting
        list columns, paging list results will happen via ajax post.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>emptyMsgCustomClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        If desired, an additional css class can be specified here to use in addition to 'noItems'
        when rendering the emptyMsg div.
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The list description that will be used for the summary of the table that
        contains this list. The description helps users browsing with accessibility
        tools quickly understand what kind of information is in the list table.
        The default summary for the table is: "This is a table showing the
        attributes of a collection of items."
        Note: the contents of this attribute must be html escaped by using bbNG:HtmlEscape.
      </description>
    </attribute>
    <attribute>
      <name>showDescriptionAsHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default Value: false.
        If set to true then the list description will also be shown as a visible header before the table.
        Note: If the list is empty this title will not be shown, regardless of this value
      </description>
    </attribute>
    <attribute>
      <name>initialSortCol</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The column to initially sort by when the list is displayed.
        The value should match the name of a list element. Furthermore, the list element in question
        also needs to have a bbNG:beanComparator tag specified.
      </description>
    </attribute>
    <attribute>
      <name>initialSortBy</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial direction of sort of the initial sort column.
        Accepted values are ASCENDING and DESCENDING.
        The default is sort by ascending.
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url of current page to be used in inventory list links like sort and paging.
      </description>
    </attribute>
    <attribute>
      <name>includePageParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Flag denoting whether to include page parameters in the list urls. When set to false,
        only list tag related params will be appended to the provided url or the one obtained
        from request.
        Default value is true, therefore unless some hidden input should be carried
        forward to next pages, such as search parameters, it is recommended to consider
        setting this value to false. Also, if a page has input that is too long and should
        not be appended to url, such as textbox or formatted text description, or can be
        reached from another action as forward, this attribute may need to be set to false.
      </description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this inventory list is reorderable.  Default: false
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to persist the drag and drop.
        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>itemIdAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as an
        id for each table row. This attribute must be set for a
        reorderable list. If more than one method need to be called in
        sequence, "." should be used as a delimiter. The first method
        in the attribute will be called against each object in the
        collection. Then subsequent methods will be called against the
        return value of the previous method call. All the methods
        specified in the attribute must be accessible and the return
        type of the final method must be String. No argument passing
        and type casting will be done during methods invocation. For
        example, if your collection object is
        "blackboard.data.discussionboard.Conference" and the attribute
        is "getId.getExternalString",
        Conference.getId().getExternalString() will be invoked using
        java reflection.
      </description>
    </attribute>
    <attribute>
      <name>itemNameAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as the
        name of a reorderable item in accessible reordering controls.
        This attribute must be set for a reorderable list. See the
        description of reorderableItemIdAccessor attribute.
      </description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>showAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute for displaying the all items in the list. The default is false for
        showing all items.
      </description>
    </attribute>
    <attribute>
      <name>limitMaxNumOfItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP12; ignored by the application.]]>
        Boolean attribute to indicate whether maximum number of items in the list is limited. "bbconfig.page.results.size.max"
        dictates the maximum number.
      </description>
    </attribute>
    <attribute>
      <name>disableInteractivity</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[<i>deprecated</i> Since 9.1 SP12; ignored by the application.]]>
        Boolean attribute to indicate whether all the interactivity of the list is disabled.
      </description>
    </attribute>
    <attribute>
      <name>enableSelectEntireList</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute to indicate whether we can select all the items not only from currentpage, but from the whole list .
      </description>
    </attribute>
    <attribute>
      <name>renderAjax</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        <![CDATA[
        Boolean attribute for using ajax post to render the list items. The default is false, does not use ajax
        calls for subsequent paging and sorting requests or in general list results refresh. If set to true, ajax post
        requests are made, the page rendering happens in ajaxMode. All taglibs modified to work optimally in this mode
         will honor this setting in subsequent ajax posts. The taglibs that are optimized have been updated to explicitly
         state that in their taglib description.
         ]]>
      </description>
    </attribute>
    <attribute>
      <name>jsCallbackOnListLoad</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        <![CDATA[
        The name of the javascript callback function to call once the list is loaded. ie) inventoryList.callbackFncName
        It is very useful when the list gets updated/rendered in ajax mode.
         ]]>
      </description>
    </attribute>
    <attribute>
      <name>listId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The default value is "listContainer".
        Inventory list  will be [listId].
        If there are more than one inventoryLists per page,
        then mandatory unique naming is required for the listId.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>displayPagingControls</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: true, but if set to false then the paging controls will not be displayed
      </description>
    </attribute>
    <attribute>
      <name>pagingInfo</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Provides showAll/pageIndex/pageSize/sortCol/sortDir/recordCount informations
        about a data-set, then in the TagHelper we needn't get again. This is
        used for paging.
      </description>
    </attribute>
    <attribute>
      <name>cardView</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        @Since 9.1 SP15
        @Private This attribute is not yet ready for public-api usage
        Default: disabled
        Values: disabled,enabled,default
        disabled: Card view will not be available for this list
        enabled: Card view will be enabled, but table view will be the default
        default: Card view will be enabled and will be the default.
        When in card-view mode, a card-view of each item in the list will be shown in a ul
        instead of a table-row in a table. Table view will still be available
        (user toggle) but the default view will be as a card.
        NOTE: Usage of this option is still experimental and only those features
        which work in conjunction with this option being true are supported (i.e. Effectively Blackboard-private).
        A page level variable: currentListViewMode will reflect the current rendering mode for the list (either 'table' or 'card')
      </description>
    </attribute>
    <attribute>
      <name>cardViewDescription</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        See description for details - when this list is viewed in 'card view', if cardViewDescription is set then it
        will be used instead of description.  If cardViewDescription is not specified then description will be used for both views.
        Note: the contents of this attribute must be html escaped by using bbNG:HtmlEscape.
      </description>
    </attribute>
    <attribute>
      <name>wrappingTableClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1 SP15
      Default: ""
      If specified this css class will be added to the list of css classes for either the table (in table view) or the wrapping div (in card view)
      </description>
    </attribute>
    <attribute>
      <name>stickyId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1 SP15
      @Private This attribute is not yet ready for public-api usage
      Default: ""
      If specified then the stickyData and stickyDuration attributes will be utilized to determine which properties to retain per user.
      The type of properties retained is described by stickyData and the length of time for which they are retained is described by stickyDuration.
      If multiple instances of an inventoryList use the same stickyId then they will share the stickyData (so make sure you only share stickyIds
      where it makes logical sense to do so)
      </description>
    </attribute>
    <attribute>
      <name>stickyData</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1 SP15
      @Private This attribute is not yet ready for public-api usage
      Default: ""
      Ignored if stickyId or stickyDuration is not set.
      This is a comma separated list of types of data which will be kept (for stickyDuration) associated with the current user and (stickyId).
      Current supported types (without the quotes):
      * "view" ==> Retains the last user choice of card or table view.  Only applicable if cardView is set to enabled or default.
      </description>
    </attribute>
    <attribute>
      <name>stickyDuration</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1 SP15
      @Private This attribute is not yet ready for public-api usage
      Default: ""
      Ignored if stickyId or stickyData is not set.
      Defines the duration for which the user's last choices (of stickyData) are persisted.  Possible values must be the string representation of one
        of the InventoryListTag.StickyDuration enum values and are (without the quotes):
      * "bbSession" ==> Stored in the db associated with the user's logged in session.  Will be retained until they logout
      * "permanent" ==> Stored in the db as a user preference.  Will be retained until the user makes a different choice (for stickyData within this same stickyId)
      </description>
    </attribute>
    <attribute>
      <name>isActiveFilterInitialFocusOnTitleBar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether to set the initial page focus for an active filter list page onto the page title.
        This attribute is only applicable when the 'searchCriteria' attribute is used. The default is true.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>pagedList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.PaginationListTag
    </tag-class>
    <tei-class>
        blackboard.servlet.tags.ngui.list.InventoryListTei
    </tei-class>
    <body-content>JSP</body-content>
    <description>
      This is a scaffolding tag for an inventory list page and must
      contain at least one list element. It creates an inventory
      list used for displaying a collection of objects and its
      attributes. Given a collection of objects, the paging
      navigation will be automatically displayed. The initial number
      of items per page is 25. This number is editable on the UI if
      given a list options tag. In addition, there must be exactly
      one list element tag in the body of this tag that has
      isRowHeader=true. The list element most representative of the
      rest of the attributes in the row should be designated as the
      row header (For example, with Name, Age, Weight, and Height,
      the Name should have isRowHeader=true).
    </description>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection of objects passed to the list to be displayed.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified class name of the objects in the collection.
      </description>
    </attribute>
    <attribute>
      <name>objectVar</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to represent a single object in the collection.
        This is used in the list element tags to set the attribute of the
        object to display. Coding naming standards should be followed here,
        for example, do not have a space in your variable name.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The list description that will be used for the summary of the table that
        contains this list. The description helps users browsing with accessibility
        tools quickly understand what kind of information is in the list table.
        The default summary for the table is: "This is a table showing the
        attributes of a collection of items."
      </description>
    </attribute>
    <attribute>
      <name>initialSortCol</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The column to initially sort by when the list is displayed.
        The value should match the name of a list element.
      </description>
    </attribute>
    <attribute>
      <name>initialSortBy</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial direction of sort of the initial sort column.
        Accepted values are ASCENDING and DESCENDING.
        The default is sort by ascending.
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url of current page to be used in inventory list links like sort and paging.
      </description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this inventory list is reorderable.  Default: false
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to persist the drag and drop.
        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>itemIdAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as an
        id for each table row. This attribute must be set for a
        reorderable list. If more than one method need to be called in
        sequence, "." should be used as a delimiter. The first method
        in the attribute will be called against each object in the
        collection. Then subsequent methods will be called against the
        return value of the previous method call. All the methods
        specified in the attribute must be accessible and the return
        type of the final method must be String. No argument passing
        and type casting will be done during methods invocation. For
        example, if your collection object is
        "blackboard.data.discussionboard.Conference" and the attribute
        is "getId.getExternalString",
        Conference.getId().getExternalString() will be invoked using
        java reflection.
      </description>
    </attribute>
    <attribute>
      <name>itemNameAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as the
        name of a reorderable item in accessible reordering controls.
        This attribute must be set for a reorderable list. See the
        description of reorderableItemIdAccessor attribute.
      </description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>recordCount</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Provides actual size of live data-set.
      </description>
    </attribute>
    <attribute>
      <name>displayPagingControls</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: true, but if set to false then the paging controls will not be displayed
      </description>
    </attribute>
    <attribute>
      <name>includePageParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Flag denoting whether to include page parameters in the list urls. When set to false,
        only list tag related params will be appended to the provided url or the one obtained
        from request.
        Default value is true, therefore unless some hidden input should be carried
        forward to next pages, such as search parameters, it is recommended to consider
        setting this value to false. Also, if a page has input that is too long and should
        not be appended to url, such as textbox or formatted text description, or can be
        reached from another action as forward, this attribute may need to be set to false.
      </description>
    </attribute>
    <attribute>
      <name>pagingInfo</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Provides showAll/pageIndex/pageSize/sortCol/sortDir/recordCount informations
      about a data-set, then in the TagHelper we needn't get again. This is
      used for paging.
    </description>
  </attribute>
  <attribute>
      <name>shoppingCart</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether this list should behave as a shopping cart. In shopping
        cart mode the check boxes are coupled with a page state 'the drawer'. When
        an element is checked it is added to the drawer, and if removed from the
        drawer it is also unchecked from the list. Drawer state survives page refresh
        and, once the list is displayed, its check boxes are updated to match the current
        state of the drawer.
      </description>
  </attribute>
  </tag>

  <tag bb:public="true">
    <name>settingsPage</name>
    <tag-class>
        blackboard.servlet.tags.ngui.datacollection.SettingsPageTag
    </tag-class>
    <body-content>JSP</body-content>
    <description>Scaffolding for a settings page.  Similar to a data collection page but
    steps are not required/permitted while a stepSubmit is required.
    </description>
   </tag>

  <tag bb:public="true">
    <name>settingsPageList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.SettingsPageListTag
    </tag-class>
    <tei-class>
        blackboard.servlet.tags.ngui.list.InventoryListTei
    </tei-class>
    <body-content>JSP</body-content>
    <description>
      This is a scaffolding tag for a settings page list.  Similar to an
      inventory list except:
      a) No paging (all items will be displayed in one page)
      b) Different styles
    </description>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection of objects passed to the list to be displayed.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified class name of the objects in the collection.
      </description>
    </attribute>
    <attribute>
      <name>objectVar</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to represent a single object in the collection.
        This is used in the list element tags to set the attribute of the
        object to display. Coding naming standards should be followed here,
        for example, do not have a space in your variable name.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The list description that will be used for the summary of the table that
        contains this list. The description helps users browsing with accessibility
        tools quickly understand what kind of information is in the list table.
        The default summary for the table is: "This is a table showing the
        attributes of a collection of items."
      </description>
    </attribute>
    <attribute>
      <name>initialSortCol</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The column to initially sort by when the list is displayed.
        The value should match the name of a list element.
      </description>
    </attribute>
    <attribute>
      <name>initialSortBy</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The initial direction of sort of the initial sort column.
        Accepted values are ASCENDING and DESCENDING.
        The default is sort by ascending.
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url of current page to be used in inventory list links like sort and paging.
      </description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this inventory list is reorderable.  Default: false
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to persist the drag and drop.
        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>itemIdAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as an
        id for each table row. This attribute must be set for a
        reorderable list. If more than one method need to be called in
        sequence, "." should be used as a delimiter. The first method
        in the attribute will be called against each object in the
        collection. Then subsequent methods will be called against the
        return value of the previous method call. All the methods
        specified in the attribute must be accessible and the return
        type of the final method must be String. No argument passing
        and type casting will be done during methods invocation. For
        example, if your collection object is
        "blackboard.data.discussionboard.Conference" and the attribute
        is "getId.getExternalString",
        Conference.getId().getExternalString() will be invoked using
        java reflection.
      </description>
    </attribute>
    <attribute>
      <name>itemNameAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as the
        name of a reorderable item in accessible reordering controls.
        This attribute must be set for a reorderable list. See the
        description of reorderableItemIdAccessor attribute.
      </description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listOptions</name>
    <tag-class>
      blackboard.servlet.tags.ngui.list.ListOptionsTag
    </tag-class>
    <body-content>empty</body-content>
    <description>
      Tag that creates paging options for the current inventory
      list. Paging options include showing refresh, "Show All", and
      "Edit Paging" buttons and configuration attributes for those
      options. This tag can only be used inside an inventory list
      tag, or a content list tag.
    </description>
    <attribute>
      <name>allowRefresh</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute for showing a refresh button or not. The
        refresh button would refresh the contents of the list. The
        default is false for not showing a refresh button.
      </description>
    </attribute>
    <attribute>
      <name>allowShowAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute for displaying the Show All button and
        allowing the show all action. The default is true for
        showing a Show All button.
      </description>
    </attribute>
    <attribute>
      <name>allowEditPaging</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute for displaying the Edit Paging button
        and allowing users to enter how many items the want to see
        on the page at a time. The default is true for showing and
        allowing Edit Paging.
      </description>
    </attribute>
    <attribute>
      <name>showAllMax</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The maximum number of items to show on the page when the
        user chooses to show all, only effective when allowShowAll
        is true. This value may be set for performance reasons,
        limiting the size of the load to the page. The default is
        no maximum.
      </description>
    </attribute>
    <attribute>
      <name>pagingMax</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The maximum number of items to show on one page, only
        effective when allowEditPaging is true. The default is no
        maximum.
      </description>
    </attribute>
    <attribute>
      <name>refreshUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The url for the refresh button. This must be specified,
        and is only effective, when allowRefresh is true.
      </description>
    </attribute>
    <attribute>
      <name> displayCountAtTop</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: false, but if set to true then the total count of records is
        displayed at the top as well.
      </description>
    </attribute>
  </tag>

 <tag bb:public="true">
    <name>listOptionElementHeader</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.ListOptionElementHeaderTag
    </tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      Creates a header for to select and unselect the list option element(i.e list checkbox)
      in the list
      ]]>
    </description>
     <attribute>
      <name>selectAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Boolean attribute to show or hide the select all list option elements
      </description>
    </attribute>
     <attribute>
      <name>clearAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          Boolean attribute to show or hide the clear all list option elements
      </description>
    </attribute>
    <attribute>
      <name>legend</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          String attribute specifying the fieldset legend wrapping the set of options
      </description>
    </attribute>
  </tag>


  <tag bb:public="true">
    <name>listFilterSelectionType</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.ListFilterSelectionTypeTag
    </tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
       Creates a filter by selection type option header for list tags.
      Based on the type selected, the checkbox elements will be selected/de-selected in the list
      ]]>
    </description>
     <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       unique id of the select html element. If not provided will
       be name_id, appended with top/bot suffix value
      </description>
    </attribute>
     <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         unique name of the select html element. This is mandatory field to be given.
      </description>
    </attribute>
     <attribute>
      <name>defaultLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         The default label to begin with in the option group for the select element. If not given, the
         top element in the nameValue list will default to the first in the option group.
      </description>
    </attribute>
    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       call back js method for onblur event on the select html element
      </description>
    </attribute>
      <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       call back js method for onchange event on the select html element
      </description>
    </attribute>
      <attribute>
      <name>labelValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The list of ItemDetail objects with name and values to be dispplayed as the option group
       for the select element
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listActionBar</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.ListActionBarTag
    </tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      Creates a bar for action items that can execute functions on
      items in the list.
      <p>
      Action button items and menus may be added to the action bar.
      Buttons are added via the <code>listActionItem</code> tag. Action
      menus are added via the <code>listActionMenu</code> tag.
      The list action bar will not be shown if there is no items
      in the list with a checkbox and if those action items have
      <code>minSelected</code> attribute set to more than 0.
      </p>
      ]]>
    </description>
  </tag>

  <tag bb:public="true">
    <name>listActionMenu</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.ListActionMenuTag
    </tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      List action menu is the container for a corresponding menu item list.
      This tag is only for use within the list action bar tag.
      Action items may either be provided via the <code>items</code> attribute or
      <code>listActionItem</code> tags in the body.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        List action menu title. The menu title should be localized text.
      </description>
    </attribute>
    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        List of list action items (blackboard.servlet.data.ngui.ListActionItem) with which to
        populate the list action menu.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listActionItem</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.ListActionItemTag
    </tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      List action items are items within a list action bar. List action
      item tags may be used directly within the <code>listActionBar</code> tag, which
      will generate buttons, or within the <code>listActionMenu</code> tag, which will
      generate items inside the action menu.

      If body content is specified and the item is not in a listActionMenu,
      the contents will be displayed before the action item link.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Action item title. The title should be localized text.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        id of list item
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The URL where the item points.</description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The onClick javascript handler for the link.</description>
    </attribute>
    <attribute>
      <name>minSelected</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The minimum number of rows selected to perform the action.
        The default minimum number of selected rows is 1.
      </description>
    </attribute>
    <attribute>
      <name>contextMenuItemId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        This id is used when this action is to appear in the list context menus
        (<code>listContextMenu</code> tag). Default is empty string.
        <p>
        Specify the context menu item id here, and refer to this id in the context menu
        ordering string for this list action item to show in the context menu. See
        the list context menu tag description for more details about specifying ordering.
        <p>
        Note: List action items will not show in context menu even if referenced
        in the order string if the current row does not show a checkbox/radio
        or if <code>minSelected</code> attribute is greater than 1,
        meaning the action is meant to be executed on multiple items only.
        Remember, list checkbox columns should be added via the
        <code>listCheckboxElement</code> tag and list radio button columns should
        be added via the <code>listRadioElement</code> tag.
        <p>
        Remember, list checkbox columns should be added via the listCheckboxElement tag, list radio
        buttons via the listRadioElement tag, and attribute list checkbox/radio column via the
        attrListSelectColum tag.
        ]]>
      </description>
    </attribute>
      <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      The list item css class to apply if the action menu is associated with other body elements
      </description>
    </attribute>
    <attribute>
      <name>onRefreshJsSnippet</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      set this snippet if this js needs to be executed on refresh of the parent list tag
      </description>
    </attribute>
    <attribute>
      <name>titleIsDisplayOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
      @Since 9.1
      Defaults to false.
      If true, the title is shown before the contents of the tag and is not presented as an
      action button - It is merely displayed on the page as descriptive text.
      This is only valid when present within a listActionBar - ignored inside a listActionMenu.
      ALSO, in this mode the listactionitem + body contents are only displayed at the TOP of the list, not in
      the bottom action bar.
      </description>
    </attribute>
    <attribute>
      <name>replaceLocationInBody</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
      @Since 9.1SP8
      Defaults to false.
      If true, then the body text will have the string "$location" replaced with either _top or _bottom
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listElement</name>
    <tag-class>blackboard.servlet.tags.ngui.list.ListElementTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A list element represents a column in the inventory list. Columns are sortable only when the
      comparator attribute is set. The contents of this tag will be the value of an attribute of a
      single object (a single "cell"). The collection of the bodies of list elements make up a single
      "object row" in the list table (for example, First Name, Last Name, Email).
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of this list element used by the parent inventory list tag when
        determining what the initial sort column is, for example.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The label for this column. The label should be localized text.</description>
    </attribute>
    <attribute>
      <name>accessibilityLabelOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      @Since 9.1
        By default this is false.  If set to true, the label on the column will NOT be shown.
        Instead, it will be placed in a hidden span so that only screen readers will use it.
        The column will also be formatted with the same smaller-cell style used for checkbox/radio button
        columns since the intent of this would be for an icon-only row-actions column.
      </description>
    </attribute>
    <attribute>
      <name>comparator</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The comparator used to sort this column. The column is considered
        sortable when this attribute is set.
      </description>
    </attribute>
    <attribute>
      <name>nowrap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Sets the nowrap HTML attribute for the column.
        The default is true to allow wrapping.
      </description>
    </attribute>
    <attribute>
      <name>isRowHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating that the information in the body of this tag is the most
        representative of the object represented in the row (for example, with Name, Age, Weight, and Height,
        the Name should be the one with isRowHeader=true). This setting is used to set row header tags as well
        as title attributes to check boxes (if any) within the list table for accessibility compliance. The
        default value is false.
      </description>
    </attribute>
    <attribute>
      <name>tdClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The css class to be applied to the td cell (Default: "").
      When in card view, this class is also applied to the span since there is no td.
      When in card view there is a special-case class you can apply 'inventoryListCardHoverText' which will use the contents of this listElement as the hover text for the card instead of inline text.</description>
    </attribute>
    <attribute>
      <name>trClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The css class to be applied to the tr row (Default: "").  Only used if isRowHeader=true as well</description>
    </attribute>
    <attribute>
      <name>columnHeaderCellClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The css class to be applied to the cell tag that represents the header for the column
      this element is in (Default: "").</description>
    </attribute>
    <attribute>
      <name>displayElement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This attribute will allow the list table to have the column but not display (Style="display:none"). If this is set
        to false, the element will be added to the list container table but will be prevented from being displayed to the user.
        This is useful in cases when we want to display different information inside of the drawer, since the drawer pull up
        HTML from the inventory list it is bound to. By default this is set to  true;
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listCheckboxElement</name>
    <tag-class>blackboard.servlet.tags.ngui.list.ListCheckboxElementTag</tag-class>
    <body-content>empty</body-content>
    <description>
      A list element representing a column of checkboxes in the list (for e.g. inventoryList,contentList e.t.c).
      The title of the checkboxes, for accessibility compliance, will automatically be the value of the list element set as
      the row header since the column specified will be the most representative information out of all
      the other information in the same row.
      NOTE: You may not conditionally use this tag per row.  If present on the jsp then you
      must include this on every row.  To hide the checkbox use showCheckbox="false" instead of skipping
      the tag.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element. If this listCheckbox option element is used with any list other than
        the inventory list and its children, it is mandatory to provide this value. It should match the id of the list item
        this list option element is associated with
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element. This corresponds to the name
        attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The value of this element. This corresponds to the value
        attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>showCheckbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether the checkbox should be shown or not.
        The default is true.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title for this form element. This corresponds to the title
        attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text label of the checkbox.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The class value to be applied to this input element
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listRadioElement</name>
    <tag-class>blackboard.servlet.tags.ngui.list.ListRadioElementTag</tag-class>
    <body-content>empty</body-content>
    <description>
      A list element representing a column of checkboxes in the list (for e.g. inventoryList,contentList e.t.c).
      The title of the radio button, for accessibility compliance, will automatically be the value of the list element set as
      the row header since the column specified will be the most representative information out of all
      the other information in the same row.
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of this form element. This corresponds to the name
        attribute of the HTML input tag.
      </description>
    </attribute>
      <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The id of this form element. If this listRadio option element is used with any list other than
        the inventory list and its children, it is mandatory to provide this value. It should match the id of the list item
        this list option element is associated with
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The value of this element. This corresponds to the value
        attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>showRadio</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating whether the radio button should be shown or not.
        The default is true.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title for this form element. This corresponds to the title
        attribute of the HTML input tag.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text label of the checkbox.
      </description>
    </attribute>
    </tag>

  <tag bb:public="true">
    <name>listContextMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.list.ListContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      The context menu provides a set of actions to take on the item. Context menu
      items may be provided in several different ways and one may specify the order
      in which the items should appear in the UI. The context menu is rendered to
      the natural right of the contents of the body of a list element tag. This
      tag can only be used inside a <code>listElement</code> tag.
      <p>
      <b>Ordering context menu items</b>
      <p>
      There are 2 ways to give ordering to list context menu items:
      <ol>
        <li>
          Give the order key from the context menu properties file
          to the <code>orderKey</code> attribute.
        </li>
        <li>Give the order string to the <code>order</code> attribute.</li>
      </ol>
      <p>
      There are currently 3 ways context menu items are added to the page.
      Here is how to get the order string for each type of item:
      <ol>
        <li>
          <i>Dynamically generated nav items for context menu items</i> -
          order is referenced by the internal handle of the nav item
        </li>
        <li>
          <i>Manually specified context menu items in jsp via <code>contextMenuItem</code> tags</i> -
          provide the <code>id</code> attribute for <code>contextMenuItem</code> tag OR
          reference the default id string assigned to each context menu item (see TLD for
          <code>contextMenuItem</code> tag for more information)
        </li>
        <li>
          <i>List action bar action items</i> -
          provide the <code>contextMenuItemId</code> attribute for the
          <code>listActionItem</code> tag
        </li>
      </ol>
      <p>
      <b>Additional notes</b>
      <p>
      <ul>
        <li>
          Ids, if provided, for context menu items must be unique within each context menu.
        </li>
        <li>
          List action items will not show in context menu even if referenced
          in the order string if the current row does not show a checkbox/radio or
          if <code>minSelected</code> attribute to list action item is greater than 1,
          meaning the action is meant to be executed on multiple items only.
        </li>
        <li>
          If <code>orderKey</code> does not exist in the properties file, an error
          will be logged to the default log file.
        </li>
        <li>
          The context menu must have at least 1 item in it if not dynamically generated.
        </li>
      </ul>
      <p>
      <b>Example usage of context menu item ordering:</b>
      <p>
      <code>
      &lt;bbNG:inventory list ...&gt;<br>
      &nbsp;&nbsp;&lt;bbNG:listActionBar&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&lt;bbNG:listActionItem title="Delete Me" url="${actionItemUrl}" <b>contextMenuItemId="delete_list_action"</b>/&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      &nbsp;&nbsp;&lt;/bbNG:listActionBar&gt;<br>
      <br>
      &nbsp;&nbsp;&lt;bbNG:listElement ...&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&lt;bbNG:listContextMenu dynamic="true"
                                menuGeneratorURL="/webapps/blackboard/execute/modifyUserNavItemBasedContextMenuGenerator"
                                navItem="list_users"
                                contextParameters="xx"
                                <b>order="user_properties,password_modify,${ContextMenuTag['SEPARATOR']},list_courses_by_user,manual_item1,
                                       ${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}1,${ContextMenuTag['SEPARATOR']},delete_list_action"</b>&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bbNG:contextMenuItem title="Manual item1" url="xx" <b>id="manual_item1"</b>/&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;bbNG:contextMenuItem title="Manual item2" url="xx"/&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&lt;/bbNG:listContextMenu&gt;<br>
      <br>
      &nbsp;&nbsp;&lt;/bbNG:listElement&gt;<br>
      &nbsp;&nbsp;...<br>
      <br>
      &lt;/bbNG:inventoryList&gt;
      </code>
      <p>
      The code will generate:
      <p>
      <div style="border-style: solid; width: 25%;border-width: thin;padding: 5px">
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          User Properties<br/>
          Change Password<br/>
        </div>
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          Course Enrollments<br/>
          Manual item1<br/>
          Manual item2<br/>
        </div>
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          Delete Me<br/>
        </div>
        <div style="padding: 5px">
          [<i>all other manual context menu items not referenced in order string</i>]<br/>
          [<i>all other dynamically loaded context menu items not referenced in order string</i>]<br/>
        </div>
      </div>
      ]]>
    </description>
    <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to "Menu Options: [the name of container list element tag]"</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Handle of the root navigation item to grab the context menu items from.
        All children nav items of the specified item will be used to populate the context menu.
      </description>
    </attribute>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>orderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Key from the <code>base/config/internal/contextMenuOrder.properties</code>
        file to load the context menu item order from.

        If used inside a B2 then this can also be a key found in your b2's default bundle (WEB-INF/bundles/bb-manifest-{locale}.properties).
        The default base/config file will be checked first though, and if a value is found there then it is used.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>order</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Manually specified order of context menu items. Use constants in
        <code>ContextMenuTag</code> class for the separator and default item id strings.
        <p>
        <b>Example:</b>
        <p>
        &lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;
        <br>
        &lt;bbNG:listContextMenu order="sample_item1,${ContextMenuTag['SEPARATOR']},${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}"...&gt;
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>renderInline</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Possible Values: true|false
        Default: false
        If true then the check for a parent tag implementing ContextMenuRendererDelegate is skipped and instead the context menu is rendered immediately.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>skipItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Possible Values: comma separated list of ids of menu items mapping to the contextMenuItemId on the bbNG:listActionItem
        Default: Empty
        If individual rows in your list are rendering the context menu but do not directly support all list-based action items
        then you can remove them on a row by row basis by specifying the ids here.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>primaryMenuForCard</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        @Since 9.1 SP15
        Default value: false
        If set to true AND if this context menu is being rendered on a card-view inventory list then the menu will be moved out of the current listElement and set as the last span inside the block representing the card.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>inlineMenuItemOrderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        @Since 9.1 SP15
        See orderKey field for syntax.
        This field specifies those menu items that should be rendered inline in the page instead of in the drop-menu (but inside the span containing the menu as a whole).  If the context menu is dynamic, all items mentioned in this order must be present in-page (not dynamic)
        NOTE: Currently this is only applicable to menus tagged as primaryMenuForCard=true (and ignored for any others)
        This MAY CHANGE in the future and as such this feature should be seen as non-public (Blackboard-internal)
        ]]>
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>listElementAvailabilitySubheading</name>
    <tag-class>blackboard.servlet.tags.ngui.list.ListElementAvailabilitySubheadingTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Simple container tag for display availability information in the subheading of the listElement tag.
      This should only be used inside a listElement tag, and is generally intended for use in the
      first column of the list, to indicate to an instructor that the list row is not visible to students.
    </description>
    <attribute>
      <name>availability</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Display string that describes the availability of the list element
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>genericFieldComparator</name>
    <tag-class>blackboard.servlet.tags.ngui.list.GenericFieldListComparatorTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Simple tag that instatiates a GenericFieldComparator for use by
      ListElementTag.
    </description>
    <attribute>
      <name>className</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Fully qualified class name of the class of the object being compared.
        If this is omitted, the tag will look up at the InventoryListTag for the className.
      </description>
    </attribute>
    <attribute>
      <name>accessorMethod</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of the accessort method that will be used to get the
        attribute used to compare objects.
      </description>
    </attribute>
    <attribute>
      <name>ascending</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether default sort order should be ascending (Default true).</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>beanComparator</name>
    <tag-class>blackboard.servlet.tags.ngui.list.BeanListComparatorTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Simple tag that instatiates a commons-beanutils BeanComparator for use by
      ListElementTag.
    </description>
    <attribute>
      <name>property</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Name of the bean property that will be used to compare objects.</description>
    </attribute>
    <attribute>
      <name>secondProperty</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of the bean property that will be optionally used to compare objects when
        the two objects are equal in comparison by the primary property.
      </description>
    </attribute>
    <attribute>
      <name>ascending</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether default sort order should be ascending (Default true).</description>
    </attribute>
  </tag>

  <!-- Attribute list tags -->

  <tag>
    <name>attrList</name>
    <tag-class>blackboard.servlet.tags.AttributeListTag</tag-class>
    <tei-class>blackboard.servlet.tags.AttributeListTei</tei-class>
    <body-content>JSP</body-content>
    <description>
      Displays an attribute list. This list depends on a family of subsidiary
      tags to set up its control columns, renders, and column properties.
    </description>
    <attribute>
      <name>listId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.platform.attributelist.ListId</type>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>model</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.platform.attributelist.AttributeListModel</type>
      <description>
        Contains the data to display in the list
      </description>
    </attribute>
    <attribute>
      <name>sortUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The URL to sort or paginate this list, probably of the form
        "myPage.jsp?id=_1_2&amp;name=test" or to control the list display, also specify
        "myPage.jsp?id=_1_2&amp;name=test&amp;sortBy=" + listElement_index +
        "&amp;startIndex=" + ind
      </description>
    </attribute>
    <attribute>
      <name>itemLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A label for the objects in the list, default is "Objects"</description>
    </attribute>
    <attribute>
      <name>encodeParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Determines whether the parameters on the URL string of the paging links should be
        URL encoded. Default is true, and normally won't need to be changed
      </description>
    </attribute>
    <attribute>
      <name>startPageIndex</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The page index as an integer that the list widget should display (optional). The
        list tag first looks for a request parameter for the page index value. If it
        doesn't find one, it uses this value. If not specified, the first page will be
        displayed
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A description of the purpose of the list. This will be placed in the underlying
        table's "summary" field, where it can be digested by screen readers. The
        provided text should be localized. If no description is provided, the table will
        generate a default summary based on the given itemLabel attribute.
      </description>
    </attribute>
    <attribute>
      <name>rowsPerPage</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The number of items to display on a given page. Default is 25, and -1 is
        "show all"
      </description>
    </attribute>
    <attribute>
      <name>rowObj</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The name of the attribute to place the current row object into, which is
        of type AttributeListItem. This attribute will be made available to all
        subsidiary tags.
      </description>
    </attribute>
    <attribute>
      <name>colObj</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The name of the attribute to place the current column object into, which is
        of type AttributeColumnDefinition. This attribute will be made available to
        all subsidiary tags.
      </description>
    </attribute>
    <attribute>
      <name>cellObj</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The name of the attribute to place the current cell object into. This attribute
        will be made available to all subsidiary tags.
      </description>
    </attribute>
    <attribute>
      <name>halign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment to use for all cells in the table. This can be
        overriden at the column level. Valid values are 'left', 'right', and
        'center'.
      </description>
    </attribute>
    <attribute>
      <name>valign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The vertical alignment to use for all cells in the table. This can be
        overriden at the column level. Valid values are 'top', 'bottom', and
        'middle'.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The width of the table, in either pixel or percentage terms. Default
        value is 100#.
      </description>
    </attribute>
    <attribute>
      <name>displayCustomizeButton</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the list should display the customization button. If a &lt;titleBar&gt;
        tag is available on the same page, the list will attempt to place the button
        there. If not, it will place it above the list.
      </description>
    </attribute>
    <attribute>
      <name>displayBreadcrumbBar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the customization page reached via the customize button should
        display a  breadcrumb bar.
      </description>
    </attribute>
    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A URL that identifies the page on which the list is placed, and will
        load the page as it's currently displayed if invoked. This attribute is
        only necessary if the list is configured to display a customize button,
        and does not exist in a navigation item context.
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The href target of the page. This attribute is only necessary if this
        if the list is configured to display a customize button, and does not
        exist in a navigation item context.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The title of this page, as it should appear in a breadcrumb bar.
        This attribute is only necessary if if the list is configured to display a
        customize button, and does not exist in a navigation item context.
      </description>
    </attribute>
    <attribute>
      <name>noResultsMessage</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The message to display if the model contains no results. If not specified, no
        message will be displayed
      </description>
    </attribute>
    <attribute>
      <name>alwaysDisplayHeaders</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to display column headers when the list has no content.
      </description>
    </attribute>
    <attribute>
      <name>allowEditPaging</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the items per page can be modified by the user.  Default is true.
      </description>
    </attribute>
    <attribute>
      <name>allowRefresh</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether the refresh button should appear. Default is false.

        If this is specified, the refreshUrl attribute must also be set.
      </description>
    </attribute>
    <attribute>
      <name>refreshUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A URL that identifies the location that should be used for the refresh button.
      </description>
    </attribute>
    <attribute>
      <name>allowShowAll</name>
      <required>false</required>
        <rtexprvalue>true</rtexprvalue>
        <description>
          true/false.  If true, a show all button is displayed with the list.  Defaults to false.
        </description>
    </attribute>

  </tag>

  <tag>
    <name>attrListContextMenu</name>
    <tag-class>blackboard.servlet.tags.AttributeListContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      This tag creates a context menu to the natural right of the contents of the body of the first
      non user-removable attribute list column. This tag can only be used inside an <code>attrList</code> tag.
      The attrList tag acts as a renderer delegate and will put the context menu in the first
      non user-removable (permanent) column it detects from its model, including columns manually
      specified within the body of the <code>attrList</code> tag.
      <p>
      The context menu provides a set of actions to take on the item.
      By default, attribute inventory list actions that can apply to a just single item (<code>minSelected</code> attribute of the
      list action item tag) will appear in the context menu. The rest of the contents
      in the context menu can be populated either: directly from a nav item, explicitly using
      <code>contextMenuItem</code> tags, or dynamically. The context menu must have at least 1 item in it.
      <p>
      <b>Ordering context menu items</b>
      <p>
      There are 2 ways to give ordering to list context menu items:
      <ol>
        <li>
          Give the order key from the context menu properties file
          to the <code>orderKey</code> attribute.
        </li>
        <li>Give the order string to the <code>order</code> attribute.</li>
      </ol>
      <p>
      There are currently 3 ways context menu items are added to the page.
      Here is how to get the order string for each type of item:
      <ol>
        <li>
          <i>Dynamically generated nav items for context menu items</i> -
          order is referenced by the internal handle of the nav item
        </li>
        <li>
          <i>Manually specified context menu items in jsp via <code>contextMenuItem</code> tags</i> -
          provide the <code>id</code> attribute for <code>contextMenuItem</code> tag OR
          reference the default id string assigned to each context menu item (see TLD for
          <code>contextMenuItem</code> tag for more information)
        </li>
        <li>
          <i>List action bar action items</i> -
          provide the <code>contextMenuItemId</code> attribute for the
          <code>listActionItem</code> tag
        </li>
      </ol>
      <p>
      <b>Additional notes</b>
      <p>
      <ul>
        <li>
          Ids, if provided, for context menu items must be unique within each context menu.
        </li>
        <li>
          List action items will not show in context menu even if referenced
          in the order string if the current row does not show a checkbox/radio or
          if <code>minSelected</code> attribute to list action item is greater than 1,
          meaning the action is meant to be executed on multiple items only.
        </li>
        <li>
          If <code>orderKey</code> does not exist in the properties file, an error
          will be logged to the default log file.
        </li>
        <li>
          The context menu must have at least 1 item in it if not dynamically generated.
        </li>
      </ul>
      <p>
      <b>Example usage of context menu item ordering:</b>
      <p>
      <code>
      &lt;bbNG:attrList ...&gt;<br>
      &nbsp;&nbsp;&lt;bbNG:listActionBar&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&lt;bbNG:listActionItem title="Delete Me" url="${actionItemUrl}" <b>contextMenuItemId="delete_list_action"</b>/&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      &nbsp;&nbsp;&lt;/bbNG:listActionBar&gt;<br>
      <br>
      &nbsp;&nbsp;&lt;bbNG:attrListColumn ...&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      <br>
      &nbsp;&nbsp;&lt;/bbNG:attrListColumn&gt;<br>
      &nbsp;&nbsp;...<br>
      ...<br>
      &nbsp;&lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;<br>
      &nbsp;&lt;bbNG:attrListContextMenu dynamic="true"
                                menuGeneratorURL="/webapps/blackboard/execute/modifyUserNavItemBasedContextMenuGenerator"
                                navItem="list_users"
                                contextParameters="xx"
                                <b>order="user_properties,password_modify,${ContextMenuTag['SEPARATOR']},list_courses_by_user,manual_item1,
                                       ${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}1,${ContextMenuTag['SEPARATOR']},delete_list_action"</b>&gt;<br>
      &nbsp;&lt;bbNG:contextMenuItem title="Manual item1" url="xx" <b>id="manual_item1"</b>/&gt;<br>
      &nbsp;&nbsp;&lt;bbNG:contextMenuItem title="Manual item2" url="xx"/&gt;<br>
      &nbsp;&lt;/bbNG:attrListContextMenu&gt;<br>
      &lt;/bbNG:attrList&gt;
      </code>
      <p>
      The code will generate:
      <p>
      <div style="border-style: solid; width: 25%;border-width: thin;padding: 5px">
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          User Properties<br/>
          Change Password<br/>
        </div>
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          Course Enrollments<br/>
          Manual item1<br/>
          Manual item2<br/>
        </div>
        <div style="border-bottom-style: solid;border-width: thin;padding: 5px">
          Delete Me<br/>
        </div>
        <div style="padding: 5px">
          [<i>all other manual context menu items not referenced in order string</i>]<br/>
          [<i>all other dynamically loaded context menu items not referenced in order string</i>]<br/>
        </div>
      </div>


      ]]>
    </description>
    <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to: Click to see options</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Handle of the root navigation item to grab the context menu items from.
        All children nav items of the specified item will be used to populate the context menu.
      </description>
    </attribute>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>orderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Key from the <code>base/config/internal/contextMenuOrder.properties</code>
        file to load the context menu item order from.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>order</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Manually specified order of context menu items. Use constants in
        <code>ContextMenuTag</code> class for the separator and default item id strings.
        <p>
        <b>Example:</b>
        <p>
        &lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;
        <br>
        &lt;bbNG:attrListContextMenu order="sample_item1,${ContextMenuTag['SEPARATOR']},${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}"...&gt;
        ]]>
      </description>
    </attribute>
  </tag>

  <tag>
    <name>attrListColumn</name>
    <tag-class>blackboard.servlet.tags.AttributeListColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Define display attributes for one or more columns, including column
      renderers. There are three ways to define a renderer: via a class
      name representing a renderer class, via a renderer object (placed
      in a request attribute), or via template text placed directly in the
      body of the tag.
    </description>
    <attribute>
      <name>cols</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The names of the columns to which this render should be applied. Multiple
        columns should be separated by commas.
      </description>
    </attribute>
    <attribute>
      <name>rendererClassName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The name of the renderer class. Must implement the  AttributeListCellRenderer
        interface.
      </description>
    </attribute>
    <attribute>
      <name>renderer</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>blackboard.servlet.attributelist.AttributeListCellRenderer</type>
      <description>
        The name of an attribute containing a renderer object to use for
        all cells in this column. Object must implement the
        AttributeListCellRenderer interface.
      </description>
    </attribute>
    <attribute>
      <name>halign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment of data in the list's cells. Valid values
        are 'left', 'right', and 'center'. If no default has been defined
        by the parent table tag, then default is 'center',
      </description>
    </attribute>
    <attribute>
      <name>valign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment of data in the list's cells. Valid values
        are 'top', 'bottom', and 'middle'. If no default has been defined
        by the parent table tag, then default is 'middle'.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The width of the column, in either pixel or percentage terms
      </description>
    </attribute>
    <attribute>
      <name>weight</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The weight of the column. Columns are sized based on their relative weights.
      </description>
    </attribute>
    <attribute>
      <name>nowrap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Sets the nowrap html attribute for the column. Default is to allow wrapping
      </description>
    </attribute>
    <attribute>
      <name>comparatorProperty</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The property that this column represents, for the purposes of
        row comparison when performing sorts.
      </description>
    </attribute>
    <attribute>
      <name>comparator</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.Comparator</type>
      <description>
        A comparator to use when comparing one row to the other, for
        list sorting. The comparator will receive AttributeListItem
        objects, and so must know how to deal with them.
      </description>
    </attribute>
    <attribute>
      <name>isRowHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this column's rows are a row header. Default false.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>attrListSelectColumn</name>
    <tag-class>blackboard.servlet.tags.AttributeListSelectColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Displays the column of checkboxes or radio buttons in the attribute list
    </description>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The type of item.  Must be either "checkbox" or "radio"
      </description>
    </attribute>
    <attribute>
      <name>showItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        Whether to show the item.  Default true.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The value to assign to the checkbox/radio element. The application may use
        the row, column, and cell objects exposed by the list in generating
        this value.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The name to give to the checkbox/radio element. The application may use
        the row, column, and cell objects exposed by the list in generating
        this value.
      </description>
    </attribute>
    <attribute>
      <name>halign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment of data in the list's cells. Valid values
        are 'left', 'right', and 'center'. If no default has been defined
        by the parent table tag, then default is 'center'.
      </description>
    </attribute>
    <attribute>
      <name>valign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment of data in the list's cells. Valid values
        are 'top', 'bottom', and 'middle'. If no default has been defined
        by the parent table tag, then default is 'middle'.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The width of the column, in either pixel or percentage terms
      </description>
    </attribute>
    <attribute>
      <name>isRowHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this column's rows are a row header. Default false.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>attrListControlColumn</name>
    <tag-class>blackboard.servlet.tags.AttributeListControlColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Displays a generic control column in the attribute list. Cell content
      is defined via template text provided in the body of this tag.
    </description>
    <attribute>
      <name>lockLocation</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to lock the control column to the left of right of the list.
        Valid values are 'start' and 'end'.
      </description>
    </attribute>
    <attribute>
      <name>position</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The position of the column within its lock location.
      </description>
    </attribute>
    <attribute>
      <name>header</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The text that should appear in the column header.
        Defaults to an empty string.
      </description>
    </attribute>
    <attribute>
      <name>halign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment of data in the list's cells. Valid values
        are 'left', 'right', and 'center'. If no default has been defined
        by the parent table tag, then default is 'center'.
      </description>
    </attribute>
    <attribute>
      <name>valign</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The horizontal alignment of data in the list's cells. Valid values
        are 'top', 'bottom', and 'middle'. If no default has been defined
        by the parent table tag, then default is 'middle'.
      </description>
    </attribute>
    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>
        The width of the column, in either pixel or percentage terms
      </description>
    </attribute>
    <attribute>
      <name>weight</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The weight of the column. Columns are sized based on their relative weights.
      </description>
    </attribute>
    <attribute>
      <name>nowrap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Sets the nowrap html attribute for the column. Default is to allow wrapping
      </description>
    </attribute>
    <attribute>
      <name>isRowHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this column's rows are a row header. Default false.
      </description>
    </attribute>
  </tag>

  <!-- Start Flyout Form Tag -->
  <tag bb:public="true">
    <name>flyoutform</name>
    <tag-class>blackboard.servlet.tags.ngui.FlyoutFormTag</tag-class>
    <body-content>JSP</body-content>
    <description>
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>header</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>legend</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>method</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This parameter is used to specify the form submittion type.
        POST or GET are valid values
      </description>
    </attribute>
    <attribute>
      <name>showSubmitCancel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>action</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of the form.
      </description>
    </attribute>
  </tag>
  <!-- End Flyout Form Tag -->

  <!-- Start Mini Flyout Tag -->

  <tag bb:public="true">
    <name>miniFlyout</name>
    <tag-class>blackboard.servlet.tags.ngui.MiniFlyoutTag</tag-class>
    <body-content>JSP</body-content>
    <description>
    Programmatically create/invoke a basic (single input text with cancel/submit actions ) mini flyout control.
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      id of the mini flyout hyperlink element, the on-click event on which the flyout opens
      </description>
    </attribute>
    <attribute>
      <name>inputTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Title value of the input text element in the mini flyout control
      </description>
    </attribute>
    <attribute>
      <name>linkLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        label or text associated with the mini flyout hyperlinked element,
      </description>
    </attribute>
    <attribute>
      <name>linkValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        value associated with the mini flyout hyperlinked element,
      </description>
    </attribute>
    <attribute>
      <name>flyoutOptions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      A valid json string with attributes that match the configuration parameters in the miniFlyout.js
      Refer the miniFlyout.js docs for additional information on the configuration attributes for the miniFlyout
      If not provided, default values wherever possible will be used for configuration and there wil no auto-wiring
      The onClick handler can custom configure the miniFlyout configuration  parameters
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Additional className associated with the hyperlink element. A default 'miniFlyout' className is given to each of the
      flyout hyperlink elements in order to autowire these links for event listeners  on page load
      </description>
    </attribute>
   <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        onClick call back js method for the  miniFlyout hyperlink element
      </description>
    </attribute>
   </tag>

  <!-- End Mini Flyout Tag -->

  <!-- Start of the side nav panel like tag -->
  <tag bb:public="true">
    <name>navMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.navMenu.NavMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      This tag generates a simple list of items whose title, body content,
      context menu need to be rendered in a simple format.
      Unlike inventoryList tag, it neither has table look nor support columns and other
      features come with a table, such as sorting, paging or headers. Multiple navMenu's
      can be placed side by side and linked to each other through javascript
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      If specified then this label will be displayed before the list.
      </description>
    </attribute>
    <attribute>
      <name>menuCssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A CSS class that should be applied to the navmenu as a whole.
      </description>
    </attribute>
    <attribute>
      <name>actionBarCssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
         Css class which will be applied to the html contained in list action bar.
      </description>
    </attribute>
  </tag>
  <!-- end of the side panel tag-->

  <tag bb:public="true">
    <name>navMenuItem</name>
    <tag-class>blackboard.servlet.tags.ngui.navMenu.NavMenuItemTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      This tag represents an item in a navMenu list.
      It can optionally contain a delegateContextMenu tag which will render a
      context menu next to the title of the item. The content of the item should be
      specified in the body of the tag, and can contain any HTML/other jsp tags.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An id that uniquely identifies the item (e.g. the database id of the item ).
        This will be used to identify the order of the items when reordering them.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Title of the nav menu item.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Javascript that will be run when the navmenuitem link is clicked.</description>
    </attribute>
  </tag>

  <!-- end of the navMenuItem tag -->
  <tag bb:public="true">
    <name>hierarchyList</name>
    <tag-class>blackboard.servlet.tags.ngui.hierarchylist.HierarchyListTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
     <![CDATA[
      This tag generates a simple reorderable list of items whose title, body content,
      context menu and short properties need to be rendered in a simple format.
      Unlike inventoryList tag, it neither has table look nor support columns and other
      features come with a table, such as sorting, paging or headers. Multiple sublists
      can be nested within an item to achieve multi-layering.
      <p>
      The list contains hierarchyListItems corresponding to rows. listCheckboxElement and listRadioElement tags can also
      be used in conjunction with hierarchyListItem to add radio or checkbox in front of each row.
      <br>
      <p>
      <b>Example usage of listCheckboxElement with hierarchyListItem:</b>
      <p>
      <code>
      &lt;bbNG:hierarchyList ...&gt;<br>
      &nbsp;&nbsp;&lt;bbNG:listCheckboxElement id="tab_${tab.id.externalString}_checkbox" name="tabId" value="${tab.id.externalString}" label="${tabCbLabel}"/ &gt;<br>
      &nbsp;&nbsp;&lt;bbNG:hierarchylistItem id="tab_${tab.id.externalString}" title="${tab.label}"/&gt;<br>
      &nbsp;&nbsp;&nbsp;&nbsp;...<br>
      &lt;/bbNG:hierarchyList&gt;<br>
      ]]>
    </description>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this list is reorderable.  Default: false
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to persist the drag and drop.
        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
        If you do not need server-notification (i.e. you just want on-page drag/drop framework and will
        deal with the ordering via the order of parameters posted to the server on submit) then you
        can specify "noop" as the reordering URL.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      If specified then this label will be displayed before the list.  If the list is
      reorderable then the reorder controls will be beside it.
      </description>
    </attribute>
    <attribute>
      <name>listClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      A CSS class that should be applied to the hierarchy list as a whole.
      </description>
    </attribute>
    <attribute>
      <name>itemDetailsClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      A CSS class that should be applied to any item details section in each row of this list.
      If unspecified, defaults to the class "itemDetails".
      </description>
    </attribute>
    <attribute>
      <name>showBottomListActionBar</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       If specified as "false" then the bottom list action bar wouldn't be rendered.
       If unspecified then the the bottom list action bar would be rendered.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>hierarchyListItem</name>
    <tag-class>blackboard.servlet.tags.ngui.hierarchylist.HierarchyListItemTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      This tag represents an item in a hierarchy list.
      It can optionally contain a delegateContextMenu tag which will render a
      context menu next to the title of the item. The content of the item should be
      specified in the body of the tag, and can contain any HTML/other jsp tags.
      One or more hierarchyList tag can be added to this tag's body to form multi-
      layered list.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An id that uniquely identifies the item (e.g. the database id of the item ).
        This will be used to identify the order of the items when reordering them.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Title of the hierarchy list item.
      </description>
    </attribute>
    <attribute>
      <name>titleColor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Title color of the hierarchy list item. The acceptable values are valid
        HTML color names or 6 digit hexcodes optionally starting with # sign, such
        as "Black" or "#000000" or "000000".
      </description>
    </attribute>
  </tag>

   <tag bb:public="true">
    <name>itemDetail</name>
    <tag-class>blackboard.servlet.tags.ngui.hierarchylist.ItemDetailTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Optional property of an hierarchy list item rendered at the far right for LTR
      locale (or far left for RTL one) of item title in "title: value" format. This
      tag should be used for rendering of short length properties that need to be
      visually separated from item's body content.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Title or label of an item detail.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Value of an item detail.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>delegateContextMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.DelegateContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      <![CDATA[
      This tag creates a context menu that provides a set of actions to take on the item
      that this is being rendered next to. Rendering of the context menu is delegated to
      a parent, therefore one of the ancestors must implement
      <code>ContextMenuRendererDelegate</code>.
      The contents of the context menu can be populated either: directly from a nav item,
      explicitly using contextMenuItem tags, or dynamically.
      The context menu must have at least 1 item in it.
      <p>
      Ordering of the context menu items is also allowed. See the description of the
      <code>contextMenu</code> tag for details about ordering.
      ]]>
    </description>
    <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to: Click to see options</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Handle of the root navigation item to grab the context menu items from.
        All children nav items of the specified item will be used to populate the context menu.
      </description>
    </attribute>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>orderKey</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Key from the <code>base/config/internal/contextMenuOrder.properties</code>
        file to load the context menu item order from.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>order</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Manually specified order of context menu items. Use constants in
        <code>ContextMenuTag</code> class for the separator and default item id strings.
        <p>
        <b>Example:</b>
        <p>
        &lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;
        <br>
        &lt;bbNG:listContextMenu order="sample_item1,${ContextMenuTag['SEPARATOR']},${ContextMenuTag['DEFAULT_ITEM_ID_PREFIX']}"...&gt;
        ]]>
      </description>
    </attribute>
  </tag>

  <tag>
    <name>editToolContextMenu</name>
    <tag-class>blackboard.servlet.tags.ngui.EditToolContextMenuTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      This tag creates a context menu that provides a set of actions to take on a
      navitem being rendered inside the tools landing page in edit mode.
      The context menu must have at least 2 items in it.
    </description>
        <attribute>
      <name>menuLinkTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text for the title attribute of the context menu link.  If not specified will default to: Click to see options</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Handle of the root navigation item to grab the context menu items from.
        All children nav items of the specified item will be used to populate the context menu.
      </description>
    </attribute>
    <attribute>
      <name>dynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether this context menu is populated at run time.</description>
    </attribute>
    <attribute>
      <name>menuGeneratorURL</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that the dynamic options will be loaded from.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Context parameters needed for resolution of href's.</description>
    </attribute>
    <attribute>
      <name>ifHiddenText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Text displayed if the item is hidden</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>canvas</name>
    <tag-class>blackboard.servlet.tags.ngui.canvas.CanvasTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
    TODO
    </description>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether this list is reorderable.  Default: false
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url that will be posted to persist the drag and drop.
        For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>mayBeNested</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Default: true
        If you know that this canvas is not going to contain any nested draggable areas
        then you can set this parameter to false to speed up the drag/drop UI interaction
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>canvasItem</name>
    <tag-class>blackboard.servlet.tags.ngui.canvas.CanvasItemTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      This tag represents an item in a canvas.
      It can optionally contain a delegateContextMenu tag which will render a
      context menu next to the title of the item. The content of the item should be
      specified in the body of the tag, and can contain any HTML/other jsp tags.
      One or more canvas tag can be added to this tag's body to form multi-
      layered list.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        An id that uniquely identifies the item (e.g. the database id of the item ).
        This will be used to identify the order of the items when reordering them.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Title of the canvas list item.
      </description>
    </attribute>
    <attribute>
      <name>cssClasses</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Space separated list of css classes to apply to item
      </description>
    </attribute>
    <attribute>
      <name>reorderableOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Set this value to override the parent canvas reorderable attribute.  The value set is the new
        reorderable value.  So setting this value to "false" makes this canvasItem not reorderable.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>canvasDetail</name>
    <tag-class>blackboard.servlet.tags.ngui.canvas.CanvasDetailTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Optional property of an canvas item rendered at the far right for LTR
      locale (or far left for RTL one) of item title in "title: value" format. This
      tag should be used for rendering of short length properties that need to be
      visually separated from item's body content.
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Title or label of an item detail.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Value of an item detail.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>collapsibleList</name>
    <tag-class>blackboard.servlet.tags.ngui.collapsiblelist.CollapsibleListTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
    expand/collapse List that performs heavy load of listItems on list expansion
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      unique value to identify multiple collapseList items on a single page
      </description>
    </attribute>
    <attribute>
      <name>isDynamic</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
     if set to  false and will render static content on expand
     if set to true , will render dynamic content on expand based on listItemGeneratorURL
   </description>
    </attribute>
    <attribute>
      <name>isRawDynamicPage</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      This only applies if isDynamic is true - otherwise this is ignored.
      Default: false
     If set to false, the dynamic response must be a well-formatted JSON result as per BaseListItemGeneratorAction
     If set to true, the dynamic response will be treated as a fully formed piece of html to place on page.
     Note that once a rawdynamic item has been fetched and rendered on-page it will not be re-fetched until the
     entire page is reloaded.
      </description>
    </attribute>
    <attribute>
      <name>listItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      lightweight collection of listItems of type collapsibleListItem
      It can be empty even when specified.
      </description>
    </attribute>
    <attribute>
       <name>listItemGeneratorURL </name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      URL that performs heavy load for each list Item specified in the listItems attribute
      </description>
    </attribute>
   <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>collapsibleListItem</name>
    <tag-class>blackboard.servlet.tags.ngui.collapsiblelist.CollapsibleListItemTag</tag-class>
    <body-content>scriptless</body-content>
    <description>
      Child items inside the CollapsibleListTag
    </description>
    <attribute>
       <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      unique value for each listItem
       </description>
    </attribute>
     <attribute>
       <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      title of the collapsed List Item
       </description>
    </attribute>
    <attribute>
       <name>body </name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       arbitrary body html of the expanded list Item
       </description>
    </attribute>
      <attribute>
      <name>isDisabled</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        default value is false
        if set to true the item cannot be expanded
      </description>
    </attribute>
   <attribute>
      <name>expandOnPageLoad</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      default value is false
      if set to true, expands the listItem on pageload
      </description>
    </attribute>
  </tag>

  <!-- Palette Tags -->
  <tag bb:public="true">
    <name>palette</name>
    <tag-class>blackboard.servlet.tags.ngui.palette.PaletteTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      A palette is a group of navigational links in a menu area used to navigate a sub-feature
      within the application. A palette item is a single navigational link in the palette, and
      a palette can contain palette items and or palette item groups that contain palette items.
      <p>
      Palette actions that may be performed to the palette or its contents may be defined separately
      using the palette action item tag. A palette may contain many action items.
      <p>
      Palette items and palette item groups may be passed directly in this tag as collections of beans.
      <p>
      <B>Controlling the palette via javascript:</B>
      <p>
      There are several global functions that the jsp writer may use to control the palette.
      They are listed below. Also, see documentation in <code>page.js</code> for usage details.
      <ul>
        <li>
          <code>page.PaletteController.getDefaultContentsContainerId</code> -
          Method returns the string id to the default palette contents container.
          Palette contents container is the element that wraps everything below
          the palette title area.
        </li>
        <li>
          <code>page.PaletteController.setActivePaletteContentsContainer</code> -
          Set a custom palette contents container to the palette controller javascript object.
          This is used in the case where palette contents are not added to the default content
          container, but in a separate container inside the palette. For example, the course menu
          palette in folder view and the Content Collection palette in folder view both
          dynamically inserts their own tree containers into the palette in the palette content
          area. The active palette contents container is updated via this method so that palette
          functionality like expand and collapse palette will work correctly.
        </li>
        <li>
          <code>page.PaletteController.closeAllOtherPalettes</code> -
          Close all other palettes on the page, except the specified palette.
        </li>
        <li>
          <code>page.PaletteController.toggleExpandCollapsePalette</code> -
          Toggle the display of the specified palette, i.e. close the palette if it's currently
          open and open the palette if it's closed.
        </li>
        <li>
          <code>page.PaletteController.collapsePalette</code> -
          Close the specified palette.
        </li>
        <li>
          <code>page.PaletteController.expandPalette</code> -
          Open the specified palette.
        </li>
      </ul>
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique value to identify this palette in the page. Must be provided if palette
        is reorderable or expand/collapsible.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text name of this palette
      </description>
    </attribute>
    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The link url of this palette's title.  If not set, the title will not be linked.
      </description>
    </attribute>
    <attribute>
      <name>hrefTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional tool-tip text for the link url of the palette's title
      </description>
    </attribute>
    <attribute>
      <name>imgTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional tool-tip img for the link url of the palette's title
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The target for the link url of this palette's title.  This used when href is also set.
      </description>
    </attribute>
    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      The style to use for the palette.  This will be used to determine what CSS styles should be applied
      to the palette and its items.

      Acceptable values are string representations of the PaletteTag.Style enum items.  The default value is
      "coursemenu".
      </description>
    </attribute>
    <attribute>
      <name>readonly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Indicates whether palette actions and palette management features may be performed. If false, those
      actions will be blocked. For example, if the course menu palette is read-only, palette items cannot
      be added to the palette and existing palette items may not be reordered, etc. Default is false.
      </description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Indicates whether the direct child palette items can be reordered (if not in readonly mode).  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      The URL to which the changes in palette item order will be persisted to.  Required if reorderable is true.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>shouldCloseAllOtherPalettesWhenOpen</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Whether to close all other palettes when this palette is expanded.  Default value is false.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Additional URL parameters that will be passed to the reorderingUrl in order to pass contextual information
      to the persisting action.
      </description>
    </attribute>
    <attribute>
      <name>paletteItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Collection of PaletteItem beans to be rendered inside the palette.
      </description>
    </attribute>
    <attribute>
      <name>paletteItemGroups</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Collection of PaletteItemGroup beans to be rendered inside the palette.
      </description>
    </attribute>
    <attribute>
      <name>collapsed</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Collapse palette at first loading time
      </description>
    </attribute>
    <attribute>
      <name>expandCollapseId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      The id of the tag who has js onclick event binding on it (in page.js), for palette collapse/expand
      </description>
    </attribute>
    <attribute>
      <name>cssClasses</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Space separated list of css classes to apply to the Palette
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>paletteActionItem</name>
    <tag-class>blackboard.servlet.tags.ngui.palette.PaletteActionItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>
     A palette action item is an action that may be performed to the palette or its contents.
     Palette action item tags must be used within the palette tag.

     The action may be blocked and hidden from display if the readonly attribute in the parent
     palette tag is set unless overridden via the showWhenReadonly attribute below.

     The action link(s) to the action must be provided either through the href or dropdownItems
     attributes (*not* both). Giving the href attribute will directly link the icon while the
     dropdownItems will display a dropdown list of action links under the icon.

     Any html specified in the body of the tag will be appended to the item
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Unique value to identify this action item in the page.
      </description>
    </attribute>
    <attribute>
      <name>iconUrl</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The url of the icon to display for this action item
      </description>
    </attribute>
    <attribute>
      <name>toolTipText</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The localized text that should appear as a tool-tip describing the action.
      </description>
    </attribute>
    <attribute>
      <name>active</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the item is in the "active" state.  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the item is primary (shown in natural left) or not (shown in natural right).  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>showWhenReadonly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the action item should be shown despite the parent palette tag being in readonly mode.  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The action item link.
      </description>
    </attribute>
    <attribute>
      <name>dropdownItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       List of ContextMenuItem beans that will appear as a dropdown list of links for this action item.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>paletteItemGroup</name>
    <tag-class>blackboard.servlet.tags.ngui.palette.PaletteItemGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description>
     A palette item group is a container that visually distinguishes and associates a list of palette
     items by grouping them together. The list of palette items may be either declared in the body of
     this tag or passed as a collection to the associated attribute in this tag.

     The group may be either reorderable or loaded dynamically (however, not both)

     The way the group looks depends on several factors.
      * Whether the group has a href
      * Whether the group has (or will have) any children

     If a group has a href and will not have any children, the group is just displayed as a link

     If a group has a href and has children, the group name will be displayed as a link (to the href)
     with an icon on the right that can be clicked to expand/collapse the group.

     If a group doesn't have an href and has children, clicking on the group name will expand/collapse the group.
    </description>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Unique value to identify this palette item group in the page.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The localized text name of the palette item group.
      </description>
    </attribute>
    <attribute>
      <name>href</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       A navigational link on the title text to a content page related to the item group.
      </description>
    </attribute>
    <attribute>
      <name>hrefTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Optional tool-tip text for the navigational link on the title text.
      </description>
    </attribute>
    <attribute>
      <name>imgTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Optional tool-tip img for the link url of the palette's title
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The target for href, the navigational link on the title text to a content page related to the item group.
      </description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the items in the item group should be repositionable.  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The URL to which changes to the order of the group's items will be persisted.  Required if reorderable is true.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Additional URL parameters that will be passed to the reorderingUrl in order to pass contextual information
       to the persisting action.
      </description>
    </attribute>
    <attribute>
      <name>dynamicLoading</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Whether the items in the item group are loaded dynamically.  Default is false.
      </description>
    </attribute>
    <attribute>
      <name>dynamicItemGeneratorUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       URL that will be used to dynamically generate the group's items.
      </description>
    </attribute>
    <attribute>
      <name>paletteItems</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Collection of PaletteItem beans to be rendered inside the group.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>paletteItem</name>
    <tag-class>blackboard.servlet.tags.ngui.palette.PaletteItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A palette item is a single navigational link in the palette. An item can appear
      directly within the palette or within palette item groups that visually distinguish
      and associate a list of items. Palette item tags must be used within a palette or
      palette item group tag.

      The body of this tag will be directly inserted as the body of the item.  This means
      that the user of this tag will have to take care of any special logic for hiding/displaying
      items in readonly mode, etc.

      The id and title attributes must be specified if the palette item is in a reorderable
      Palette or PaletteItemGroup.  This is so that the accessible repositioning widget can
      be populated.
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Value that will be passed to the repositioning action that will uniquely identify the
       palette item.  A good value for this is the database id of the item you're displaying.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The localized text name of the palette item.  Used in the accessible repositioning widget.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       An option CSS class to apply to the item.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>buttonPalette</name>
    <tag-class>blackboard.servlet.tags.ngui.palette.ButtonPaletteTag</tag-class>
    <body-content>empty</body-content>
    <description>
      A button palette is a palette that contains a single link.
    </description>
    <attribute>
      <name>url</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       URL that the button will link to.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The localized text label of the button.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       An optional id that uniquely identifies the button.
      </description>
    </attribute>
    <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       An optional CSS class to apply to the button.
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Optional JavaScript handler to call when the button is clicked.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>userRoleSelect</name>
    <tag-class>blackboard.servlet.tags.ngui.datacollection.fields.UserRoleSelectTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Creates a User Role (primary and secondary specific) MultiSelect tag. This uses the
      blackboard.servelet.data.MultiSelectBean object to pass data into the list which is
      displayed in the two Select boxes
      <![CDATA[<p>]]>
      After the form is submitted, "widgetName_left_values" and "widgetName_right_values"
      will be a comma-delimited string of values of all options that were in the
      respective select box upon form submission
    </description>
    <attribute>
      <name>sourceTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Left title is the text that appears on the top left of the widget (Available Roles)
      </description>
    </attribute>
    <attribute>
      <name>destTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Right title is the text that appears above top right of the widget (Selected Roles)
      </description>
    </attribute>
    <attribute>
      <name>primaryTitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The title of the Primary Role section field</description>
    </attribute>
    <attribute>
      <name>secondaryTitle</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The Title of the Secondary Role selection box</description>
    </attribute>
    <attribute>
      <name>sourceName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This refers to the name attribute in the select tag for the left multi-select box.
        defaults to widgetName_left_select and widgetName_right_select where the
        widgetName is replaced by the specified widgetName (or defaulted to "multiselect"
        if none is provided)
      </description>
    </attribute>
    <attribute>
      <name>destName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This refers to the name attribute in the select tag for the right multi-select box
      </description>
    </attribute>
    <attribute>
      <name>primaryInputName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The refers to the name attribute of the input field used for primary Role
      </description>
    </attribute>
    <attribute>
      <name>sourceCollection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.Collection</type>
      <description>
        The collection passed to the left Select box. This is a list of MultiSelectBean
        objects passed to be displayed on the left select box. The setLabel and setValue
        methods should be set for each member of the list. The setIsSeleted can be set in
        case some options need to be seleted when the widget first shows up
      </description>
    </attribute>
    <attribute>
      <name>destCollection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.util.Collection</type>
      <description>
        The collection passed to the right Select box. This is a list of MultiSelectBean
        objects passed to be displayed on the left select box. The setLabel and setValue
        methods should be set for each member of the list. The setIsSeleted can be set in
        case some options need to be seleted when the widget first shows up
      </description>
    </attribute>
    <attribute>
      <name>primaryRoleName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The string which refers to the currently selected primary Role (if any)
      </description>
    </attribute>
    <attribute>
      <name>primaryRoleId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The string which refers to the role_id of the currently selected primary role
      </description>
    </attribute>
    <attribute>
      <name>formName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This is the name of the form in which the multi-select widget is being used
      </description>
    </attribute>
    <attribute>
      <name>widgetName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Widget Name will precede the hidden fields in the form widgetName_left_values and
        widgetName_right_values. If widgetName is not specified, the name "multiselect"
        will be used as a default
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Can be of type "PORTAL_ROLE" . This type will create the standard multiselect for
        portal roles
      </description>
    </attribute>
  </tag>

  <!-- Button tags -->

  <tag bb:public="true">
    <name>okButton</name>
    <tag-class>blackboard.servlet.tags.ngui.OkButtonTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Generates a navigational OK button for a page. This tag must be used within a page tag.
      When no attributes are provided, it links to the parent nav item (if available, provided via the page tag)
      or javascript's history back function by default.
      <P>
      The purpose of this button/behavior is navigational only-- the user clicks "OK" and
      moves up one level on the breadcrumb trail. This button is generally used on
      Landing Pages and Inventory List Pages. See the design framework for more details.
      ]]>
    </description>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The URL where the button points.</description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The onClick javascript handler for the button.</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>button</name>
    <tag-class>blackboard.servlet.tags.ngui.ButtonTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Generates a navigational button for a page.
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The id of the link </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The URL where the button points.</description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The onClick javascript handler for the button.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The label for the button.</description>
    </attribute>
    <attribute>
      <name>imgUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The Image URL to be displayed in the button. If specified, the button will be the icon only,
        label being used for the img alt and button title.
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description> The (optional) frame name for the link to open in, if it's a link-type button and
        "_self" is not adequate
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The type of button that should be rendered. This must be the string representation of one
        of the ButtonTag.Type enum values. The default value is "ComponentLevel" (<code>ButtonTag.Type.ComponentLevel</code>).
        ]]>
      </description>
    </attribute>
  </tag>

  <!-- 360 view tags -->
 <tag>
   <name>summaryView</name>
   <tag-class>blackboard.servlet.tags.ngui.summary.SummaryTag</tag-class>
   <body-content>JSP</body-content>
     <description>      <![CDATA[
      Renders the page shell for a 360 view page.
      ]]></description>
     <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        360 view top level title.
      </description>
     </attribute>
     <attribute>
      <name>pagetitle</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        360 view Page level title.
      </description>
     </attribute>

  </tag>

  <tag>
    <name>summaryViewItem</name>
    <tag-class>blackboard.servlet.tags.ngui.summary.SummaryTocItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      This tag presents a first level TOC item in 360 view.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the TOC.</description>
    </attribute>
  </tag>

  <tag>
    <name>summaryViewSubItem</name>
    <tag-class>blackboard.servlet.tags.ngui.summary.SummaryTocSubItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      This tag presents a second level TOC item in 360 view.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the sub-TOC.</description>
    </attribute>
  </tag>

  <tag>
    <name>summaryDetail</name>
    <tag-class>blackboard.servlet.tags.ngui.summary.SummaryDetailTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      This tag presents a detail info in 360 view sub toc. A sub-toc could wrap more than one detaile parts.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the detail.</description>
    </attribute>
  </tag>

  <tag>
    <name>summaryDetailSection</name>
    <tag-class>blackboard.servlet.tags.ngui.summary.SummaryDetailSectionTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      This tag presents a detail info section in 360 view detail. A detail part could wrap more than one sections.
      ]]>
    </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Title of the section.</description>
    </attribute>
  </tag>

  <tag>
    <name>summaryProperty</name>
    <tag-class>blackboard.servlet.tags.ngui.summary.SummaryPropertyTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      <![CDATA[
      This tag presents a property-value pair in 360 view detail. A detail part could wrap more than one properties.
      ]]>
    </description>
    <attribute>
      <name>property</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Name of the property.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Value of the property.</description>
    </attribute>
    <attribute>
      <name>bodyValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Boolean: Indicating if the value is body content. This overrides the value above.</description>
    </attribute>
  </tag>

  <tag>
    <name>metadataList</name>
    <tag-class>blackboard.servlet.tags.ngui.list.MetadataListTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      The tag serves to generate a list of metadata used for describing the characteristics of some content or data.
      This information is displayed in a series of label, value pairs.
      Either the item attribute or metadataListItem tags in the body must be provided.
    </description>
    <attribute>
      <name>baseFieldName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Prefix string to the ids of the label and field divs of a metadata.
        Default is "meta". This field should be provided and unique between
        metadata lists if there are more than one metadata lists in the page.
      </description>
    </attribute>
    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        List of metadata items (blackboard.servlet.data.ngui.ItemDetail) to loop through to populate the list.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>metadataListItem</name>
    <tag-class>blackboard.servlet.tags.ngui.list.MetadataListItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Metadata list items are items within a metadata list. This tag is only for
      use within a metadataList tag.  The value of the item may be provided
      either via the "value" attribute or within the body of the tag, but is not
      required.
    </description>
     <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The id for the metadata item.</description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The label for the metadata item. The label should be localized text.</description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       The value of the metadata item. If provided and is text, it should be localized.
      </description>
    </attribute>
    <attribute>
      <name>labelFor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The id for which to assign to the "for" attribute of the HTML label tag wrapped
        around the label text of this metadataListItem. The HTML label tag associates
        information with a form control, letting the user know what purpose the
        form control has, for accessibility.
        Assign a form element id to this attribute to associate the label text of
        this data element to a specific form control element.
        <p>
        For example:
        &lt;label for="gradingNotestext"&gt;Grading Notes&lt;/label&gt;
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>tdClassName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Default: null.  If specified this class is applied to the td cell for this item.
      </description>
    </attribute>
    <attribute>
      <name>thClassName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
       Default: null.  If specified this class is applied to the th cell for this item.
      </description>
    </attribute>
  </tag>

  <!-- Tagging -->
  <tag bb:public="true">
    <name>tagging</name>
    <tag-class>blackboard.servlet.tags.ngui.TaggingTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Tag that provides a control for "tagging" an element with keywords ala Flickr.
    </description>
    <attribute>
      <name>currentTagList</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A List containing the actual TagData objects that should be displayed as in use
      </description>
    </attribute>
    <attribute>
      <name>fullTagList</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A List which indicates the full set of tags (as currently defined) that
        can be chosen from in order to add tags to the current element.  This
        list should include the same tags as defined by the current tag list
        (i.e., it should be a superset of the current tag list).  If this value
        is null/empty, the "select from existing" values will be pulled from
        a global javascript list.
      </description>
    </attribute>
    <attribute>
      <name>showSelectFromExisting</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean to determine whether the "select from existing" is displayed.
        Defaults to true.
      </description>
    </attribute>
    <attribute>
      <name>removeMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The message that will be shown to the user when they click to remove
        one of the tags currently set.  If this value is not provided, a
        "generic" remove confirmation message will be used (common.warning.remove
        in common.properties).  If an empty string is provided, no remove
        confirmation message will be shown.
      </description>
    </attribute>
    <attribute>
      <name>tagClickUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        URL for when the user clicks on the tag name.  If specified, the URL will
        be parameterized by replacing "@X@TagName@X@" with the tag value for that
        particular tag.  If not specified, the tag name is not linked.
      </description>
    </attribute>
    <attribute>
      <name>addJsCallback</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of a JS function that should be called when an add operation
        is performed.  The method provided should accept a single string value
        (the actual tag value) as a parameter.  The output of this method will
        be ignored and will not effect the flow of execution.
      </description>
    </attribute>
    <attribute>
      <name>removeJsCallback</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of a JS function that should be called when a remove operation
        is performed.  The method provided should accept a single string value
        (the actual tag value) as a parameter.  The output of this method will
        be ignored and will not effect the flow of execution.
      </description>
    </attribute>
    <attribute>
      <name>getMatchingTagsJsCallback</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The name of a JS function that should be called in order to aynchrnously
        fetch all the matching tags for autocompletion suggestions in the add Tag
        input box for a given tag input. The method provided should accept a single string value
        (the actual tag value) as a parameter. The output of this method will be the set of tags
         to be used as suggestions.
      </description>
    </attribute>
    <attribute>
      <name>fieldName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The results of the tagging operation (the list of tags to apply to the
        element) can be returned in a hidden form field (as an encoded string).
        If this attribute is specified, the tag values will be tracked in a form
        field with the given name.  Interpretation of the form field value
        (encoded string) can be done using TaggingTag.parseFormField(String). If
        this attribute is not provided, no form field tracking will be performed
        and it is assumed that the tagging process is being monitored via
        another mechanism (i.e., callbacks).
      </description>
    </attribute>
    <attribute>
      <name>containerString</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Unique string for the thing being tagged.  This is necessary so the elements
        on the page can be distinguished from one another.  If not specified, a
        timestamp is used.  The containing span for this tagging instance will be
        named = ("tags_" + containerString)
      </description>
    </attribute>
    <attribute>
      <name>outputJavascript</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean: whether or not to output javascript event handling on each instance
        of the tag.  Defaults to false.
      </description>
    </attribute>
    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean: whether or not the list of tags is read-only.  Defaults to false.
      </description>
    </attribute>
     <attribute>
      <name>removeOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean: whether or not the list of tags is remove-only.  Defaults to false.
      </description>
    </attribute>
    <attribute>
      <name>normalizeTagValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean: whether or not the tag value should be normalized.  Defaults to true.
      </description>
    </attribute>
    <attribute>
      <name>showAutoCompleteForTags</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean: whether or not to suggest existing tag values a.k.a autocomplete while adding tags to the current list.
        Defaults to true.
      </description>
    </attribute>
     <attribute>
      <name>showCurrentTags</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean: whether to display the list of current tags
        Defaults to true.
      </description>
    </attribute>
     <attribute>
      <name>addTagLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        a string value representing the label to  be displayed for adding tags
        Defaults to Add Tag.
      </description>
    </attribute>
    <attribute>
      <name>addTagButtonLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        a string value representing the label to displayed for the action button for adding tags
        Defaults to Add.
      </description>
    </attribute>
    <attribute>
      <name>showTagCloud</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        a boolean representing if the tag cloud should be shown when the user clicks on the
        choose from existing button in the tagging ui.
        If set to true, the fullTagList must contain a weighted taglist.
        The weight attribute of TagData must be populated with the
        frequency at which each tag is associated to another entity
        in the system
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>horizontalList</name>
    <tag-class>blackboard.servlet.tags.ngui.HorizontalListTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Display list oriented in vertical rows
    </description>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection of objects passed to the list to be displayed.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified class name of the objects in the collection.
      </description>
    </attribute>
    <attribute>
      <name>objectVar</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to represent a single object in the collection.
        This is used in the list element tags to set the attribute of the
        object to display. Coding naming standards should be followed here,
        for example, do not have a space in your variable name.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>reorderingUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url that will be posted to persist the drag and drop. For easy implementation, use a subclass of BaseListRepositioningAction for your server-side code.</description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
    <attribute>
      <name>reorderable</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>  Whether this list is reorderable. Default: false</description>
    </attribute>
    <attribute>
      <name>itemIdAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as an
        id for each table row. This attribute must be set for a
        reorderable list. If more than one method need to be called in
        sequence, "." should be used as a delimiter. The first method
        in the attribute will be called against each object in the
        collection. Then subsequent methods will be called against the
        return value of the previous method call. All the methods
        specified in the attribute must be accessible and the return
        type of the final method must be String. No argument passing
        and type casting will be done during methods invocation. For
        example, if your collection object is
        "blackboard.data.discussionboard.Conference" and the attribute
        is "getId.getExternalString",
        Conference.getId().getExternalString() will be invoked using
        java reflection.
      </description>
    </attribute>
    <attribute>
      <name>itemNameAccessor</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Chained list of method names to get a String to be used as the
        name of a reorderable item in accessible reordering controls.
        This attribute must be set for a reorderable list. See the
        description of reorderableItemIdAccessor attribute.
      </description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>horizontalListRow</name>
    <tag-class>blackboard.servlet.tags.ngui.HorizontalListRowTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Display list oriented in vertical rows
    </description>
    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description></description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description></description>
    </attribute>
    <attribute>
      <name>isRowHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description></description>
    </attribute>
        <attribute>
      <name>nowrap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description></description>
    </attribute>

  </tag>

  <tag bb:public="true">
    <name>landingPage</name>
    <tag-class>blackboard.servlet.tags.ngui.landingPage.LandingPageTag</tag-class>
    <body-content>JSP</body-content>
    <description>Wrapper for the entire landing page</description>
  </tag>

  <tag bb:public="true">
    <name>landingPageColumn</name>
    <tag-class>blackboard.servlet.tags.ngui.landingPage.LandingPageColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description>A Column in the landing page</description>
  </tag>

  <tag bb:public="true">
    <name>landingPageSection</name>
    <tag-class>blackboard.servlet.tags.ngui.landingPage.LandingPageSectionTag</tag-class>
    <body-content>JSP</body-content>
    <description>A section in the landing page.</description>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The navigation item whose url will be used at the anchor, and whose title
        will be the title for the section unless the title attribute is set.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The title of the section displayed as a h3</description>
    </attribute>
    <attribute>
      <name>instructions</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>user instructions for the section</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>landingPageCaret</name>
    <tag-class>blackboard.servlet.tags.ngui.landingPage.LandingPageCaretTag</tag-class>
    <body-content>JSP</body-content>
    <description></description>
  </tag>

  <tag bb:public="true">
    <name>landingPageCaretItem</name>
    <tag-class>blackboard.servlet.tags.ngui.landingPage.LandingPageCaretItemTag</tag-class>
    <body-content>JSP</body-content>
    <description></description>
    <attribute>
      <name>navItem</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The internal nav item handle of the link
      </description>
    </attribute>
    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The onClick javascript handler for the link.
      </description>
    </attribute>
    <attribute>
      <name>status</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The status of the sequence map tab.
          C = complete
          P = in progress
          N = not started
          "" = no style
      </description>
    </attribute>
    <attribute>
      <name>altLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          If you need an alternative label for the link than the one provided by the nav item,
          specify it here.
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          The target frame/window that the link will open in.  Default is no target (the current window)
      </description>
    </attribute>
 </tag>

 <tag bb:public="true">
    <name>drawer</name>
    <tag-class>blackboard.servlet.tags.ngui.DrawerTag</tag-class>
    <body-content>JSP</body-content>
    <description>Renders a form on the page which is the drawer element at the bottom of the page.
    Do not nest inside another form.
    Must be present in the jsp before an associated inventoryList if used in conjunction with an inventoryList
    Also, the inventoryList needs to have shoppingCart set to True in this use case.
    Note that if the drawer is used across page refreshes, the data will be stored in window.name. It is usually
    not an issue if the drawer is used in its own window (like a pop-up for a picker). If your interaction is only
    on one page, you can guarantee window.name will not be impacted by setting useWindowName to 'false'.
    </description>
    <attribute>
      <name>pickerSessionId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Some identifier that avoids collision in case a window is reused (not likely if using pop-ups like in picker).
        The sessionId should be used to identify a drawer session quite uniquely, for example: standards picker for content 2 ('sog2')
      </description>
    </attribute>
    <attribute>
      <name>onSubmit</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        JS function called on submit. If the function returned false, the URL won't be called. Optional.
      </description>
    </attribute>
    <attribute>
      <name>onDrawerChange</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        JS function called when an item is removed or added from/to the drawer. The 1st parameter is the item itself, and
        the 2nd one a boolean (true=added). The item is mutable and can be modified by this function, for example to change
        its attribute values or add extra attributes. It is guaranteed to be called prior to the item being displayed/removed
        in/from the drawer table.
      </description>
    </attribute>
    <attribute>
      <name>formActionUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          URL to which the selection is posted. Not required if onSubmit since onSubmit can actually handle the submission logic. Optional.
      </description>
    </attribute>
    <attribute>
      <name>onCancel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        JS function called on cancel. If the function returned false, the URL won't be called. Optional.
      </description>
    </attribute>
    <attribute>
      <name>cancelUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          URL called when cancel is called. Optional.
      </description>
    </attribute>
    <attribute>
      <name>nonceId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          ID for the post operation, so that it cannot be replayed. Optional.
      </description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        this is displayed as the title next to the the number of elements in the drawer e.g. Selected Standards.
        You can choose to specify a placeholder for the "number of elements". The place holder has to be {drawerItemsCounter}
        e.g. if title = {drawerItemsCounter} Selected Standards,
        will display as 5 Selected Standards. If no placeholder is specified then the counter is always added to
        the end of the title (Default) e.g. Selected Standards 5.
      </description>
    </attribute>
    <attribute>
      <name>showTitleHeader</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        Flag used to hide the title, number of selections and max-min icons. Defaults to true.
      </description>
    </attribute>
    <attribute>
      <name>useWindowName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether the drawer data should store the drawer state in window.name when the page is unloaded.
        If all your interaction occurs on a single page set this to false (default value). If you set it to true
        beware the changes to window.name does not conflict with other usages of that property.
      </description>
    </attribute>
    <attribute>
      <name>extraButtonLabel</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          Localized label for the Extra Button which appears between Cancel and Submit. Optional.
      </description>
    </attribute>
    <attribute>
      <name>extraButtonUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          URL called when the Extra Button is clicked. Optional.
      </description>
    </attribute>
    <attribute>
      <name>onExtraButton</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
          JS function called on clicking Extra Button. If the function returned false, the URL won't be called. Optional.
      </description>
    </attribute>
 </tag>

 <tag bb:public="true">
    <name>drawerColumn</name>
    <tag-class>blackboard.servlet.tags.ngui.DrawerColumnTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      @Since 9.1
      This tag creates a column inside the drawer.
      ]]>
    </description>
    <attribute>
      <name>label</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The header label for the column.
      </description>
    </attribute>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        This name will be used by the js to populate the contents of an individual table cell.
      </description>
    </attribute>
    <attribute>
      <name>accessibilityLabelOnly</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        By default this is false.  If set to true, the label on the column will NOT be shown.
        Instead, it will be placed in a hidden span so that only screen readers will use it.
      </description>
    </attribute>
 </tag>

  <!-- Nested List tag -->
  <tag bb:public="true">
    <name>nestedList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.list.NestedListTag
    </tag-class>
    <tei-class>
        blackboard.servlet.tags.ngui.list.InventoryListTei
    </tei-class>
    <body-content>JSP</body-content>
    <description>
      This is a scaffolding tag for an nested list page and must
      contain at least one list element. It creates an nested
      list used for displaying a collection of objects and its
      attributes. Given a collection of objects, it will nest
      the list based on the level.
    </description>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection of objects passed to the list to be displayed.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified class name of the objects in the collection.
      </description>
    </attribute>
    <attribute>
      <name>objectVar</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to represent a single object in the collection.
        This is used in the list element tags to set the attribute of the
        object to display. Coding naming standards should be followed here,
        for example, do not have a space in your variable name.
      </description>
    </attribute>
    <attribute>
      <name>levelProperty</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Name of the bean property that will be used to nest list.</description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The list description that will be used for the summary of the table that
        contains this list. The description helps users browsing with accessibility
        tools quickly understand what kind of information is in the list table.
        The default summary for the table is: "This is a table showing the
        attributes of a collection of items."
      </description>
    </attribute>
    <attribute>
      <name>listName</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The default value is "bb_list_container".
        Inventory list  will be [listName].
        If there are more than one inventoryLists per page,
        then mandatory unique naming is required for the listName.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>listId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The default value is "listContainer".
      </description>
    </attribute>
    <attribute>
      <name>showTopBottomBars</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The default value is true.
      </description>
    </attribute>
    <attribute>
      <name>isDynamic</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Whether to load the list dynamically using Ajax.
      </description>
    </attribute>
    <attribute>
      <name>listGeneratorUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>URL to generate the list dynamically.</description>
    </attribute>
    <attribute>
      <name>childCount</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A list of child count for each element.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>nestedListElement</name>
    <tag-class>blackboard.servlet.tags.ngui.list.NestedListElementTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A list element represents a column in the nested list. This list will be displayed based on
      the level specified in the levels attribute. If the levels attribute is not specified, the
      element will be displayed for the level which don't have any nestedList element.
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of this list element used by the parent inventory list tag when
        determining what the initial sort column is, for example.
      </description>
    </attribute>
    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>The label for this column. The label should be localized text.</description>
    </attribute>
    <attribute>
      <name>isRowHeader</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating that the information in the body of this tag is the most
        representative of the object represented in the row (for example, with Name, Age, Weight, and Height,
        the Name should be the one with isRowHeader=true). This setting is used to set row header tags as well
        as title attributes to check boxes (if any) within the list table for accessibility compliance. The
        default value is false.
      </description>
    </attribute>
    <attribute>
      <name>displayText</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The nested list will expand/collapse on clicking on the text.
        This text will be used in combination with the row header.
      </description>
    </attribute>
    <attribute>
      <name>showCheckbox</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating if the checkbox need to be displayed
      </description>
    </attribute>
    <attribute>
      <name>checkBoxValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Value of the checkbox
      </description>
    </attribute>
    <attribute>
      <name>checkBoxID</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of the checkbox. If not specified the name and id is "chkbx".
      </description>
    </attribute>
    <attribute>
      <name>showRadio</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute indicating if the radio button need to be displayed
      </description>
    </attribute>
    <attribute>
      <name>radioValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Value of the radio
      </description>
    </attribute>
    <attribute>
      <name>radioID</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Name of the radio. If not specified the name and id is "selection".
      </description>
    </attribute>
    <attribute>
      <name>nowrap</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Sets the nowrap HTML attribute for the column.
        The default is true to allow wrapping.
      </description>
    </attribute>
    <attribute>
      <name>levels</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Comma seperated level attribute. The list element will be displayed only for these levels.
                  If not specified the element will be used for all the levels.
      </description>
    </attribute>
    <attribute>
      <name>rowEndImageUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Specify the image to be displayed at the right end of the element row. If not specified, no image is displayed</description>
    </attribute>
    <attribute>
      <name>rowEndImageAlt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Specify the title 'alt' of the image to be displayed at the right end of the element row. If not specified, no image is displayed</description>
    </attribute>
    <attribute>
      <name>imgUrl</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Specify if a image needs to be displayed before the Display Text.</description>
    </attribute>
    <attribute>
      <name>imgAlt</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Specify if a image alt Message needs to be displayed before the Display Text.</description>
    </attribute>
    <attribute>
      <name>listElementId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Id used for item. If no id is set.</description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Id of item.</description>
    </attribute>
  </tag>


  <tag bb:public="true">
    <name>checkBoxId</name>
    <tag-class>blackboard.servlet.tags.ngui.list.ListCheckboxElementTag</tag-class>
    <body-content>empty</body-content>
    <description>
    <![CDATA[<i>deprecated</i>]]>. Use the ListCheckboxElementTag instead.
      This exists for any 9.0 B2 developer backward compatibility.
      Optional property of a  list item to render a checkbox next to the
      item's title.  Typically used to allow a user to select the item in order to
      execute an action (eg. deletion)
    </description>
    <attribute>
      <name>name</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Name of checkbox.
      </description>
    </attribute>
    <attribute>
      <name>value</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Value of an checkbox.
      </description>
    </attribute>
  </tag>

    <tag>
    <name>customFormBuilder</name>
    <tag-class>blackboard.servlet.tags.ngui.customformbuilder.CustomFormBuilderTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      Creates a Custom Form Builder widet ( aka buildapage).
    </description>
    <attribute>
      <name>containerId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Id of Custom Form Builder Container.
      </description>
    </attribute>
    <attribute>
      <name>configMappings</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      An instance of blackboard.servlet.tags.ngui.customformbuilder.CustomFormBuilderConfig.
      Custom form configuration to define component type to html widget mappings.
      </description>
    </attribute>
    <attribute>
      <name>reorderType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>A string describing the type of item being reordered (used as part of the title on the accessible repositioning controls).  Required if reorderable.</description>
    </attribute>
  </tag>

  <tag>
    <name>customFormBuilderInputText</name>
    <tag-class>blackboard.servlet.tags.ngui.customformbuilder.CustomFormBuilderInputTag</tag-class>
    <body-content>empty</body-content>
    <description>
      An html input control (eg. textbox, vtbe, textbox and select box) which can be added to a
      custom form builder container.  Must be used within the CustomFormBuilderTag.
    </description>
     <attribute>
      <name>shareWithStudents</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether this component can be shared with students.
      </description>
    </attribute>
     <attribute>
      <name>showDropDown</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether top render a drop down box
      </description>
    </attribute>
    <attribute>
      <name>componentName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Localized name of component.
      </description>
    </attribute>
    <attribute>
      <name>componentType</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Type of component.
      </description>
    </attribute>
    <attribute>
      <name>isSectionHeading</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether this is a section heading component.
      </description>
    </attribute>
    <attribute>
      <name>isLabelOverridden</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether label has been overridden.
      </description>
    </attribute>
    <attribute>
      <name>inputTextValue</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Value of the input text.
      </description>
    </attribute>
     <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Name of checkbox.
      </description>
    </attribute>
      <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      The options to display if this component is being used as a Select box.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>customFormBuilderInputSelect</name>
    <tag-class>blackboard.servlet.tags.ngui.customformbuilder.CustomFormBuilderInputSelectTag</tag-class>
    <body-content>empty</body-content>
    <description>
      An html input control (textbox and select box) which can be added to a
      custom form builder container.  Must be used within the CustomFormBuilderTag.
    </description>
     <attribute>
      <name>shareWithStudents</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether this component can be shared with students.
      </description>
    </attribute>
    <attribute>
      <name>componentName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Localized name of component.
      </description>
    </attribute>
    <attribute>
      <name>componentType</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Type of component.
      </description>
    </attribute>
    <attribute>
      <name>isLabelOverridden</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether label has been overridden.
      </description>
    </attribute>
    <attribute>
      <name>inputMap</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Value of the input text.
      </description>
    </attribute>
     <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Name of checkbox.
      </description>
    </attribute>
    <attribute>
      <name>options</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      The options to display if this component is being used as a Select box.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>customFormBuilderTextbox</name>
    <tag-class>blackboard.servlet.tags.ngui.customformbuilder.CustomFormBuilderTextboxTag</tag-class>
    <body-content>empty</body-content>
    <description>
      An html input control (vtbe) which can be added to a
      custom form builder container.  Must be used within the CustomFormBuilderTag.
    </description>
     <attribute>
      <name>shareWithStudents</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether this component can be shared with students.
      </description>
    </attribute>
    <attribute>
      <name>componentName</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Localized name of component.
      </description>
    </attribute>
    <attribute>
      <name>isLabelOverridden</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Whether label has been overridden.
      </description>
    </attribute>
    <attribute>
      <name>componentType</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Type of component.
      </description>
    </attribute>
    <attribute>
      <name>inputContent</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Value of the vtbe.
      </description>
    </attribute>
    <attribute>
      <name>id</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      Name of checkbox.
      </description>
    </attribute>
  </tag>
  <tag>
    <name>contentsummary</name>
    <tag-class>blackboard.servlet.tags.ngui.ContentSummaryTag</tag-class>
    <body-content>empty</body-content>
    <description>
    Renders the summary box of a content
    </description>
    <attribute>
      <name>content</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
      A content that need to be rendered
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>flowListElement</name>
    <tag-class>blackboard.servlet.tags.ngui.flowlist.FlowInventoryListItemTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A list element represents a column in the flow list.
    </description>
  </tag>

  <tag bb:public="true">
    <name>flowInventoryList</name>
    <tag-class>
        blackboard.servlet.tags.ngui.flowlist.FlowInventoryListTag
    </tag-class>
    <tei-class>
        blackboard.servlet.tags.ngui.list.InventoryListTei
    </tei-class>
    <body-content>JSP</body-content>
    <description>
      Displays items in a left-to-right flow.
    </description>
    <attribute>
      <name>collection</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The collection of objects passed to the list to be displayed.
      </description>
    </attribute>
    <attribute>
      <name>className</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The fully qualified class name of the objects in the collection.
      </description>
    </attribute>
    <attribute>
      <name>objectVar</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to represent a single object in the collection.
        This is used in the list element tags to set the attribute of the
        object to display. Coding naming standards should be followed here,
        for example, do not have a space in your variable name.
      </description>
    </attribute>
    <attribute>
      <name>shoppingCart</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Indicates whether this list should behave as a shopping cart. In shopping
        cart mode the check boxes are coupled with a page state 'the drawer'. When
        an element is checked it is added to the drawer, and if removed from the
        drawer it is also unchecked from the list. Drawer state survives page refresh
        and, once the list is displayed, its check boxes are updated to match the current
        state of the drawer.
      </description>
    </attribute>
    <attribute>
      <name>emptyMsg</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The localized text message to be displayed if the given collection is empty.
        The default message is "No items found."
      </description>
    </attribute>
    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The list description that will be used for the summary of the table that
        contains this list. The description helps users browsing with accessibility
        tools quickly understand what kind of information is in the list table.
        The default summary for the table is: "This is a table showing the
        attributes of a collection of items."
      </description>
    </attribute>
    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Url of current page to be used in inventory list links like sort and paging.
      </description>
    </attribute>
    <attribute>
      <name>includePageParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Flag denoting whether to include page parameters in the list urls. When set to false,
        only list tag related params will be appended to the provided url or the one obtained
        from request.
        Default value is true, therefore unless some hidden input should be carried
        forward to next pages, such as search parameters, it is recommended to consider
        setting this value to false. Also, if a page has input that is too long and should
        not be appended to url, such as textbox or formatted text description, or can be
        reached from another action as forward, this attribute may need to be set to false.
      </description>
    </attribute>
    <attribute>
      <name>contextParameters</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Query-string formatted string of additional request parameters to pass to the struts
        action.
      </description>
    </attribute>
    <attribute>
      <name>showAll</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Boolean attribute for displaying the all items in the list. The default is false for
        showing all items.
      </description>
    </attribute>
      <attribute>
      <name>renderAjax</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>
        <![CDATA[
        Boolean attribute for using ajax post to render the list items. The default is false, does not use ajax
        calls for subsequent paging and sorting requests or in general list results refresh. If set to true, ajax post
        requests are made, the page rendering happens in ajaxMode. All taglibs modified to work optimally in this mode
         will honor this setting in subsequent ajax posts. The taglibs that are optimized have been updated to explicitly
         state that in their taglib description.
         ]]>
      </description>
    </attribute>
     <attribute>
      <name>listId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The default value is "listContainer".
        Inventory list  will be [listId].
        If there are more than one inventoryLists per page,
        then mandatory unique naming is required for the listId.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>pagingInfo</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
    <description>
      Provides showAll/pageIndex/pageSize/sortCol/sortDir/recordCount informations
      about a data-set, then in the TagHelper we needn't get again. This is
      used for paging.
      </description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>tabbedPanels</name>
    <tag-class>blackboard.servlet.tags.ngui.tabbedpanels.TabbedPanelsTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A panel that represents a tabbed set of pages.  If the panel contains only 1
      tab, the tab's contents are displayed without the tab panels.
    </description>
    <attribute>
      <name>collapsible</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Whether to allow the tabbed panels to be collapsed.  Default is true.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>showTabPanelIfOnlyOne</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Whether to show the tab panel if it consists of only one tab.  Default is true.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>expandFirst</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Whether to show the first tab expanded by default.  Set to false to have all tabs be
        initially closed.  Default is true.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>persistId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        User data ID used to persist the visible panel of the tabbedPanel.
        ]]>
      </description>
    </attribute>
  </tag>
  <tag bb:public="true">
    <name>tabbedPanel</name>
    <tag-class>blackboard.servlet.tags.ngui.tabbedpanels.TabbedPanelTag</tag-class>
    <body-content>JSP</body-content>
    <description>
      A tab contained by a Tabbed Panel.  Must be used with the tabbedPanels tag.
    </description>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Localized title of the tab.
        ]]>
      </description>
    </attribute>
  </tag>

  <tag>
    <name>courseFilesExcludeFoldersPicker</name>
    <tag-class>blackboard.servlet.tags.ngui.picker.CourseFilesExcludeFoldersPickerTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Renders a course files picker to select folders to exclude from their Course Files Package.
      ]]>
    </description>
    <attribute>
      <name>principal</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Principal to use when launching the picker</description>
    </attribute>
     <attribute>
      <name>courseId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Course id of the home folder to show in the picker.</description>
    </attribute>
    <attribute>
      <name>formId</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Id of the form</description>
    </attribute>
  </tag>

  <tag bb:public="true">
    <name>confirmPopup</name>
    <tag-class>blackboard.servlet.tags.ngui.ConfirmPopupTag</tag-class>
    <body-content>empty</body-content>
    <description>
      Initializes a ConfirmPopup Javascript object, which can be used to display a popup confirmation
      box with a "don't show this message again" checkbox.
    </description>
    <attribute>
      <name>var</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>Javascript variable popup object should be assigned to</description>
    </attribute>
    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>Title of the popup window</description>
    </attribute>
    <attribute>
      <name>message</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description>Message to display in the popup window</description>
    </attribute>
    <attribute>
      <name>registryKey</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String</type>
      <description></description>
    </attribute>
  </tag>

  <tag>
    <name>uiStrategy</name>
    <tag-class>blackboard.servlet.tags.ngui.strategy.UiStrategyTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      A basic tag for injecting a strategy instance into the parent page (tag).
      This was done as oppossed to addin a new property to the page tag to avoid
      exposure in the public API.
      ]]>
    </description>
    <attribute>
      <name>strategy</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>An instance of a UiStrategy derived value to use in the current page</description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The navigation item of the current page.  This value should be set here
        instead of in the parent page tag or elsewhere to ensure the proper
        handling of the breadcrumb and other navigation based elements on the page.
      </description>
    </attribute>
  </tag>

  <tag>
    <name>userNametag</name>
    <tag-class>blackboard.servlet.tags.ngui.data.UserNametagTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Renders a user nametag that may contain avatar and name information for a specific user.
      If a profile provider is registered in the system, the nametag will also render the toggle
      used for displaying the user's profile card upon some user interaction (eg. mouse over).
      <p>
      <b>Example Tag Usage</b>
      <p>
      The typical way to render a nametag is to add the following to the JSP page, letting the
      attributes use the defaults (displaying the avatar (if applicable) and the name, formatted
      to the short localized format).
      <p>
      <code>&lt;bbNG:userNametag userIdStr="${userIdExtStr}" /&gt;</code>
      <p>
      <b>Output Details</b>
      <p>
      The actual rendered output will vary depending on whether a profile provider is available,
      if the specified user has a profile via the provider, and the specified <code>displayType</code>.
      See the following chart for more information:
      <p>
      <table border="1">
        <thead>
          <tr>
            <th>Display type</th>
            <th>Profile Provider Available to user</th>
            <th>Rendered output</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Avatar</td>
            <td>Yes</td>
            <td>User's profile avatar is rendered and his profile card will show upon interactivity.</td>
          </tr>
          <tr>
            <td>Avatar</td>
            <td>No</td>
            <td>
              User's Learn avatar is rendered if avatars are enabled in the system and the user
              has opt into displaying his avatar. Otherwise, nothing is rendered.
            </td>
          </tr>
          <tr>
            <td>Name</td>
            <td>Yes</td>
            <td>User's name information is rendered and his profile card will show upon interactivity.</td>
          </tr>
          <tr>
            <td>Name</td>
            <td>No</td>
            <td>User's name information is rendered.</td>
          </tr>
          <tr>
            <td>Both</td>
            <td>Yes</td>
            <td>
              User's profile avatar along with the name information is rendered.
              The user's profile card will show upon interactivity with the avatar.
            </td>
          </tr>
          <tr>
            <td>Both</td>
            <td>No</td>
            <td>
              User's Learn avatar* along with the name information is rendered.
              <p>
              * User's Learn avatar is rendered if avatars are enabled in the system and the user
                has opt into displaying his avatar. Otherwise, nothing is rendered.
            </td>
          </tr>
        </tbody>
      </table>
      <p>
      <b>Exceptional Use Cases</b>
      <p>
      <i>Nametag tags in <code>&lt;includedPage&gt;</code>s</i>
      <p>
        In the case where user nametag tags are used in a JSP page that is using the <code>includedPage</code> tag,
        it may be necessary to manually set up the profile card handler so that profile cards appear appropriately
        through the toggles rendered by the nametag. This is due to the fact that handler scripts may not be loaded
        properly when rendered in an included page and therefore cannot be executed. Manually setting up the profile
        card handler can be done by adding the following to the PARENT page of the included page where nametag tags
        are used:
      <p>
        <code>
          &lt;bbData:enum var="displayTypeEnum" type="blackboard.servlet.tags.ngui.data.UserNametagTag$DisplayType"/&gt;
          <br>
          &lt;bbNG:userNametag displayType="${displayTypeEnum['SetupProfileCards'].name}" /&gt;
        </code>
      <p>
      <i>Server-side rendering of nametags</i>
      <p>
        In the case where user nametags need to be rendered but the JSP tag cannot be used directly in the JSP
        page (eg. names rendered dynamically to the page via javascript like the Discussion Board forum tree
        view page), user nametags can still be rendered with the following steps:
      <ol>
        <li>
          <b>Render the nametag</b> - Get the rendered HTML for a user nametag by calling the render method in the
          <code>UserNametagRendererUtil</code> java class and writing that to the page.
        </li>
        <li>
          <b>Manually set up profile card handlers</b> - Set up profile card handlers by calling the respective
          <code>attachProfileCardsHandler</code> method in <code>UserNametagRendererUtil</code>, OR, do set up
          in the JSP where the nametags will appear by adding this tag in the following way:
          <p>
          <code>
            &lt;bbData:enum var="displayTypeEnum" type="blackboard.servlet.tags.ngui.data.UserNametagTag$DisplayType"/&gt;
            <br>
            &lt;bbNG:userNametag displayType="${displayTypeEnum['SetupProfileCards'].name}" /&gt;
          </code>
        </li>
      </ol>
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Optionally override the id attribute on the profile card toggle HTML element to ensure
        uniqueness amongst all user nametags in a given page. By default if a value is not
        provided, the id is set to <code>nametag[USER_ID_EXTERNAL_STRING]</code>, e.g.,
        "<code>nametag_1_1</code>".
        <p>
        To skip generation of an id attribute, set to empty string.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>userIdStr</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The external id string of the user whose nametag to render.
        <p>
        Either this or the <code>user</code> attribute is <b>required</b> for all display
        types except for <code>SetupProfileCards</code>.
        <p>
        <b>Note:</b> The recommended attribute to use to get user information is the <code>user</code>
        attribute if the <code>blackboard.data.user.User</code> object is available. In addition,
        users who are disabled <b>will not</b> be loaded via this attribute. To load the nametag for
        disabled users, pass the preloaded User object to this tag via the <code>user</code> attribute.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>user</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The <code>blackboard.data.user.User</code> object of the user whose nametag to render.
        <i>(Recommended)</i>
        <p>
        Please note that in order for the nametag to render the desired output, the given user
        object should have the following properties populated (user properties that might not
        be there if the given user object is loaded via a custom filtered database object map,
        for example):
        <ol>
          <li>
            the <code>UserDef</code> property specified in the <code>nameFormat</code>
            attribute (if <code>UserDef</code> is the name format given in the
            <code>nameFormat</code> attribute) to ensure the correct rendering of the user's
            name information and
          </li>
          <li>
            <code>UserCloudProfileDef.CLOUD_ID</code> and
            <code>UserCloudProfileDef.CLOUD_AVATAR_URL</code> to ensure the correct rendering
            of the user's profile avatar
          </li>
        </ol>
        <p>
        Either this or the <code>userIdStr</code> attribute is <b>required</b> for all display
        types except for <code>SetupProfileCards</code>.
        <p>
        <b>Note:</b> It is recommended to use this attribute to get user information instead of the
        <code>userIdStr</code> attribute if the <code>blackboard.data.user.User</code> object is
        available.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>displayType</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The type of user nametag to render.
        <p>
        Value must be the string representation of a <code>UserNametagTag.DisplayType</code> enum.
        Default is <code>Both</code>.
        <p>
        <b>Note:</b> There is a special display type, <code>SetupProfileCards</code>, used when the
        rendering of the nametag is done via the <code>UserNametagRendererUtil</code> on the server-side
        (and not directly via this tag in the JSP). What setup does is it attaches profile card handlers
        required for rendering profile cards (normally javascript file(s) and call(s)) toggled via what
        nametag renders. This display type is purely for setup and does not render any visual elements.
        When this is set as the display type, no other attributes to this tag should be provided.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>cssClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional CSS class to override the styling of both the avatar and name elements (when applicable)
        in the nametag. By default, the CSS class is set to <code>profileCardAvatarThumb</code>.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>nameFormat</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The format or content of the name information of the user to be displayed if the chosen
        <code>displayType</code> contains name information.
        <p>
        Value must be the string representation of either a <code>BbLocale.Name</code>
        constant or a <code>UserDef</code> string value prefixed with <code>"BbLocale.Name"</code>
        or <code>"UserDef"</code>.
        <p>
        For example, provide <code>"BbLocale.Name.SHORT"</code> to output the short localized
        format of the user's name, or <code>"UserDef.UserName"</code> to output the user's
        username.
        <p>
        Default is <code>"BbLocale.Name.SHORT"</code>.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>nameOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional override for the name information of the user to be displayed if the chosen
        <code>displayType</code> contains name information. If provided, <code>nameFormat</code>
        is ignored and the value provided with this attribute is rendered instead.
        <p>
        Use this attribute only if the user's name information cannot be retrieved given the
        <code>nameFormat</code> options.
        ]]>
      </description>
    </attribute>
    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        The target frame/window that links in the user's profile card, if applicable and
        utilized by the profile provider, will open in. The default is "_blank" (new window)
        if in a course context; otherwise, the target attribute will not be set and links
        are to open in the current window.
        ]]>
      </description>
    </attribute>
  </tag>

  <tag>
    <name>tree</name>
    <tagclass>blackboard.servlet.tags.ngui.tree.DynaTreeTag</tagclass>
    <bodycontent>JSP</bodycontent>
    <description>
      <![CDATA[
      Renders a dynamic tree widget based on jQuery-based DynaTree.
      docs: http://wwwendt.de/tech/dynatree/doc/dynatree-doc.html
      When using this tree, typically, an external js file/function will be specified which provides
      the glue for hooking tree functionality to the page.
      <p>
      <b>Example Tag Usage</b>
      <p>
    <bbNG:tree nodes="<%=nodes%>" extJsFile="/webapps/assessment/PortfolioTree.js" extJsFunc="PortfolioTree.init"
      options="{ activeVisible: true, clickFolderMode: 3 }"/>
        ]]>
    </description>
    <attribute>
      <name>treeId</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional id for the the outer tree div. If not provided, "bb_tree" will be used.
        A unique id must be specified if the page has more than one tree.
        ]]>
    </description>
    </attribute>
    <attribute>
      <name>treeClass</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional CSS class to add to the outer tree div.
        ]]>
    </description>
    </attribute>
    <attribute>
      <name>nodes</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        An optional List of DynaTreeNode, which will be used to initially populate the tree.
        ]]>
    </description>
    </attribute>
    <attribute>
      <name>options</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Optional options to control look/behavior of the tree as well as adding event handlers.
        ]]>
    </description>
    </attribute>
    <attribute>
      <name>extJsFile</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Optional external JavaScript to include when rendering the tag.
        ]]>
    </description>
    </attribute>
    <attribute>
      <name>extJsFunc</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Optional JavaScript function to invoke for initializing the tree. If not provided, default initialization function will be invoked.
        ]]>
    </description>
    </attribute>
  </tag>
  
  <tag>
    <name>calendarType</name>
    <tag-class>blackboard.servlet.tags.ngui.CalendarTypeTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      A basic tag for injecting the selection of Calendar Type.
      ]]>
    </description>
    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Id of the select element</description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        The calendar type that will be selected while displaying the select element. 
        Valid values are GREGORIAN, HIJRI, GREGORIAN_HIJRI, HIJRI_GREGORIAN
      </description>
    </attribute>
    <attribute>
      <name>displayDefaultOption</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description>Boolean: whether to show System default option or not.</description>
    </attribute>
  </tag>

 <tag bb:public="true">
    <name>image</name>
    <tag-class>blackboard.servlet.tags.ngui.ImageTag</tag-class>
    <body-content>empty</body-content>
    <dynamic-attributes>true</dynamic-attributes>
    <description>
      <![CDATA[
      Generates img tag for a page
      ]]>
    </description>
    <attribute>
      <name>src</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>Url for the images.</description>
    </attribute>
  </tag>
  <!-- Functions -->

  <function bb:public="true">
    <name>EncodeLabel</name>
    <function-class>blackboard.platform.intl.JsResource</function-class>
    <function-signature>java.lang.String encode( java.lang.String)</function-signature>
    <description>
      <![CDATA[
      The EncodeLabel function provides JSTL-accessible support for encoding
      strings for use in javascript dialogs.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;bbNG:jsBlock&gt;<br>
        &nbsp;&nbsp;&lt;SCRIPT LANGUAGE="Javascript"&gt;<br>
        &nbsp;&nbsp;function alertMe()<br>
        &nbsp;&nbsp;{<br>
        &nbsp;&nbsp;&nbsp;&nbsp;alert( "<b>${bbNG:EncodeLabel(validate)}</b>" );<br>
        &nbsp;&nbsp;}<br>
        &nbsp;&nbsp;&lt;/SCRIPT&gt;<br>
        &lt;/bbNG:jsBlock&gt;<br>
      </code>
      ]]>
    </description>

  </function>

  <function bb:public="true">
    <name>EncodeHtml</name>
    <function-class>blackboard.platform.intl.JsResource</function-class>
    <function-signature>java.lang.String encodeHTML( java.lang.String)</function-signature>
    <description>
      <![CDATA[
      The EncodeHtml function provides JSTL-accessible support for encoding
      strings for use in javascript function.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;bbNG:jsBlock&gt;<br>
        &nbsp;&nbsp;&lt;SCRIPT LANGUAGE="Javascript"&gt;<br>
        &nbsp;&nbsp;function alertMe(s)<br>
        &nbsp;&nbsp;{<br>
        &nbsp;&nbsp;&nbsp;&nbsp;alert( s );<br>
        &nbsp;&nbsp;}<br>
        &nbsp;&nbsp;alertMe('<b>${bbNG:EncodeHtml(validate)}</b>');<br>
        &nbsp;&nbsp;&lt;/SCRIPT&gt;<br>
        &lt;/bbNG:jsBlock&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>UrlEncode</name>
    <function-class>blackboard.util.URLUTF8Encoder</function-class>
    <function-signature>java.lang.String encode( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The UrlEncode function provides JSTL-accessible support for encoding
      strings for use in URL parameters.
      <p>
      Strings are URL encoded using UTF-8 encoding.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;a href="foo.jsp?bar=${bbNG:UrlEncode(someVariable)}" &gt;Link&lt;/a&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>HtmlEscape</name>
    <function-class>blackboard.util.TextFormat</function-class>
    <function-signature>java.lang.String escape( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The HtmlEscape function provides JSTL-accessible support for escaping
      strings for use in HTML attributes. (ensures quotes are escaped properly)
      If the string to be escaped is null or empty, returns <code>"&nbsp;"</code>
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;a href="#test" title="${bbNG:HtmlEscape(validate)}"&gt;Link&lt;/a&gt;<br>
      </code>
      ]]>
    </description>
  </function>
  
  <function bb:public="true">
    <name>HtmlUnescape</name>
    <function-class>blackboard.util.TextFormat</function-class>
    <function-signature>java.lang.String unescape( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The HtmlUnescape function provides JSTL-accessible support for unescaping some special html characters 
      and <br> tag within strings for using in HTML 'value' and 'optionLabel' attributes.
      It is used especifically for the case where you want to edit a value that was saved in the database 
      as escaped html using the method handleHtmlInput() in blackboard.webapps.assessment.AssessmentWebSecurityUtils.
      The special html characters for unescaping includes:
      quotation mark: "<br>
      single quote: ' <br>
      less than: <  <br>
      greater than: >  <br>
      ampersand: &  <br>
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;bbNG:textElement name="name" value="${bbNG:HtmlUnescape( assessmentForm.name )}" ... /&gt;
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>HtmlEscapeEx</name>
    <function-class>blackboard.util.TextFormat</function-class>
    <function-signature>java.lang.String escapeEx( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The HtmlEscapeEx function provides JSTL-accessible support for escaping
      strings for use in HTML attributes. (ensures quotes are escaped properly)
      If the string to be escaped is null or empty, returns an empty string, <code>""</code>
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;a href="#test" title="${bbNG:HtmlEscapeEx(validate)}"&gt;Link&lt;/a&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="false">
    <name>Sanitize</name>
    <function-class>blackboard.util.TextFormat</function-class>
    <function-signature>java.lang.String sanitizeId( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The Sanitize function provides JSTL-accessible support for sanitizing a string
      for use as either an HTML or CSS ID, replacing all forbidden characters with
      acceptable substitutes.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;div id="${bbNG:Sanitize(foo)}&gt;
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>JsProtoString</name>
    <function-class>blackboard.platform.intl.JsResource</function-class>
    <function-signature>java.lang.String jsProtoString( java.lang.String)</function-signature>
    <description>
      <![CDATA[
      The JsProtoString function provides JSTL-accessible support for encoding strings that are used
      in javascript: "protocol" href attributes. Since some but not all browsers decode encoded strings in
      JS, this is required but only for javascript: href attributes.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;a href="javascript:doFunc(${bbNG:JsProtoString('/foo/bar%25me'))"&gt;Link&lt;/a&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>CreateExternalIdString</name>
    <function-class>blackboard.persist.PersistUtil</function-class>
    <function-signature>java.lang.String createExternalIdString( blackboard.persist.Id )</function-signature>
    <description>
      Generates an id string which contains both data type and key components.
      Useful for cases where you must display a list of heterogenous objects and
      be able to identify them uniquely later by a single value.
    </description>
  </function>

  <function bb:public="true">
    <name>FilterHtml</name>
    <function-class>blackboard.util.XSSUtil</function-class>
    <function-signature>java.lang.String filter( java.lang.String)</function-signature>
    <description>
      The FilterJs function provides JSTL-accessible support for filtering HTML
      fragments for dangerous Javascript:
      - script tags and all event-handlers are disabled.
      - object, embed, and applet tags are left unaltered.
      - form, input and textarea tags are disabled.
      - src, href and similar attributes are filtered.
    </description>
    <example>
      <![CDATA[
        <!-- The example below illustrates usage of bbNG:FilterHtml() -->
        <%
           request.setAttribute( "theHtmlCode", someHtmlCode );
        %>

        <!-- Call bbNG:FilterHtml() -->
        ${bbNG:FilterHtml(theHtmlCode)}
      ]]>
    </example>
  </function>

  <function bb:public="true">
    <name>isLeftToRight</name>
    <function-class>blackboard.servlet.util.TagUtil</function-class>
    <function-signature>boolean isLeftToRight()</function-signature>
    <description>
      Whether current locale uses an LTR language.
      Callers should keep a local cache of this value when feasible.
    </description>
  </function>

  <function bb:public="true">
    <name>htmlDirValue</name>
    <function-class>blackboard.servlet.util.TagUtil</function-class>
    <function-signature>java.lang.String getHtmlDirValue()</function-signature>
    <description>
      Returns "ltr" for Left-to-Right and "rtl" for Right-to-Left.
      Used as the value for the html tag's dir attribute for JSP's that are unable to
      use the "docTemplate" custom tag.
      Callers should keep a local cache of this value when feasible.
    </description>
  </function>

  <function bb:public="true">
    <name>align</name>
    <function-class>blackboard.servlet.util.TagUtil</function-class>
    <function-signature>java.lang.String getAlignAttrValue(java.lang.String)</function-signature>
    <description>
    This method takes in, as parameter, the semantic or relative value of "natural" or "inverse",
    and returns the absolute alignment value of "left" or "right" based on the locale.
    For example, if the locale is Right-to-Left (RTL), then for input value of "natural" or "", the method
    returns the string literal "right".  If input value is "inverse", it returns "left".
    Similarly if the locale is Left-to-Right (LTR), "left" is returned for an input value of "natural" or "",
    and "right" is returned for "inverse".
    If a value other than "natural" or "inverse" is passed in, no translation is performed and the
    input value is returned as is.
    </description>
  </function>

  <function bb:public="true">
    <name>formatNameAndValue</name>
    <function-class>blackboard.servlet.util.TagUtil</function-class>
    <function-signature>java.lang.String formatNameAndValue(java.lang.String, java.lang.String)</function-signature>
    <description>
        Returns a HTML bidirectional  aware text consisting of a name value.
        In a left to right locale the text will be displayed in a browser as name followed by value.
        In a right to left locale the text will be displayed in a browser as value followed by name.
    </description>
  </function>

  <function bb:public="true">
    <name>formatUserName</name>
    <function-class>blackboard.servlet.util.BbLocaleUtil</function-class>
    <function-signature>java.lang.String formatName( java.lang.Object, java.lang.Object )</function-signature>
    <description>
     Returns the name of the specified user in the specified format suitable for display in the
     current Locale.
    </description>
  </function>

  <function bb:public="true">
    <name>convertActionOptionsToActionMenuItems</name>
    <function-class>blackboard.servlet.tags.ActionBarTag</function-class>
    <function-signature>
      java.util.List convertActionOptionsToActionMenuItems( java.lang.String, java.util.List )
    </function-signature>
    <description>
      <![CDATA[
      Convert a list of action option items used in an Action Menu into the new action menu items.
      This function may be used when converting pages with actionSelect tags to NG pages
      with actionMenu tags as an interim solution.
      <b>This method should not be used for writing new pages. New pages should create action menu items directly.</b>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>stringToCal</name>
    <function-class>blackboard.servlet.util.DatePickerUtil</function-class>
    <function-signature>
      Calendar pickerDatetimeStrToCal(java.lang.String)
    </function-signature>
    <description>
      The stringToCal function provides JSTL-accessible support for converting
      a date-time string in the internal format the date pickers use into a
      Calendar object.
    </description>
  </function>

  <function bb:public="true">
    <name>calendarToString</name>
    <function-class>blackboard.servlet.util.DatePickerUtil</function-class>
    <function-signature>
      String pickerDatetimeCalToStr(java.util.Calendar)
    </function-signature>
    <description>
      The calendarToString function provides JSTL-accessible support for converting
      a Calendar object to a date-time string in the internal format the date pickers use.
    </description>
  </function>

  <function bb:public="true">
    <name>getThemeBase</name>
    <function-class>blackboard.servlet.util.ThemeUtil</function-class>
    <function-signature>
      String getThemeBase(javax.servlet.jsp.PageContext)
    </function-signature>
    <description>
      Determines the path to the current theme's resource directory.
    </description>
  </function>

  <function bb:public="true">
    <name>isToolAvailableForCurrentCourseUser</name>
    <function-class>blackboard.data.course.CourseToolUtil</function-class>
    <function-signature>
      boolean isToolAvailableForCurrentCourseUser(java.lang.String)
    </function-signature>
    <description>
      True if the tool is available for current user
    </description>
  </function>

  <!-- End of Functions -->

  <!-- Escaping Functions -->

  <function bb:public="true">
    <name>EscapeForHTML</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForHTML( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForHTML function provides JSTL-accessible support for escaping
      strings for use in HTML using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;b &gt;${bbNG:EscapeForHTML(validate)}&lt;/b&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>EscapeForHTMLAttribute</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForHTMLAttribute( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForHTML function provides JSTL-accessible support for escaping
      attribute strings for use in HTML attributes using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;a href="#test" title="${bbNG:EscapeForHTMLAttribute(validate)}"&gt;Link&lt;/a&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>EscapeForJavascript</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForJavascript( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForJavascript function provides JSTL-accessible support for escaping
      strings for use in Javascript embedded in a JSP using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;script type="text/javascript" &gt;<br>
        function foo() { return confirm( "${bbNG:EscapeForJavascript(validate)}" ) }<br>
        &lt;/script&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>EscapeForURL</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForURL( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForURL function provides JSTL-accessible support for escaping
      URLs for use in HTML using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        <b>&lt;fmt:message var="validate" key="validate.key" bundle="${bundles.some_bundle}" /&gt;</b><br>
        &lt;a href="${bbNG:EscapeForURL(validate)}" title="test"&gt;Link&lt;/a&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>EscapeForCSS</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForCSS( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForCSS function provides JSTL-accessible support for escaping
      CSS for use in web pages using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;style type="text/css"&gt;hr {color:${bbNG:EscapeForCSS(dynamicCSS)};}&lt;/style&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>EscapeForXML</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForXML( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForXML function provides JSTL-accessible support for escaping
      strings for use in XML using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;xmltag&gt;${bbNG:EscapeForXML(validate)}&lt;/xmltag&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <function bb:public="true">
    <name>EscapeForXMLAttribute</name>
    <function-class>blackboard.platform.security.EscapeUtility</function-class>
    <function-signature>java.lang.String escapeForXMLAttribute( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The EscapeForXMLAttribute function provides JSTL-accessible support for escaping
      attribute strings for use in XML attributes using the OWASP-ESAPI library.
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;xmltag&gt;&lt;child attr="${bbNG:EscapeForXMLAttribute(validate)}"&gt;content&lt;child&gt;&lt;/xmltag&gt;<br>
      </code>
      ]]>
    </description>
  </function>
  <function bb:public="true">
    <name>GetCdnURL</name>
    <function-class>blackboard.util.CdnUtil</function-class>
    <function-signature>java.lang.String getCdnURL( java.lang.String )</function-signature>
    <description>
      <![CDATA[
      The GetCdnURL function provides JSTL-accessible support for returning CDN url
      attribute strings for use in img src attribute .
      <p>
      <B>Example usage:</B>
      </p>
      <code>
        &lt;img tag&gt; src="${bbNG:GetCdnURL(URL)}" /imgtag&gt;<br>
      </code>
      ]]>
    </description>
  </function>

  <!-- End of Escaping Functions -->

</taglib>
