<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="bbNG.xsl"?>
    
<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:bb="http://www.blackboard.com/tld-public-api"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd" 
        version="2.0"> 
                                                                                              
  <tlib-version>1.0</tlib-version>    
  <short-name>bbData</short-name>
  <uri>/bbData</uri>
  <description>
    The Blackboard Data tag library encapsulates interaction with the Blackboard data and
    logic layer to allow separation of the UI elements (bbUI) and other page logic.
  </description>

  <tag bb:public="true">
    <name>context</name>

    <tag-class>blackboard.servlet.tags.data.ContextTag</tag-class>

    <tei-class>blackboard.servlet.tags.data.ContextTei</tei-class>
    <body-content>JSP</body-content>

    <description>
      In order to support forward compatibility for 5.5 extension into 6, we need to build
      a hook that will allow us to capture virtual installation info in 6.
      Programmatically, this was going to be through the Context object. We need to
      formalize the interface in 5.5 so that developers can use the API to ensure 6.0
      conformance. As a high-level wrapper, we also need a taglib for simple inclusion.
      The taglib would be a no-arg tag required before any service APIs were called, with
      a required closing tag at the bottom of the page (ensuring context is released). API
      calls would be Context.setInstance( HttpServletRequest req ) and
      Context.releaseInstance(). We need to include some kind of integrity
      checking/reference counting to ensure proper behavior of nested calls.
    </description>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        May be used to explicitly reference the context object elsewhere in the page (also
        can access the context from the Java APIs, as usual)
      </description>
    </attribute>
    <attribute>
      <name>license</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        License key, used to ensure that page will not display if the license is not valid
      </description>
    </attribute>
    <attribute>
      <name>navItem</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Navigation Item handle: initializes a NavigationItemControl that will automatically handle entitlements,
        and also sets default values for the page title and breadcrumbs on a given page
      </description>
    </attribute>
    <attribute>
      <name>authentication</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A Y|N indicator for whether a logged-in user is required. Default is Y. if you set
        this to N, you better know why, and you better not set entitlement or navItem
      </description>
    </attribute>

    <attribute>
      <name>entitlements</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <type>java.lang.String[]</type>
      <description>
        A String[] containing entitlements to check before displaying the page
        entitlements as per
        blackboard.platform.security.AccessManagerService.userHasAnyEntitlements()
      </description>
    </attribute>

    <attribute>
      <name>entitlement</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        A String containing a single entitlement to check before displaying the page
        entitlement as per
        blackboard.platform.security.AccessManagerService.userEntitlement()
      </description>
    </attribute>

    <attribute>
      <name>contextOverride</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        May be used to explicitly define the context for locale rendering purposes. This
        field should not be set unless explicitly needed. Overriding context is relevant
        on pages where the id parameters on the request implicitly infer one context, but
        the locale should render based on a different context. For example, an admin panel
        page that manages courses passes the course_id as a request parameter. This sets
        CourseContext in the context object. However, because the page is an admin panel
        page, the course's context should not be used to determine the locale. Currently,
        the only possible value is ADMIN_PANEL
      </description>
    </attribute>


  </tag>
  
  <tag bb:public="true">
    <name>constants</name>
    <tag-class>blackboard.servlet.tags.ConstantsTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Exposes the constants defined in a given class to the JSP as a Map for the JSTL EL
      to use in other tags.
      <p>
      Example usage: 
      <p>
      <code>      
        &lt;bbData:constants var="formUrls" type="blackboard.metadata.customization.web.struts.FormContextAction"/&gt;
        ${formUrls['NAV_ITEM_KEY']}
      </code>      
      <p>
      <code>              
        &lt;bbData:constants type="blackboard.servlet.tags.ngui.ContextMenuTag"/&gt;
        ${ContextMenuTag['SEPARATOR']}
      </code>      
      ]]>        
    </description>
    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Variable name to store the constants map in. Defaults to the class name
        of the object, minus the package name.
      </description>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Scope to store the constants map in.  
        Defaults to <code>PAGE</code> scope.          
        Possible values are:
        <ul>
          <li>page</li>
          <li>request</li>
          <li>session</li>
          <li>application</li>
        </ul>  
        ]]>        
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        Class name containing the constants of interest.
      </description>
    </attribute>
  </tag>
  
  <tag bb:public="true">
    <name>enum</name>
    <tag-class>blackboard.servlet.tags.EnumTag</tag-class>
    <body-content>empty</body-content>
    <description>
      <![CDATA[
      Exposes an Enum to the JSP as a Map for the JSTL EL
      to use in other tags.  The elements of the map are a special wrapper
      for Enum that allows EL to access the ordinal and name of the Enum.            
      <p>
      Example usage: 
      <p>
      <code>
      &lt;bbData:enum var="actionEnum" type="blackboard.webapps.blackboard.user.struts.UserManagerForm$Action"/&gt;
      </code>
      <p>      
      This is the "Make Available" enum: <code>${actionEnum['MakeAvailable'].name}</code>       
      <BR>
      This is the "Make Unavailable" enum: <code>${actionEnum['MakeUnavailable'].name}</code>      
      
      ]]>      
    </description>
    <attribute>
      <name>var</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Variable name to store the Enum map in. Defaults to the Enum class
        name, minus the package name.  The same default value is used regardless 
        of whether the Enum class is declared as a top-level class or as an 
        inner class.  So, regardless of whether the <code>type</code> value is <code>com.foo.Enum</code>
        or <code>com.foo.Bar$Enum</code> the default value (if <code>var</code> is not provided) will 
        be <code>Enum</code>.
        ]]>        
      </description>
    </attribute>
    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Scope to store the Enum map in.  
        Defaults to <code>PAGE</code> scope.          
        Possible values are:
        <ul>
          <li>page</li>
          <li>request</li>
          <li>session</li>
          <li>application</li>
        </ul>                    
        ]]>        
      </description>
    </attribute>
    <attribute>
      <name>type</name>
      <required>true</required>
      <rtexprvalue>true</rtexprvalue>
      <description>
        <![CDATA[
        Class name of the Enum of interest.  Note that if the Enum that is being
        referenced is declared as an inner class, this must be in this format: 
        <code>package.ContainingClassname$EnumName</code>.
        ]]>        
      </description>
    </attribute>
  </tag>
  
   <function bb:public="true">
    <name>navItemToHref</name>
    <function-class>blackboard.servlet.util.NavItemControlUtil</function-class>
    <function-signature>java.lang.String navItemToHref( javax.servlet.http.HttpServletRequest, java.lang.String )</function-signature>
    <description>
      Returns the resolved href from the specified navItem
    </description>
  </function>

   <function bb:public="true">
    <name>truncateString</name>
    <function-class>blackboard.util.StringUtil</function-class>
    <function-signature>java.lang.String truncate( java.lang.String, int )</function-signature>
    <description>
      Deprecated. This has been moved to bbFunctions.tld
      Returns a truncated version of the specified string by the specified number of characters.
    </description>
  </function>

</taglib>

